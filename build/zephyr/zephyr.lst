
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
{
	return crc32_ieee_update(0x0, data, len);
}

u32_t crc32_ieee_update(u32_t crc, const u8_t *data, size_t len)
{
   0:	20001a78 	.word	0x20001a78
	crc = ~crc;
   4:	00001b2d 	.word	0x00001b2d
	for (size_t i = 0; i < len; i++) {
   8:	00001b85 	.word	0x00001b85
			crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
		}
	}

	return (~crc);
}
   c:	000019b9 	.word	0x000019b9
		crc = crc ^ data[i];
  10:	000019b9 	.word	0x000019b9
  14:	000019b9 	.word	0x000019b9
			crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
  18:	000019b9 	.word	0x000019b9
  1c:	000019b9 	.word	0x000019b9
		for (u8_t j = 0; j < 8; j++) {
  20:	000019b9 	.word	0x000019b9
			crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
  24:	000019b9 	.word	0x000019b9
		for (u8_t j = 0; j < 8; j++) {
  28:	000019b9 	.word	0x000019b9
  2c:	000015f5 	.word	0x000015f5

			crc = (crc << 1);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
  30:	000019b9 	.word	0x000019b9
  34:	000019b9 	.word	0x000019b9
  38:	000015b1 	.word	0x000015b1
  3c:	000019b9 	.word	0x000019b9

00000040 <_irq_vector_table>:
  40:	00001aed 000057df 00001aed 00001aed     .....W..........
	for (i = 0; i < len + padding; i++) {
  50:	00001aed 00001aed 00001aed 00001aed     ................

static struct rbnode *get_child(struct rbnode *n, int side)
{
	CHECK(n);
	if (side != 0) {
		return n->children[1];
  60:	00001aed 00001aed 00001aed 00001aed     ................
		 * upper node.  Remember to swap the color bits of the
		 * two nodes also.  And of course we don't have parent
		 * pointers, so the stack tracking this structure
		 * needs to be swapped too!
		 */
		if (hiparent != NULL) {
  70:	00001aed 00001aed 00001aed 00001aed     ................
			set_child(hiparent, get_side(hiparent, node), node2);
  80:	00001aed 00001aed 00001aed 00001aed     ................
		n->children[0] = (void *) (new | (old & 1UL));
  90:	00001aed 00001aed 00001aed 00001aed     ................
  a0:	00001aed 00001aed 00001aed 00001aed     ................

		set_child(node2, 1, get_child(node, 1));
		set_child(node, 1, NULL);

		tmp = stack[stacksz0 - 1];
		stack[stacksz0 - 1] = stack[stacksz - 1];
  b0:	00001aed 00001aed 00001aed 00001aed     ................
		stack[stacksz - 1] = tmp;
  c0:	00001aed 00001aed 00001aed 00001aed     ................
	*p = (*p & ~1UL) | color;
  d0:	00001aed 00001aed 00001aed 00001aed     ................

	CHECK(!get_child(node, 0) || !get_child(node, 1));

	struct rbnode *child = get_child(node, 0);

	if (child == NULL) {
  e0:	00001aed 00001aed 00001aed 00001aed     ................
	}

	/* Removing the root */
	if (stacksz < 2) {
		tree->root = child;
		if (child != NULL) {
  f0:	00001aed 00001aed 00001aed 00001aed     ................

Disassembly of section _TEXT_SECTION_NAME_2:

00000100 <__aeabi_llsr>:
		}
	}

	/* We may have rotated up into the root! */
	tree->root = stack[0];
}
     100:	40d0      	lsrs	r0, r2
     102:	1c0b      	adds	r3, r1, #0
     104:	40d1      	lsrs	r1, r2
			stack[stacksz++] = node2;
     106:	469c      	mov	ip, r3
     108:	3a20      	subs	r2, #32
     10a:	40d3      	lsrs	r3, r2
     10c:	4318      	orrs	r0, r3
     10e:	4252      	negs	r2, r2
			tree->root = node2;
     110:	4663      	mov	r3, ip
     112:	4093      	lsls	r3, r2
     114:	4318      	orrs	r0, r3
	return get_child(parent, 1) == child ? 1 : 0;
     116:	4770      	bx	lr

00000118 <__aeabi_ldivmod>:
			set_child(loparent, get_side(loparent, node2), node);
     118:	b97b      	cbnz	r3, 13a <__aeabi_ldivmod+0x22>
     11a:	b972      	cbnz	r2, 13a <__aeabi_ldivmod+0x22>
     11c:	2900      	cmp	r1, #0
     11e:	bfbe      	ittt	lt
     120:	2000      	movlt	r0, #0
     122:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
	uintptr_t l = (uintptr_t) n->children[0];
     126:	e006      	blt.n	136 <__aeabi_ldivmod+0x1e>
     128:	bf08      	it	eq
		n->children[0] = (void *) (new | (old & 1UL));
     12a:	2800      	cmpeq	r0, #0
     12c:	bf1c      	itt	ne
	l &= ~1UL;
     12e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
		n->children[0] = (void *) (new | (old & 1UL));
     132:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     136:	f000 b9c5 	b.w	4c4 <__aeabi_idiv0>
	l &= ~1UL;
     13a:	f1ad 0c08 	sub.w	ip, sp, #8
		n->children[0] = (void *) (new | (old & 1UL));
     13e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     142:	2900      	cmp	r1, #0
			tree->max_depth = 0;
     144:	db09      	blt.n	15a <CONFIG_IDLE_STACK_SIZE+0x1a>
     146:	2b00      	cmp	r3, #0
     148:	db1a      	blt.n	180 <CONFIG_IDLE_STACK_SIZE+0x40>
     14a:	f000 f84d 	bl	1e8 <__udivmoddi4>
	struct rbnode *parent = stack[stacksz - 2];
     14e:	f8dd e004 	ldr.w	lr, [sp, #4]
	if (!child) {
     152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		if (is_black(node)) {
     156:	b004      	add	sp, #16
			fix_missing_black(stack, stacksz, node);
     158:	4770      	bx	lr
			fix_missing_black(stack, stacksz, NULL);
     15a:	4240      	negs	r0, r0
     15c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     160:	2b00      	cmp	r3, #0
     162:	db1b      	blt.n	19c <CONFIG_IDLE_STACK_SIZE+0x5c>
	return get_child(parent, 1) == child ? 1 : 0;
     164:	f000 f840 	bl	1e8 <__udivmoddi4>
			set_child(parent, get_side(parent, node), NULL);
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
	tree->root = stack[0];
     172:	4240      	negs	r0, r0
     174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     178:	4252      	negs	r2, r2
     17a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
		set_child(parent, get_side(parent, node), child);
     17e:	4770      	bx	lr
     180:	4252      	negs	r2, r2
     182:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     186:	f000 f82f 	bl	1e8 <__udivmoddi4>
     18a:	f8dd e004 	ldr.w	lr, [sp, #4]
     18e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		if (is_red(node) || is_red(child)) {
     192:	b004      	add	sp, #16
     194:	4240      	negs	r0, r0
	return ((uintptr_t)n->children[0]) & 1UL;
     196:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
		if (is_red(node) || is_red(child)) {
     19a:	4770      	bx	lr
	*p = (*p & ~1UL) | color;
     19c:	4252      	negs	r2, r2
     19e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1a2:	f000 f821 	bl	1e8 <__udivmoddi4>
			stack[stacksz - 1] = child;
     1a6:	f8dd e004 	ldr.w	lr, [sp, #4]
			fix_missing_black(stack, stacksz, NULL);
     1aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	if (stacksz < 2) {
     1ae:	b004      	add	sp, #16
     1b0:	4252      	negs	r2, r2
		tree->root = child;
     1b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1b6:	4770      	bx	lr

000001b8 <__aeabi_uldivmod>:
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt) {
					prefix = 2;
     1b8:	b953      	cbnz	r3, 1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
	return len + (buf - buf0);
     1ba:	b94a      	cbnz	r2, 1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     1bc:	2900      	cmp	r1, #0
     1be:	bf08      	it	eq
					prefix = 2;
     1c0:	2800      	cmpeq	r0, #0
     1c2:	bf1c      	itt	ne
     1c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
			switch (c) {
     1cc:	f000 b97a 	b.w	4c4 <__aeabi_idiv0>
     1d0:	f1ad 0c08 	sub.w	ip, sp, #8
     1d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1d8:	f000 f806 	bl	1e8 <__udivmoddi4>
     1dc:	f8dd e004 	ldr.w	lr, [sp, #4]
     1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1e4:	b004      	add	sp, #16
	if (value < 0) {
     1e6:	4770      	bx	lr

000001e8 <__udivmoddi4>:
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		*buf++ = '-';
     1ec:	468c      	mov	ip, r1
		if (value != 0x80000000) {
     1ee:	460d      	mov	r5, r1
     1f0:	4604      	mov	r4, r0
		*buf++ = '-';
     1f2:	9e08      	ldr	r6, [sp, #32]
     1f4:	2b00      	cmp	r3, #0
		if (value != 0x80000000) {
     1f6:	d151      	bne.n	29c <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c>
			value = -value;
     1f8:	428a      	cmp	r2, r1
		*buf++ = ' ';
     1fa:	4617      	mov	r7, r2
     1fc:	d96d      	bls.n	2da <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
	return _to_x(buf, value, 10, precision);
     1fe:	fab2 fe82 	clz	lr, r2
     202:	f1be 0f00 	cmp.w	lr, #0
     206:	d00b      	beq.n	220 <__udivmoddi4+0x38>
				if (fplus || fspace || (int32_temp < 0)) {
     208:	f1ce 0c20 	rsb	ip, lr, #32
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     20c:	fa01 f50e 	lsl.w	r5, r1, lr
     210:	fa20 fc0c 	lsr.w	ip, r0, ip
				if (fplus || fspace || (int32_temp < 0)) {
     214:	fa02 f70e 	lsl.w	r7, r2, lr
     218:	ea4c 0c05 	orr.w	ip, ip, r5
     21c:	fa00 f40e 	lsl.w	r4, r0, lr
				}
				need_justifying = true;
				if (precision != -1) {
					pad = ' ';
     220:	ea4f 4a17 	mov.w	sl, r7, lsr #16
			switch (c) {
     224:	0c25      	lsrs	r5, r4, #16
     226:	fbbc f8fa 	udiv	r8, ip, sl
     22a:	fa1f f987 	uxth.w	r9, r7
     22e:	fb0a cc18 	mls	ip, sl, r8, ip
				cptr_temp = (char *) va_arg(vargs, char *);
     232:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     236:	fb08 f309 	mul.w	r3, r8, r9
					if (cptr_temp[c] == '\0') {
     23a:	42ab      	cmp	r3, r5
     23c:	d90a      	bls.n	254 <__udivmoddi4+0x6c>
     23e:	19ed      	adds	r5, r5, r7
     240:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
				if ((precision >= 0) && (precision < c)) {
     244:	f080 8123 	bcs.w	48e <CONFIG_BT_RX_STACK_SIZE+0x8e>
				if (c > 0) {
     248:	42ab      	cmp	r3, r5
     24a:	f240 8120 	bls.w	48e <CONFIG_BT_RX_STACK_SIZE+0x8e>
					memcpy(buf, cptr_temp, (size_t) c);
     24e:	f1a8 0802 	sub.w	r8, r8, #2
     252:	443d      	add	r5, r7
     254:	1aed      	subs	r5, r5, r3
     256:	b2a4      	uxth	r4, r4
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     258:	fbb5 f0fa 	udiv	r0, r5, sl
     25c:	fb0a 5510 	mls	r5, sl, r0, r5
     260:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
				buf[1] = '\0';
     264:	fb00 f909 	mul.w	r9, r0, r9
				c = 1;
     268:	45a1      	cmp	r9, r4
					prefix = 2;
     26a:	d909      	bls.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	19e4      	adds	r4, r4, r7
     26e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
	} else if (fplus) {
     272:	f080 810a 	bcs.w	48a <CONFIG_BT_RX_STACK_SIZE+0x8a>
		*buf++ = ' ';
     276:	45a1      	cmp	r9, r4
     278:	f240 8107 	bls.w	48a <CONFIG_BT_RX_STACK_SIZE+0x8a>
     27c:	3802      	subs	r0, #2
	} else if (fspace) {
     27e:	443c      	add	r4, r7
     280:	eba4 0409 	sub.w	r4, r4, r9
		*buf++ = ' ';
     284:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
	} else if (fspace) {
     288:	2100      	movs	r1, #0
     28a:	2e00      	cmp	r6, #0
     28c:	d061      	beq.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     28e:	fa24 f40e 	lsr.w	r4, r4, lr
					prefix = 1;
     292:	2300      	movs	r3, #0
     294:	6034      	str	r4, [r6, #0]
     296:	6073      	str	r3, [r6, #4]
     298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29c:	428b      	cmp	r3, r1
     29e:	d907      	bls.n	2b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
				u.d = (double) va_arg(vargs, double);
     2a0:	2e00      	cmp	r6, #0
     2a2:	d054      	beq.n	34e <CONFIG_BT_HCI_TX_STACK_SIZE+0xce>
     2a4:	2100      	movs	r1, #0
				double_temp = u.i;
     2a6:	e886 0021 	stmia.w	r6, {r0, r5}
				u.d = (double) va_arg(vargs, double);
     2aa:	4608      	mov	r0, r1
     2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fract = (double_temp << 11) & ~HIGHBIT64;
     2b0:	fab3 f183 	clz	r1, r3
     2b4:	2900      	cmp	r1, #0
     2b6:	f040 808e 	bne.w	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     2ba:	42ab      	cmp	r3, r5
     2bc:	d302      	bcc.n	2c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>
     2be:	4282      	cmp	r2, r0
	exp = double_temp >> 52 & 0x7ff;
     2c0:	f200 80fa 	bhi.w	4b8 <CONFIG_BT_RX_STACK_SIZE+0xb8>
	sign = !!(double_temp & HIGHBIT64);
     2c4:	1a84      	subs	r4, r0, r2
	if (exp == 0x7ff) {
     2c6:	eb65 0503 	sbc.w	r5, r5, r3
	fract = (double_temp << 11) & ~HIGHBIT64;
     2ca:	2001      	movs	r0, #1
     2cc:	46ac      	mov	ip, r5
	if (exp == 0x7ff) {
     2ce:	2e00      	cmp	r6, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
     2d0:	d03f      	beq.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     2d2:	e886 1010 	stmia.w	r6, {r4, ip}
	if (exp == 0x7ff) {
     2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sign) {
     2da:	b912      	cbnz	r2, 2e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     2dc:	2701      	movs	r7, #1
     2de:	fbb7 f7f2 	udiv	r7, r7, r2
			*buf++ = '-';
     2e2:	fab7 fe87 	clz	lr, r7
     2e6:	f1be 0f00 	cmp.w	lr, #0
     2ea:	d134      	bne.n	356 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd6>
     2ec:	1beb      	subs	r3, r5, r7
		if (!fract) {
     2ee:	0c3a      	lsrs	r2, r7, #16
     2f0:	fa1f fc87 	uxth.w	ip, r7
     2f4:	2101      	movs	r1, #1
			if (isupper(c)) {
     2f6:	fbb3 f8f2 	udiv	r8, r3, r2
				*buf++ = 'I';
     2fa:	0c25      	lsrs	r5, r4, #16
     2fc:	fb02 3318 	mls	r3, r2, r8, r3
				*buf++ = 'N';
     300:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
				*buf++ = 'F';
     304:	fb0c f308 	mul.w	r3, ip, r8
				*buf++ = 'n';
     308:	42ab      	cmp	r3, r5
	*buf = 0;
     30a:	d907      	bls.n	31c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>
     30c:	19ed      	adds	r5, r5, r7
     30e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
	return buf - start;
     312:	d202      	bcs.n	31a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     314:	42ab      	cmp	r3, r5
     316:	f200 80d1 	bhi.w	4bc <CONFIG_BT_RX_STACK_SIZE+0xbc>
				if (fplus || fspace || (buf[0] == '-')) {
     31a:	4680      	mov	r8, r0
     31c:	1aed      	subs	r5, r5, r3
     31e:	b2a3      	uxth	r3, r4
     320:	fbb5 f0f2 	udiv	r0, r5, r2
     324:	fb02 5510 	mls	r5, r2, r0, r5
     328:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     32c:	fb0c fc00 	mul.w	ip, ip, r0
     330:	45a4      	cmp	ip, r4
     332:	d907      	bls.n	344 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc4>

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1) {
     334:	19e4      	adds	r4, r4, r7
     336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     33a:	d202      	bcs.n	342 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     33c:	45a4      	cmp	ip, r4
				*buf++ = 'i';
     33e:	f200 80b8 	bhi.w	4b2 <CONFIG_BT_RX_STACK_SIZE+0xb2>
				*buf++ = 'n';
     342:	4618      	mov	r0, r3
     344:	eba4 040c 	sub.w	r4, r4, ip
				*buf++ = 'f';
     348:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     34c:	e79d      	b.n	28a <CONFIG_BT_HCI_TX_STACK_SIZE+0xa>
			if (isupper(c)) {
     34e:	4631      	mov	r1, r6
				*buf++ = 'N';
     350:	4630      	mov	r0, r6
     352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				*buf++ = 'n';
     356:	f1ce 0420 	rsb	r4, lr, #32
				*buf++ = 'N';
     35a:	fa05 f30e 	lsl.w	r3, r5, lr
				*buf++ = 'n';
     35e:	fa07 f70e 	lsl.w	r7, r7, lr
				*buf++ = 'n';
     362:	fa20 f804 	lsr.w	r8, r0, r4
     366:	0c3a      	lsrs	r2, r7, #16
		c = 'f';
     368:	fa25 f404 	lsr.w	r4, r5, r4
	if ((exp | fract) != 0) {
     36c:	ea48 0803 	orr.w	r8, r8, r3
     370:	fbb4 f1f2 	udiv	r1, r4, r2
		c = 'f';
     374:	ea4f 4518 	mov.w	r5, r8, lsr #16
	if ((exp | fract) != 0) {
     378:	fb02 4411 	mls	r4, r2, r1, r4
		fract |= HIGHBIT64;
     37c:	fa1f fc87 	uxth.w	ip, r7
     380:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
	if (decexp && sign) {
     384:	fb01 f30c 	mul.w	r3, r1, ip
     388:	42ab      	cmp	r3, r5
     38a:	fa00 f40e 	lsl.w	r4, r0, lr
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     38e:	d909      	bls.n	3a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x124>
	if (decexp && sign) {
     390:	19ed      	adds	r5, r5, r7
		*buf++ = '-';
     392:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
		*buf++ = ' ';
     396:	f080 808a 	bcs.w	4ae <CONFIG_BT_RX_STACK_SIZE+0xae>
     39a:	42ab      	cmp	r3, r5
	} else if (fspace) {
     39c:	f240 8087 	bls.w	4ae <CONFIG_BT_RX_STACK_SIZE+0xae>
	while (exp <= -3) {
     3a0:	3902      	subs	r1, #2
     3a2:	443d      	add	r5, r7
     3a4:	1aeb      	subs	r3, r5, r3
	while (exp > 0) {
     3a6:	fa1f f588 	uxth.w	r5, r8
     3aa:	fbb3 f0f2 	udiv	r0, r3, r2
		exp++;
     3ae:	fb02 3310 	mls	r3, r2, r0, r3
		_rlrshift(&fract);
     3b2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	while (exp < (0 + 4)) {
     3b6:	fb00 f30c 	mul.w	r3, r0, ip
     3ba:	42ab      	cmp	r3, r5
		precision = 6;		/* Default precision if none given */
     3bc:	d907      	bls.n	3ce <CONFIG_BT_HCI_TX_STACK_SIZE+0x14e>
	if ((c == 'g') || (c == 'G')) {
     3be:	19ed      	adds	r5, r5, r7
     3c0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
		precision = 6;		/* Default precision if none given */
     3c4:	d26f      	bcs.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
	if ((c == 'g') || (c == 'G')) {
     3c6:	42ab      	cmp	r3, r5
     3c8:	d96d      	bls.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
		if (!falt && (precision > 0)) {
     3ca:	3802      	subs	r0, #2
     3cc:	443d      	add	r5, r7
     3ce:	1aeb      	subs	r3, r5, r3
     3d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     3d4:	e78f      	b.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     3d6:	f1c1 0720 	rsb	r7, r1, #32
     3da:	fa22 f807 	lsr.w	r8, r2, r7
     3de:	408b      	lsls	r3, r1
				c = 'E';
     3e0:	fa05 f401 	lsl.w	r4, r5, r1
     3e4:	ea48 0303 	orr.w	r3, r8, r3
		exp = precision + 1;
     3e8:	fa20 fe07 	lsr.w	lr, r0, r7
     3ec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	if ((exp | fract) != 0) {
     3f0:	40fd      	lsrs	r5, r7
	} else if (fplus) {
     3f2:	ea4e 0e04 	orr.w	lr, lr, r4
		*buf++ = '+';
     3f6:	fbb5 f9fc 	udiv	r9, r5, ip
	} else if (fspace) {
     3fa:	ea4f 441e 	mov.w	r4, lr, lsr #16
     3fe:	fb0c 5519 	mls	r5, ip, r9, r5
		*buf++ = ' ';
     402:	fa1f f883 	uxth.w	r8, r3
	} else if (fspace) {
     406:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
			_rlrshift(&fract);
     40a:	fb09 f408 	mul.w	r4, r9, r8
			exp++;
     40e:	42ac      	cmp	r4, r5
     410:	fa02 f201 	lsl.w	r2, r2, r1
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     414:	fa00 fa01 	lsl.w	sl, r0, r1
     418:	d908      	bls.n	42c <CONFIG_BT_RX_STACK_SIZE+0x2c>
     41a:	18ed      	adds	r5, r5, r3
     41c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     420:	d243      	bcs.n	4aa <CONFIG_BT_RX_STACK_SIZE+0xaa>
     422:	42ac      	cmp	r4, r5
     424:	d941      	bls.n	4aa <CONFIG_BT_RX_STACK_SIZE+0xaa>
     426:	f1a9 0902 	sub.w	r9, r9, #2
     42a:	441d      	add	r5, r3
		fract *= 5;
     42c:	1b2d      	subs	r5, r5, r4
     42e:	fa1f fe8e 	uxth.w	lr, lr
     432:	fbb5 f0fc 	udiv	r0, r5, ip
     436:	fb0c 5510 	mls	r5, ip, r0, r5
		exp++;
     43a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
		decexp--;
     43e:	fb00 f808 	mul.w	r8, r0, r8
     442:	45a0      	cmp	r8, r4
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     444:	d907      	bls.n	456 <CONFIG_BT_RX_STACK_SIZE+0x56>
     446:	18e4      	adds	r4, r4, r3
     448:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     44c:	d229      	bcs.n	4a2 <CONFIG_BT_RX_STACK_SIZE+0xa2>
     44e:	45a0      	cmp	r8, r4
     450:	d927      	bls.n	4a2 <CONFIG_BT_RX_STACK_SIZE+0xa2>
     452:	3802      	subs	r0, #2
     454:	441c      	add	r4, r3
     456:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     45a:	eba4 0408 	sub.w	r4, r4, r8
     45e:	fba0 8902 	umull	r8, r9, r0, r2
     462:	454c      	cmp	r4, r9
     464:	46c6      	mov	lr, r8
     466:	464d      	mov	r5, r9
     468:	d315      	bcc.n	496 <CONFIG_BT_RX_STACK_SIZE+0x96>
			fract <<= 1;
     46a:	d012      	beq.n	492 <CONFIG_BT_RX_STACK_SIZE+0x92>
     46c:	b156      	cbz	r6, 484 <CONFIG_BT_RX_STACK_SIZE+0x84>
			exp--;
     46e:	ebba 030e 	subs.w	r3, sl, lr
     472:	eb64 0405 	sbc.w	r4, r4, r5
     476:	fa04 f707 	lsl.w	r7, r4, r7
		_ldiv5(&fract);
     47a:	40cb      	lsrs	r3, r1
     47c:	431f      	orrs	r7, r3
     47e:	40cc      	lsrs	r4, r1
     480:	6037      	str	r7, [r6, #0]
		exp--;
     482:	6074      	str	r4, [r6, #4]
     484:	2100      	movs	r1, #0
		decexp++;
     486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     48a:	4618      	mov	r0, r3
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     48c:	e6f8      	b.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     48e:	4690      	mov	r8, r2
     490:	e6e0      	b.n	254 <__udivmoddi4+0x6c>
     492:	45c2      	cmp	sl, r8
     494:	d2ea      	bcs.n	46c <CONFIG_BT_RX_STACK_SIZE+0x6c>
     496:	ebb8 0e02 	subs.w	lr, r8, r2
     49a:	eb69 0503 	sbc.w	r5, r9, r3
     49e:	3801      	subs	r0, #1
     4a0:	e7e4      	b.n	46c <CONFIG_BT_RX_STACK_SIZE+0x6c>
     4a2:	4628      	mov	r0, r5
     4a4:	e7d7      	b.n	456 <CONFIG_BT_RX_STACK_SIZE+0x56>
     4a6:	4640      	mov	r0, r8
     4a8:	e791      	b.n	3ce <CONFIG_BT_HCI_TX_STACK_SIZE+0x14e>
     4aa:	4681      	mov	r9, r0
     4ac:	e7be      	b.n	42c <CONFIG_BT_RX_STACK_SIZE+0x2c>
     4ae:	4601      	mov	r1, r0
     4b0:	e778      	b.n	3a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x124>
     4b2:	3802      	subs	r0, #2
			fract <<= 1;
     4b4:	443c      	add	r4, r7
     4b6:	e745      	b.n	344 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc4>
			exp--;
     4b8:	4608      	mov	r0, r1
     4ba:	e708      	b.n	2ce <CONFIG_BT_HCI_TX_STACK_SIZE+0x4e>
     4bc:	f1a8 0802 	sub.w	r8, r8, #2
     4c0:	443d      	add	r5, r7
		if (!falt && (precision > 0)) {
     4c2:	e72b      	b.n	31c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>

000004c4 <__aeabi_idiv0>:
     4c4:	4770      	bx	lr
	prune_zero = false;		/* Assume trailing 0's allowed     */
     4c6:	bf00      	nop

000004c8 <_Z17version_get_majorv>:
}

u8_t version_get_major()
{
    return __version.major;
}
     4c8:	2000      	movs	r0, #0
     4ca:	4770      	bx	lr

000004cc <_Z17version_get_minorv>:

u8_t version_get_minor()
{
    return __version.minor;
}
     4cc:	2001      	movs	r0, #1
     4ce:	4770      	bx	lr

000004d0 <_Z17version_get_buildv>:
u16_t version_get_build()
{
    return __version.build;
}
     4d0:	203d      	movs	r0, #61	; 0x3d
     4d2:	4770      	bx	lr

000004d4 <main>:
#include "ic_version.h"
#include "tc_msg_manager.hpp"


void main(void)
{
     4d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    printk("Firmware version: %d.%d.%d\n", version_get_major(), version_get_minor(),
     4d6:	f7ff fff7 	bl	4c8 <_Z17version_get_majorv>
     4da:	4604      	mov	r4, r0
     4dc:	f7ff fff6 	bl	4cc <_Z17version_get_minorv>
     4e0:	4605      	mov	r5, r0
           version_get_build());
     4e2:	f7ff fff5 	bl	4d0 <_Z17version_get_buildv>
     4e6:	462a      	mov	r2, r5
     4e8:	4603      	mov	r3, r0
     4ea:	4621      	mov	r1, r4
     4ec:	4811      	ldr	r0, [pc, #68]	; (534 <main+0x60>)
     4ee:	f000 fc59 	bl	da4 <printk>
    const u8_t msg[]  = "testing func";
     4f2:	4b11      	ldr	r3, [pc, #68]	; (538 <main+0x64>)
     4f4:	aa02      	add	r2, sp, #8
     4f6:	f103 0608 	add.w	r6, r3, #8
     4fa:	4615      	mov	r5, r2
     4fc:	6818      	ldr	r0, [r3, #0]
     4fe:	6859      	ldr	r1, [r3, #4]
     500:	4614      	mov	r4, r2
     502:	c403      	stmia	r4!, {r0, r1}
     504:	3308      	adds	r3, #8
     506:	42b3      	cmp	r3, r6
     508:	4622      	mov	r2, r4
     50a:	d1f7      	bne.n	4fc <main+0x28>
     50c:	6818      	ldr	r0, [r3, #0]
     50e:	791b      	ldrb	r3, [r3, #4]
     510:	7123      	strb	r3, [r4, #4]
    const u8_t func[] = "func";
     512:	4b0a      	ldr	r3, [pc, #40]	; (53c <main+0x68>)
    const u8_t msg[]  = "testing func";
     514:	6020      	str	r0, [r4, #0]
    const u8_t func[] = "func";
     516:	6818      	ldr	r0, [r3, #0]
     518:	9000      	str	r0, [sp, #0]
     51a:	791b      	ldrb	r3, [r3, #4]

    MsgManager::instance()->handlePrefix(msg, func);
     51c:	4808      	ldr	r0, [pc, #32]	; (540 <main+0x6c>)
    const u8_t func[] = "func";
     51e:	f88d 3004 	strb.w	r3, [sp, #4]
    MsgManager::instance()->handlePrefix(msg, func);
     522:	466a      	mov	r2, sp
     524:	4629      	mov	r1, r5
     526:	f000 f80d 	bl	544 <_ZN10MsgManager12handlePrefixEPKhS1_>

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     52a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     52e:	f007 fa95 	bl	7a5c <_impl_k_sleep>
     532:	e7fa      	b.n	52a <main+0x56>
     534:	000084e2 	.word	0x000084e2
     538:	000084fe 	.word	0x000084fe
     53c:	00008506 	.word	0x00008506
     540:	20000010 	.word	0x20000010

00000544 <_ZN10MsgManager12handlePrefixEPKhS1_>:
#include "tc_msg_manager.hpp"

MsgManager MsgManager::m_instance = MsgManager();

int *MsgManager::handlePrefix(const u8_t *msg, const u8_t *pattern)
{
     544:	4608      	mov	r0, r1
     546:	b508      	push	{r3, lr}
    const char *content = strstr((const char *) msg, (const char *) pattern);
     548:	4611      	mov	r1, r2
     54a:	f001 fb5f 	bl	1c0c <strstr>
    if (content == nullptr) {
     54e:	4601      	mov	r1, r0
     550:	b920      	cbnz	r0, 55c <_ZN10MsgManager12handlePrefixEPKhS1_+0x18>
        printk("substring is not finded\n");
     552:	4804      	ldr	r0, [pc, #16]	; (564 <_ZN10MsgManager12handlePrefixEPKhS1_+0x20>)
     554:	f000 fc26 	bl	da4 <printk>
    } else {
        printk("%s\n", content);
    }
    return 0;
}
     558:	2000      	movs	r0, #0
     55a:	bd08      	pop	{r3, pc}
        printk("%s\n", content);
     55c:	4802      	ldr	r0, [pc, #8]	; (568 <_ZN10MsgManager12handlePrefixEPKhS1_+0x24>)
     55e:	f000 fc21 	bl	da4 <printk>
     562:	e7f9      	b.n	558 <_ZN10MsgManager12handlePrefixEPKhS1_+0x14>
     564:	0000850b 	.word	0x0000850b
     568:	00008524 	.word	0x00008524

0000056c <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     56c:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     56e:	f990 400b 	ldrsb.w	r4, [r0, #11]
     572:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     574:	428c      	cmp	r4, r1
     576:	f04f 040c 	mov.w	r4, #12
     57a:	bfb6      	itet	lt
     57c:	4361      	mullt	r1, r4
     57e:	fb04 0101 	mlage	r1, r4, r1, r0
     582:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     584:	2420      	movs	r4, #32
     586:	fb92 f4f4 	sdiv	r4, r2, r4
     58a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     58e:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     590:	f002 001f 	and.w	r0, r2, #31
     594:	bd10      	pop	{r4, pc}

00000596 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     596:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     598:	ab01      	add	r3, sp, #4
     59a:	f7ff ffe7 	bl	56c <get_bit_ptr>

	*word |= (1<<bit);
     59e:	9a01      	ldr	r2, [sp, #4]
     5a0:	2301      	movs	r3, #1
     5a2:	fa03 f000 	lsl.w	r0, r3, r0
     5a6:	6813      	ldr	r3, [r2, #0]
     5a8:	4303      	orrs	r3, r0
     5aa:	6013      	str	r3, [r2, #0]
}
     5ac:	b003      	add	sp, #12
     5ae:	f85d fb04 	ldr.w	pc, [sp], #4

000005b2 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     5b2:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     5b4:	ab01      	add	r3, sp, #4
     5b6:	f7ff ffd9 	bl	56c <get_bit_ptr>

	*word &= ~(1<<bit);
     5ba:	9a01      	ldr	r2, [sp, #4]
     5bc:	2301      	movs	r3, #1
     5be:	fa03 f000 	lsl.w	r0, r3, r0
     5c2:	6813      	ldr	r3, [r2, #0]
     5c4:	ea23 0300 	bic.w	r3, r3, r0
     5c8:	6013      	str	r3, [r2, #0]
}
     5ca:	b003      	add	sp, #12
     5cc:	f85d fb04 	ldr.w	pc, [sp], #4

000005d0 <_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     5d4:	6843      	ldr	r3, [r0, #4]
     5d6:	8905      	ldrh	r5, [r0, #8]
{
     5d8:	4604      	mov	r4, r0
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     5da:	6800      	ldr	r0, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
     5dc:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     5de:	435d      	muls	r5, r3
	p->max_inline_level = -1;
     5e0:	22ff      	movs	r2, #255	; 0xff
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     5e2:	4428      	add	r0, r5
	p->max_inline_level = -1;
     5e4:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
     5e6:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     5e8:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     5ec:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     5f0:	42b9      	cmp	r1, r7
     5f2:	db05      	blt.n	600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>
     5f4:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     5f6:	8923      	ldrh	r3, [r4, #8]
     5f8:	429d      	cmp	r5, r3
     5fa:	db23      	blt.n	644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     600:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     604:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     608:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     60c:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     60e:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     612:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     616:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     61a:	bfc8      	it	gt
     61c:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     61e:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     622:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     626:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     62a:	bfca      	itet	gt
     62c:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     630:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     632:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     636:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     63a:	bfc8      	it	gt
     63c:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     640:	3101      	adds	r1, #1
     642:	e7d5      	b.n	5f0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x14>
	return (u8_t *)p->buf + lsz * block;
     644:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     646:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
     648:	6820      	ldr	r0, [r4, #0]
     64a:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     64c:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     64e:	5086      	str	r6, [r0, r2]
	return (u8_t *)p->buf + lsz * block;
     650:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     652:	689a      	ldr	r2, [r3, #8]
     654:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     656:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     658:	4620      	mov	r0, r4
     65a:	6011      	str	r1, [r2, #0]
	list->tail = node;
     65c:	6099      	str	r1, [r3, #8]
     65e:	462a      	mov	r2, r5
     660:	2100      	movs	r1, #0
     662:	f7ff ff98 	bl	596 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     666:	3501      	adds	r5, #1
     668:	e7c5      	b.n	5f6 <CONFIG_BT_CTLR_COMPANY_ID+0x5>

0000066a <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     66a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     66e:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l, alloc_l = -1, free_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[p->n_levels];
     670:	7a85      	ldrb	r5, [r0, #10]
{
     672:	af00      	add	r7, sp, #0
     674:	4604      	mov	r4, r0
     676:	60bb      	str	r3, [r7, #8]
	size_t lsizes[p->n_levels];
     678:	00ab      	lsls	r3, r5, #2
     67a:	330a      	adds	r3, #10
     67c:	f023 0307 	bic.w	r3, r3, #7
     680:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     684:	6843      	ldr	r3, [r0, #4]
{
     686:	60fa      	str	r2, [r7, #12]
	lsizes[0] = _ALIGN4(p->max_sz);
     688:	3303      	adds	r3, #3
     68a:	466a      	mov	r2, sp
     68c:	f023 0303 	bic.w	r3, r3, #3
     690:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     694:	46e9      	mov	r9, sp
	int i, from_l, alloc_l = -1, free_l = -1;
     696:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     69a:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     69c:	f04f 0e0c 	mov.w	lr, #12
     6a0:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     6a2:	42ab      	cmp	r3, r5
     6a4:	6278      	str	r0, [r7, #36]	; 0x24
     6a6:	da09      	bge.n	6bc <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     6a8:	b12b      	cbz	r3, 6b6 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     6aa:	6810      	ldr	r0, [r2, #0]
     6ac:	0880      	lsrs	r0, r0, #2
     6ae:	3003      	adds	r0, #3
     6b0:	f020 0003 	bic.w	r0, r0, #3
     6b4:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     6b6:	6850      	ldr	r0, [r2, #4]
     6b8:	4288      	cmp	r0, r1
     6ba:	d20b      	bcs.n	6d4 <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6be:	3301      	adds	r3, #1
     6c0:	d114      	bne.n	6ec <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     6c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     6c4:	2300      	movs	r3, #0
     6c6:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     6c8:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     6cc:	372c      	adds	r7, #44	; 0x2c
     6ce:	46bd      	mov	sp, r7
     6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     6d4:	68e0      	ldr	r0, [r4, #12]
     6d6:	fb0e 0003 	mla	r0, lr, r3, r0
     6da:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     6de:	6840      	ldr	r0, [r0, #4]
     6e0:	3204      	adds	r2, #4
     6e2:	4560      	cmp	r0, ip
     6e4:	bf18      	it	ne
     6e6:	461e      	movne	r6, r3
	for (i = 0; i < p->n_levels; i++) {
     6e8:	3301      	adds	r3, #1
     6ea:	e7d9      	b.n	6a0 <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     6ec:	1c75      	adds	r5, r6, #1
     6ee:	d0e8      	beq.n	6c2 <_sys_mem_pool_block_alloc+0x58>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     6f0:	7c23      	ldrb	r3, [r4, #16]
     6f2:	f013 0301 	ands.w	r3, r3, #1
     6f6:	d005      	beq.n	704 <_sys_mem_pool_block_alloc+0x9a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     6f8:	f04f 0220 	mov.w	r2, #32
     6fc:	f3ef 8311 	mrs	r3, BASEPRI
     700:	f382 8811 	msr	BASEPRI, r2
	key = pool_irq_lock(p);
     704:	623b      	str	r3, [r7, #32]
     706:	230c      	movs	r3, #12
     708:	4373      	muls	r3, r6
     70a:	1d1a      	adds	r2, r3, #4
     70c:	68e3      	ldr	r3, [r4, #12]
     70e:	4413      	add	r3, r2
	return list->head == list;
     710:	681d      	ldr	r5, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
     712:	42ab      	cmp	r3, r5
     714:	f000 8081 	beq.w	81a <CONFIG_ISR_STACK_SIZE+0x1a>
	node->prev->next = node->next;
     718:	e895 000a 	ldmia.w	r5, {r1, r3}
     71c:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     71e:	6829      	ldr	r1, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
     720:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
     724:	604b      	str	r3, [r1, #4]
	node->next = NULL;
     726:	2300      	movs	r3, #0
     728:	602b      	str	r3, [r5, #0]
	node->prev = NULL;
     72a:	606b      	str	r3, [r5, #4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     72c:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     72e:	4631      	mov	r1, r6
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     730:	1aeb      	subs	r3, r5, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     732:	4620      	mov	r0, r4
     734:	fb93 f2f2 	sdiv	r2, r3, r2
     738:	f7ff ff3b 	bl	5b2 <clear_free_bit>
     73c:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     740:	eb09 0a86 	add.w	sl, r9, r6, lsl #2
     744:	617b      	str	r3, [r7, #20]
			for (from_l = i; from_l < alloc_l; from_l++) {
     746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     748:	429e      	cmp	r6, r3
     74a:	db16      	blt.n	77a <_sys_mem_pool_block_alloc+0x110>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     74c:	7c23      	ldrb	r3, [r4, #16]
     74e:	07d9      	lsls	r1, r3, #31
     750:	d502      	bpl.n	758 <_sys_mem_pool_block_alloc+0xee>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     752:	6a3b      	ldr	r3, [r7, #32]
     754:	f383 8811 	msr	BASEPRI, r3
	*level_p = alloc_l;
     758:	68fb      	ldr	r3, [r7, #12]
     75a:	461a      	mov	r2, r3
     75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     75e:	6013      	str	r3, [r2, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     760:	6823      	ldr	r3, [r4, #0]
     762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     764:	1aeb      	subs	r3, r5, r3
     766:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     76a:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     76e:	68ba      	ldr	r2, [r7, #8]
     770:	6013      	str	r3, [r2, #0]
	*data_p = data;
     772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     774:	2000      	movs	r0, #0
	*data_p = data;
     776:	601d      	str	r5, [r3, #0]
	return 0;
     778:	e7a8      	b.n	6cc <_sys_mem_pool_block_alloc+0x62>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     77a:	6823      	ldr	r3, [r4, #0]
	bn = block_num(p, block, lsizes[l]);
     77c:	f85a 2b04 	ldr.w	r2, [sl], #4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     780:	1aeb      	subs	r3, r5, r3
     782:	fb93 f3f2 	sdiv	r3, r3, r2
     786:	697a      	ldr	r2, [r7, #20]
		int lbn = 4*bn + i;
     788:	009b      	lsls	r3, r3, #2
     78a:	613b      	str	r3, [r7, #16]
     78c:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     790:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     792:	f04f 0b01 	mov.w	fp, #1
     796:	61bb      	str	r3, [r7, #24]
		set_free_bit(p, l + 1, lbn);
     798:	eb06 030b 	add.w	r3, r6, fp
     79c:	607b      	str	r3, [r7, #4]
		int lsz = lsizes[l + 1];
     79e:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     7a2:	6879      	ldr	r1, [r7, #4]
		void *block2 = (lsz * i) + (char *)block;
     7a4:	fb0b f308 	mul.w	r3, fp, r8
     7a8:	61fb      	str	r3, [r7, #28]
     7aa:	18eb      	adds	r3, r5, r3
     7ac:	603b      	str	r3, [r7, #0]
		set_free_bit(p, l + 1, lbn);
     7ae:	693b      	ldr	r3, [r7, #16]
     7b0:	4620      	mov	r0, r4
     7b2:	eb0b 0203 	add.w	r2, fp, r3
     7b6:	f7ff feee 	bl	596 <set_free_bit>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     7ba:	683b      	ldr	r3, [r7, #0]
     7bc:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     7be:	8921      	ldrh	r1, [r4, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     7c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     7c4:	4498      	add	r8, r3
     7c6:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     7ca:	6862      	ldr	r2, [r4, #4]
     7cc:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     7ce:	4590      	cmp	r8, r2
     7d0:	d20a      	bcs.n	7e8 <_sys_mem_pool_block_alloc+0x17e>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     7d2:	68e2      	ldr	r2, [r4, #12]
     7d4:	69b9      	ldr	r1, [r7, #24]
	node->next = list;
     7d6:	69f8      	ldr	r0, [r7, #28]
     7d8:	440a      	add	r2, r1
     7da:	1d11      	adds	r1, r2, #4
     7dc:	5029      	str	r1, [r5, r0]
	node->prev = list->tail;
     7de:	6891      	ldr	r1, [r2, #8]
     7e0:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     7e2:	6891      	ldr	r1, [r2, #8]
     7e4:	600b      	str	r3, [r1, #0]
	list->tail = node;
     7e6:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     7e8:	f10b 0b01 	add.w	fp, fp, #1
     7ec:	f1bb 0f04 	cmp.w	fp, #4
     7f0:	d1d5      	bne.n	79e <_sys_mem_pool_block_alloc+0x134>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     7f2:	7c23      	ldrb	r3, [r4, #16]
     7f4:	07d8      	lsls	r0, r3, #31
     7f6:	f106 0601 	add.w	r6, r6, #1
     7fa:	d502      	bpl.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     7fc:	6a3b      	ldr	r3, [r7, #32]
     7fe:	f383 8811 	msr	BASEPRI, r3
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     802:	7c23      	ldrb	r3, [r4, #16]
     804:	f013 0301 	ands.w	r3, r3, #1
     808:	d005      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
	__asm__ volatile(
     80a:	f04f 0220 	mov.w	r2, #32
     80e:	f3ef 8311 	mrs	r3, BASEPRI
     812:	f382 8811 	msr	BASEPRI, r2
				key = pool_irq_lock(p);
     816:	623b      	str	r3, [r7, #32]
     818:	e795      	b.n	746 <_sys_mem_pool_block_alloc+0xdc>
	for (i = free_l; i >= 0; i--) {
     81a:	3e01      	subs	r6, #1
     81c:	1c72      	adds	r2, r6, #1
     81e:	f1a3 030c 	sub.w	r3, r3, #12
     822:	f47f af75 	bne.w	710 <_sys_mem_pool_block_alloc+0xa6>
     826:	2500      	movs	r5, #0
     828:	e790      	b.n	74c <_sys_mem_pool_block_alloc+0xe2>

0000082a <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     82a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     82e:	b087      	sub	sp, #28
	size_t lsizes[p->n_levels];
     830:	7a83      	ldrb	r3, [r0, #10]
     832:	009b      	lsls	r3, r3, #2
     834:	330a      	adds	r3, #10
     836:	f023 0307 	bic.w	r3, r3, #7
{
     83a:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     83c:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     840:	6843      	ldr	r3, [r0, #4]
     842:	3303      	adds	r3, #3
     844:	f023 0303 	bic.w	r3, r3, #3
{
     848:	4604      	mov	r4, r0
	size_t lsizes[p->n_levels];
     84a:	46e8      	mov	r8, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     84c:	9300      	str	r3, [sp, #0]
     84e:	466d      	mov	r5, sp
	for (i = 1; i <= level; i++) {
     850:	2001      	movs	r0, #1
     852:	4281      	cmp	r1, r0
     854:	f080 8088 	bcs.w	968 <_sys_mem_pool_block_free+0x13e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     858:	7c23      	ldrb	r3, [r4, #16]
     85a:	f013 0301 	ands.w	r3, r3, #1
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     85e:	460e      	mov	r6, r1
     860:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     862:	d005      	beq.n	870 <_sys_mem_pool_block_free+0x46>
     864:	f04f 0220 	mov.w	r2, #32
     868:	f3ef 8311 	mrs	r3, BASEPRI
     86c:	f382 8811 	msr	BASEPRI, r2
	unsigned int key = pool_irq_lock(p);
     870:	60bb      	str	r3, [r7, #8]
     872:	230c      	movs	r3, #12
     874:	fb03 f901 	mul.w	r9, r3, r1
	int i, lsz = lsizes[level];
     878:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
     87c:	60fb      	str	r3, [r7, #12]
	return (u8_t *)p->buf + lsz * block;
     87e:	fb03 fb05 	mul.w	fp, r3, r5
     882:	6823      	ldr	r3, [r4, #0]
     884:	607b      	str	r3, [r7, #4]
	set_free_bit(p, level, bn);
     886:	462a      	mov	r2, r5
     888:	4631      	mov	r1, r6
     88a:	4620      	mov	r0, r4
	return (u8_t *)p->buf + lsz * block;
     88c:	eb03 0a0b 	add.w	sl, r3, fp
	set_free_bit(p, level, bn);
     890:	f7ff fe81 	bl	596 <set_free_bit>
	sys_dlist_append(&p->levels[level].free_list, block);
     894:	68e2      	ldr	r2, [r4, #12]
	node->next = list;
     896:	687b      	ldr	r3, [r7, #4]
     898:	444a      	add	r2, r9
     89a:	1d11      	adds	r1, r2, #4
     89c:	f843 100b 	str.w	r1, [r3, fp]
	node->prev = list->tail;
     8a0:	6893      	ldr	r3, [r2, #8]
     8a2:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
     8a6:	6893      	ldr	r3, [r2, #8]
     8a8:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
     8ac:	f8c2 a008 	str.w	sl, [r2, #8]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     8b0:	7c23      	ldrb	r3, [r4, #16]
     8b2:	07da      	lsls	r2, r3, #31
     8b4:	d502      	bpl.n	8bc <_sys_mem_pool_block_free+0x92>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     8b6:	68bb      	ldr	r3, [r7, #8]
     8b8:	f383 8811 	msr	BASEPRI, r3
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     8bc:	f894 a010 	ldrb.w	sl, [r4, #16]
     8c0:	f01a 0a01 	ands.w	sl, sl, #1
     8c4:	d005      	beq.n	8d2 <_sys_mem_pool_block_free+0xa8>
	__asm__ volatile(
     8c6:	f04f 0320 	mov.w	r3, #32
     8ca:	f3ef 8a11 	mrs	sl, BASEPRI
     8ce:	f383 8811 	msr	BASEPRI, r3
	key = pool_irq_lock(p);
     8d2:	f8c7 a008 	str.w	sl, [r7, #8]
	if (level == 0 || partner_bits(p, level, bn) != 0xf) {
     8d6:	2e00      	cmp	r6, #0
     8d8:	d04f      	beq.n	97a <_sys_mem_pool_block_free+0x150>
	int bit = get_bit_ptr(p, level, bn, &word);
     8da:	f107 0314 	add.w	r3, r7, #20
     8de:	462a      	mov	r2, r5
     8e0:	4631      	mov	r1, r6
     8e2:	4620      	mov	r0, r4
     8e4:	f7ff fe42 	bl	56c <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     8e8:	697a      	ldr	r2, [r7, #20]
     8ea:	2304      	movs	r3, #4
     8ec:	fb90 f3f3 	sdiv	r3, r0, r3
     8f0:	6810      	ldr	r0, [r2, #0]
     8f2:	009b      	lsls	r3, r3, #2
     8f4:	40d8      	lsrs	r0, r3
     8f6:	f000 000f 	and.w	r0, r0, #15
	if (level == 0 || partner_bits(p, level, bn) != 0xf) {
     8fa:	280f      	cmp	r0, #15
     8fc:	d13d      	bne.n	97a <_sys_mem_pool_block_free+0x150>
		int b = (bn & ~3) + i;
     8fe:	f025 0303 	bic.w	r3, r5, #3
     902:	607b      	str	r3, [r7, #4]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     904:	68fb      	ldr	r3, [r7, #12]
     906:	3b01      	subs	r3, #1
	if (level == 0 || partner_bits(p, level, bn) != 0xf) {
     908:	f04f 0a00 	mov.w	sl, #0
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     90c:	603b      	str	r3, [r7, #0]
		int b = (bn & ~3) + i;
     90e:	687b      	ldr	r3, [r7, #4]
	return p->n_max * p->max_sz;
     910:	f8b4 e008 	ldrh.w	lr, [r4, #8]
     914:	6861      	ldr	r1, [r4, #4]
		int b = (bn & ~3) + i;
     916:	eb03 020a 	add.w	r2, r3, sl
	return (u8_t *)p->buf + lsz * block;
     91a:	68fb      	ldr	r3, [r7, #12]
     91c:	fb03 fb02 	mul.w	fp, r3, r2
		if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
     920:	683b      	ldr	r3, [r7, #0]
	return p->n_max * p->max_sz;
     922:	fb01 f10e 	mul.w	r1, r1, lr
		if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
     926:	eb03 000b 	add.w	r0, r3, fp
     92a:	4288      	cmp	r0, r1
     92c:	d211      	bcs.n	952 <_sys_mem_pool_block_free+0x128>
			clear_free_bit(p, level, b);
     92e:	4631      	mov	r1, r6
     930:	4620      	mov	r0, r4
     932:	f7ff fe3e 	bl	5b2 <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
     936:	6822      	ldr	r2, [r4, #0]
     938:	eb02 010b 	add.w	r1, r2, fp
	node->prev->next = node->next;
     93c:	f852 000b 	ldr.w	r0, [r2, fp]
     940:	684b      	ldr	r3, [r1, #4]
     942:	6018      	str	r0, [r3, #0]
	node->next->prev = node->prev;
     944:	f852 000b 	ldr.w	r0, [r2, fp]
     948:	6043      	str	r3, [r0, #4]
	node->next = NULL;
     94a:	2300      	movs	r3, #0
     94c:	f842 300b 	str.w	r3, [r2, fp]
	node->prev = NULL;
     950:	604b      	str	r3, [r1, #4]
	for (i = 0; i < 4; i++) {
     952:	f10a 0a01 	add.w	sl, sl, #1
     956:	f1ba 0f04 	cmp.w	sl, #4
     95a:	d1d8      	bne.n	90e <_sys_mem_pool_block_free+0xe4>
	return bfree_recombine(p, level - 1, lsizes, bn / 4, key);
     95c:	fb95 f5fa 	sdiv	r5, r5, sl
     960:	3e01      	subs	r6, #1
     962:	f1a9 090c 	sub.w	r9, r9, #12
     966:	e787      	b.n	878 <_sys_mem_pool_block_free+0x4e>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     968:	682b      	ldr	r3, [r5, #0]
     96a:	089b      	lsrs	r3, r3, #2
     96c:	3303      	adds	r3, #3
     96e:	f023 0303 	bic.w	r3, r3, #3
     972:	f845 3f04 	str.w	r3, [r5, #4]!
	for (i = 1; i <= level; i++) {
     976:	3001      	adds	r0, #1
     978:	e76b      	b.n	852 <_sys_mem_pool_block_free+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     97a:	7c23      	ldrb	r3, [r4, #16]
     97c:	07db      	lsls	r3, r3, #31
     97e:	d501      	bpl.n	984 <_sys_mem_pool_block_free+0x15a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     980:	f38a 8811 	msr	BASEPRI, sl
}
     984:	371c      	adds	r7, #28
     986:	46bd      	mov	sp, r7
     988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000098c <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     98c:	b508      	push	{r3, lr}
     98e:	4604      	mov	r4, r0
     990:	4608      	mov	r0, r1
     992:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     994:	461a      	mov	r2, r3
     996:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     998:	f007 f8a0 	bl	7adc <_impl_k_current_get>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
     99c:	f001 f882 	bl	1aa4 <_impl_k_thread_abort>

000009a0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
     9a0:	b510      	push	{r4, lr}
     9a2:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_ALLOC_APPEND, k_queue_alloc_append, s32_t, struct k_queue *, queue, void *, data)

K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_ALLOC_PREPEND, k_queue_alloc_prepend, s32_t, struct k_queue *, queue, void *, data)

K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
     9a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     9a8:	4620      	mov	r0, r4
     9aa:	f006 fdcf 	bl	754c <_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
     9ae:	4603      	mov	r3, r0
     9b0:	2800      	cmp	r0, #0
     9b2:	d0f7      	beq.n	9a4 <z_work_q_main+0x4>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     9b4:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
     9b6:	6842      	ldr	r2, [r0, #4]
     9b8:	f3bf 8f5b 	dmb	ish
     9bc:	e853 1f00 	ldrex	r1, [r3]
     9c0:	f021 0e01 	bic.w	lr, r1, #1
     9c4:	e843 ec00 	strex	ip, lr, [r3]
     9c8:	f1bc 0f00 	cmp.w	ip, #0
     9cc:	d1f6      	bne.n	9bc <z_work_q_main+0x1c>
     9ce:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
     9d2:	07cb      	lsls	r3, r1, #31
     9d4:	d500      	bpl.n	9d8 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
     9d6:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
     9d8:	f007 f816 	bl	7a08 <_impl_k_yield>
     9dc:	e7e2      	b.n	9a4 <z_work_q_main+0x4>

000009de <z_arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     9de:	2000      	movs	r0, #0
     9e0:	4770      	bx	lr

000009e2 <print_err>:
{
	return _char_out;
}

static void print_err(out_func_t out, void *ctx)
{
     9e2:	b570      	push	{r4, r5, r6, lr}
     9e4:	4604      	mov	r4, r0
     9e6:	460d      	mov	r5, r1
	out('E', ctx);
     9e8:	2045      	movs	r0, #69	; 0x45
     9ea:	47a0      	blx	r4
	out('R', ctx);
     9ec:	4629      	mov	r1, r5
     9ee:	2052      	movs	r0, #82	; 0x52
     9f0:	47a0      	blx	r4
	out('R', ctx);
     9f2:	4629      	mov	r1, r5
     9f4:	4623      	mov	r3, r4
     9f6:	2052      	movs	r0, #82	; 0x52
}
     9f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
     9fc:	4718      	bx	r3
	...

00000a00 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     a00:	680b      	ldr	r3, [r1, #0]
     a02:	3301      	adds	r3, #1
     a04:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     a06:	4b01      	ldr	r3, [pc, #4]	; (a0c <char_out+0xc>)
     a08:	681b      	ldr	r3, [r3, #0]
     a0a:	4718      	bx	r3
     a0c:	200027b8 	.word	0x200027b8

00000a10 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a14:	b085      	sub	sp, #20
     a16:	469b      	mov	fp, r3
     a18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     a1a:	f8df a090 	ldr.w	sl, [pc, #144]	; aac <_printk_dec_ulong+0x9c>
     a1e:	2c01      	cmp	r4, #1
     a20:	bfb8      	it	lt
     a22:	2401      	movlt	r4, #1
     a24:	2b01      	cmp	r3, #1
     a26:	bf0c      	ite	eq
     a28:	2330      	moveq	r3, #48	; 0x30
     a2a:	2320      	movne	r3, #32
     a2c:	4615      	mov	r5, r2
     a2e:	4680      	mov	r8, r0
     a30:	4689      	mov	r9, r1
     a32:	9401      	str	r4, [sp, #4]
     a34:	9302      	str	r3, [sp, #8]
     a36:	2601      	movs	r6, #1
     a38:	270a      	movs	r7, #10
     a3a:	2200      	movs	r2, #0
     a3c:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     a40:	b90a      	cbnz	r2, a46 <_printk_dec_ulong+0x36>
     a42:	45aa      	cmp	sl, r5
     a44:	d21f      	bcs.n	a86 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     a46:	fbb5 f0f4 	udiv	r0, r5, r4
     a4a:	4649      	mov	r1, r9
     a4c:	3030      	adds	r0, #48	; 0x30
     a4e:	47c0      	blx	r8
			digits++;
     a50:	3601      	adds	r6, #1
			found_largest_digit = 1;
     a52:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     a54:	3f01      	subs	r7, #1
	while (pos >= 9) {
     a56:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     a58:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     a5c:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     a60:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     a64:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     a68:	d1e8      	bne.n	a3c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     a6a:	4649      	mov	r1, r9
     a6c:	f105 0030 	add.w	r0, r5, #48	; 0x30
     a70:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     a72:	f1bb 0f03 	cmp.w	fp, #3
     a76:	d103      	bne.n	a80 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     a78:	9b01      	ldr	r3, [sp, #4]
     a7a:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     a7c:	2c00      	cmp	r4, #0
     a7e:	dc0f      	bgt.n	aa0 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     a80:	b005      	add	sp, #20
     a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     a86:	9b01      	ldr	r3, [sp, #4]
     a88:	42bb      	cmp	r3, r7
     a8a:	dbe3      	blt.n	a54 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     a8c:	f1bb 0f02 	cmp.w	fp, #2
     a90:	d8e0      	bhi.n	a54 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     a92:	4649      	mov	r1, r9
     a94:	9802      	ldr	r0, [sp, #8]
     a96:	9203      	str	r2, [sp, #12]
			digits++;
     a98:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     a9a:	47c0      	blx	r8
			digits++;
     a9c:	9a03      	ldr	r2, [sp, #12]
     a9e:	e7d9      	b.n	a54 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     aa0:	4649      	mov	r1, r9
     aa2:	2020      	movs	r0, #32
     aa4:	47c0      	blx	r8
     aa6:	3c01      	subs	r4, #1
     aa8:	e7e8      	b.n	a7c <_printk_dec_ulong+0x6c>
     aaa:	bf00      	nop
     aac:	3b9ac9ff 	.word	0x3b9ac9ff

00000ab0 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     ab0:	680a      	ldr	r2, [r1, #0]
     ab2:	688b      	ldr	r3, [r1, #8]
{
     ab4:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     ab6:	b112      	cbz	r2, abe <str_out+0xe>
     ab8:	684c      	ldr	r4, [r1, #4]
     aba:	42a3      	cmp	r3, r4
     abc:	db02      	blt.n	ac4 <str_out+0x14>
		ctx->count++;
     abe:	3301      	adds	r3, #1
     ac0:	608b      	str	r3, [r1, #8]
		return c;
     ac2:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ac4:	1e65      	subs	r5, r4, #1
     ac6:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     ac8:	bf0b      	itete	eq
     aca:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     acc:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     ace:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     ad0:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     ad2:	bf0c      	ite	eq
     ad4:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     ad6:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     ad8:	bd30      	pop	{r4, r5, pc}
	...

00000adc <__printk_hook_install>:
	_char_out = fn;
     adc:	4b01      	ldr	r3, [pc, #4]	; (ae4 <__printk_hook_install+0x8>)
     ade:	6018      	str	r0, [r3, #0]
     ae0:	4770      	bx	lr
     ae2:	bf00      	nop
     ae4:	200027b8 	.word	0x200027b8

00000ae8 <_vprintk>:
{
     ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     aec:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     aee:	f04f 0a00 	mov.w	sl, #0
{
     af2:	4606      	mov	r6, r0
     af4:	460f      	mov	r7, r1
     af6:	9203      	str	r2, [sp, #12]
     af8:	461c      	mov	r4, r3
	int min_width = -1;
     afa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     afe:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     b00:	4655      	mov	r5, sl
	while (*fmt) {
     b02:	9b03      	ldr	r3, [sp, #12]
     b04:	7818      	ldrb	r0, [r3, #0]
     b06:	b910      	cbnz	r0, b0e <_vprintk+0x26>
}
     b08:	b009      	add	sp, #36	; 0x24
     b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     b0e:	b945      	cbnz	r5, b22 <_vprintk+0x3a>
			if (*fmt != '%') {
     b10:	2825      	cmp	r0, #37	; 0x25
     b12:	f000 812b 	beq.w	d6c <_vprintk+0x284>
				out((int)*fmt, ctx);
     b16:	4639      	mov	r1, r7
     b18:	47b0      	blx	r6
		++fmt;
     b1a:	9b03      	ldr	r3, [sp, #12]
     b1c:	3301      	adds	r3, #1
     b1e:	9303      	str	r3, [sp, #12]
     b20:	e7ef      	b.n	b02 <_vprintk+0x1a>
			switch (*fmt) {
     b22:	2864      	cmp	r0, #100	; 0x64
     b24:	d062      	beq.n	bec <_vprintk+0x104>
     b26:	d819      	bhi.n	b5c <_vprintk+0x74>
     b28:	2839      	cmp	r0, #57	; 0x39
     b2a:	d80a      	bhi.n	b42 <_vprintk+0x5a>
     b2c:	2831      	cmp	r0, #49	; 0x31
     b2e:	d251      	bcs.n	bd4 <_vprintk+0xec>
     b30:	282d      	cmp	r0, #45	; 0x2d
     b32:	d03d      	beq.n	bb0 <_vprintk+0xc8>
     b34:	2830      	cmp	r0, #48	; 0x30
     b36:	d03e      	beq.n	bb6 <_vprintk+0xce>
     b38:	2825      	cmp	r0, #37	; 0x25
     b3a:	d108      	bne.n	b4e <_vprintk+0x66>
				out((int)'%', ctx);
     b3c:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     b3e:	47b0      	blx	r6
     b40:	e084      	b.n	c4c <_vprintk+0x164>
			switch (*fmt) {
     b42:	2858      	cmp	r0, #88	; 0x58
     b44:	f000 80a9 	beq.w	c9a <_vprintk+0x1b2>
     b48:	2863      	cmp	r0, #99	; 0x63
     b4a:	f000 8109 	beq.w	d60 <_vprintk+0x278>
				out((int)'%', ctx);
     b4e:	4639      	mov	r1, r7
     b50:	2025      	movs	r0, #37	; 0x25
     b52:	47b0      	blx	r6
				out((int)*fmt, ctx);
     b54:	9b03      	ldr	r3, [sp, #12]
     b56:	4639      	mov	r1, r7
     b58:	7818      	ldrb	r0, [r3, #0]
     b5a:	e7f0      	b.n	b3e <_vprintk+0x56>
			switch (*fmt) {
     b5c:	2870      	cmp	r0, #112	; 0x70
     b5e:	f000 8092 	beq.w	c86 <_vprintk+0x19e>
     b62:	d806      	bhi.n	b72 <_vprintk+0x8a>
     b64:	2869      	cmp	r0, #105	; 0x69
     b66:	d041      	beq.n	bec <_vprintk+0x104>
     b68:	286c      	cmp	r0, #108	; 0x6c
     b6a:	d03c      	beq.n	be6 <_vprintk+0xfe>
     b6c:	2868      	cmp	r0, #104	; 0x68
     b6e:	d0d4      	beq.n	b1a <_vprintk+0x32>
     b70:	e7ed      	b.n	b4e <_vprintk+0x66>
     b72:	2875      	cmp	r0, #117	; 0x75
     b74:	d06e      	beq.n	c54 <_vprintk+0x16c>
     b76:	d817      	bhi.n	ba8 <_vprintk+0xc0>
     b78:	2873      	cmp	r0, #115	; 0x73
     b7a:	d1e8      	bne.n	b4e <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     b7c:	6825      	ldr	r5, [r4, #0]
     b7e:	f104 0b04 	add.w	fp, r4, #4
     b82:	462b      	mov	r3, r5
				while (*s)
     b84:	461c      	mov	r4, r3
     b86:	f814 0b01 	ldrb.w	r0, [r4], #1
     b8a:	2800      	cmp	r0, #0
     b8c:	f040 80df 	bne.w	d4e <_vprintk+0x266>
				if (padding == PAD_SPACE_AFTER) {
     b90:	f1b8 0f03 	cmp.w	r8, #3
     b94:	f040 80f3 	bne.w	d7e <_vprintk+0x296>
					int remaining = min_width - (s - start);
     b98:	1b5c      	subs	r4, r3, r5
     b9a:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     b9e:	2c00      	cmp	r4, #0
     ba0:	f300 80d9 	bgt.w	d56 <_vprintk+0x26e>
				char *s = va_arg(ap, char *);
     ba4:	465c      	mov	r4, fp
     ba6:	e051      	b.n	c4c <_vprintk+0x164>
			switch (*fmt) {
     ba8:	2878      	cmp	r0, #120	; 0x78
     baa:	d076      	beq.n	c9a <_vprintk+0x1b2>
     bac:	287a      	cmp	r0, #122	; 0x7a
     bae:	e7de      	b.n	b6e <_vprintk+0x86>
				padding = PAD_SPACE_AFTER;
     bb0:	f04f 0803 	mov.w	r8, #3
     bb4:	e7b1      	b.n	b1a <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     bb6:	f1b9 0f00 	cmp.w	r9, #0
     bba:	da0e      	bge.n	bda <_vprintk+0xf2>
     bbc:	f1b8 0f00 	cmp.w	r8, #0
     bc0:	f000 80da 	beq.w	d78 <_vprintk+0x290>
					min_width = *fmt - '0';
     bc4:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     bc8:	f1b8 0f00 	cmp.w	r8, #0
     bcc:	bf08      	it	eq
     bce:	f04f 0802 	moveq.w	r8, #2
     bd2:	e7a2      	b.n	b1a <_vprintk+0x32>
				if (min_width < 0) {
     bd4:	f1b9 0f00 	cmp.w	r9, #0
     bd8:	dbf4      	blt.n	bc4 <_vprintk+0xdc>
					min_width = 10 * min_width + *fmt - '0';
     bda:	230a      	movs	r3, #10
     bdc:	fb03 0909 	mla	r9, r3, r9, r0
     be0:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     be4:	e7f0      	b.n	bc8 <_vprintk+0xe0>
				long_ctr++;
     be6:	f10a 0a01 	add.w	sl, sl, #1
     bea:	e796      	b.n	b1a <_vprintk+0x32>
				if (long_ctr == 0) {
     bec:	f1ba 0f00 	cmp.w	sl, #0
     bf0:	d112      	bne.n	c18 <_vprintk+0x130>
					long ld = va_arg(ap, long);
     bf2:	6825      	ldr	r5, [r4, #0]
     bf4:	3404      	adds	r4, #4
				if (d < 0) {
     bf6:	2d00      	cmp	r5, #0
     bf8:	da05      	bge.n	c06 <_vprintk+0x11e>
					out((int)'-', ctx);
     bfa:	4639      	mov	r1, r7
     bfc:	202d      	movs	r0, #45	; 0x2d
     bfe:	47b0      	blx	r6
					d = -d;
     c00:	426d      	negs	r5, r5
					min_width--;
     c02:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     c06:	f8cd 9000 	str.w	r9, [sp]
     c0a:	4643      	mov	r3, r8
     c0c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     c0e:	4639      	mov	r1, r7
     c10:	4630      	mov	r0, r6
     c12:	f7ff fefd 	bl	a10 <_printk_dec_ulong>
     c16:	e019      	b.n	c4c <_vprintk+0x164>
				} else if (long_ctr == 1) {
     c18:	f1ba 0f01 	cmp.w	sl, #1
     c1c:	d0e9      	beq.n	bf2 <_vprintk+0x10a>
					long long lld = va_arg(ap, long long);
     c1e:	3407      	adds	r4, #7
     c20:	f024 0307 	bic.w	r3, r4, #7
     c24:	f103 0408 	add.w	r4, r3, #8
     c28:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > INT32_MAX ||
     c2c:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
     c30:	f143 0100 	adc.w	r1, r3, #0
     c34:	f04f 0c00 	mov.w	ip, #0
     c38:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     c3c:	458c      	cmp	ip, r1
     c3e:	bf08      	it	eq
     c40:	4583      	cmpeq	fp, r0
     c42:	d205      	bcs.n	c50 <_vprintk+0x168>
						print_err(out, ctx);
     c44:	4639      	mov	r1, r7
     c46:	4630      	mov	r0, r6
     c48:	f7ff fecb 	bl	9e2 <print_err>
			might_format = 0;
     c4c:	2500      	movs	r5, #0
				break;
     c4e:	e764      	b.n	b1a <_vprintk+0x32>
					d = (s32_t)lld;
     c50:	4615      	mov	r5, r2
     c52:	e7d0      	b.n	bf6 <_vprintk+0x10e>
				if (long_ctr == 0) {
     c54:	f1ba 0f00 	cmp.w	sl, #0
     c58:	d105      	bne.n	c66 <_vprintk+0x17e>
					long lu = va_arg(ap, unsigned long);
     c5a:	6822      	ldr	r2, [r4, #0]
     c5c:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     c5e:	f8cd 9000 	str.w	r9, [sp]
     c62:	4643      	mov	r3, r8
     c64:	e7d3      	b.n	c0e <_vprintk+0x126>
				} else if (long_ctr == 1) {
     c66:	f1ba 0f01 	cmp.w	sl, #1
     c6a:	d0f6      	beq.n	c5a <_vprintk+0x172>
					unsigned long long llu =
     c6c:	3407      	adds	r4, #7
     c6e:	f024 0307 	bic.w	r3, r4, #7
     c72:	f103 0408 	add.w	r4, r3, #8
     c76:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > INT32_MAX) {
     c7a:	2b00      	cmp	r3, #0
     c7c:	bf08      	it	eq
     c7e:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
     c82:	d3ec      	bcc.n	c5e <_vprintk+0x176>
     c84:	e7de      	b.n	c44 <_vprintk+0x15c>
				  out('0', ctx);
     c86:	4639      	mov	r1, r7
     c88:	2030      	movs	r0, #48	; 0x30
     c8a:	47b0      	blx	r6
				  out('x', ctx);
     c8c:	4639      	mov	r1, r7
     c8e:	2078      	movs	r0, #120	; 0x78
     c90:	47b0      	blx	r6
				  min_width = 8;
     c92:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     c96:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     c9a:	f1ba 0f01 	cmp.w	sl, #1
     c9e:	dc1d      	bgt.n	cdc <_vprintk+0x1f4>
					x = va_arg(ap, unsigned long);
     ca0:	6823      	ldr	r3, [r4, #0]
     ca2:	9306      	str	r3, [sp, #24]
     ca4:	2300      	movs	r3, #0
     ca6:	9307      	str	r3, [sp, #28]
     ca8:	3404      	adds	r4, #4
	int digits = 0;
     caa:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
     cac:	2310      	movs	r3, #16
	int digits = 0;
     cae:	9202      	str	r2, [sp, #8]
	int found_largest_digit = 0;
     cb0:	9205      	str	r2, [sp, #20]
	int size = sizeof(num) * 2;
     cb2:	469b      	mov	fp, r3
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     cb4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     cb8:	ea4f 028b 	mov.w	r2, fp, lsl #2
     cbc:	9806      	ldr	r0, [sp, #24]
     cbe:	9907      	ldr	r1, [sp, #28]
     cc0:	9304      	str	r3, [sp, #16]
     cc2:	f7ff fa1d 	bl	100 <__aeabi_llsr>
		if (nibble || found_largest_digit || size == 1) {
     cc6:	f010 000f 	ands.w	r0, r0, #15
     cca:	9b04      	ldr	r3, [sp, #16]
     ccc:	d112      	bne.n	cf4 <_vprintk+0x20c>
     cce:	9a05      	ldr	r2, [sp, #20]
     cd0:	b912      	cbnz	r2, cd8 <_vprintk+0x1f0>
     cd2:	f1bb 0f00 	cmp.w	fp, #0
     cd6:	d129      	bne.n	d2c <_vprintk+0x244>
			nibble += nibble > 9 ? 87 : 48;
     cd8:	2230      	movs	r2, #48	; 0x30
     cda:	e00f      	b.n	cfc <_vprintk+0x214>
					x = va_arg(ap, unsigned long long);
     cdc:	3407      	adds	r4, #7
     cde:	f024 0307 	bic.w	r3, r4, #7
     ce2:	f103 0408 	add.w	r4, r3, #8
     ce6:	681a      	ldr	r2, [r3, #0]
     ce8:	685b      	ldr	r3, [r3, #4]
     cea:	9206      	str	r2, [sp, #24]
     cec:	9307      	str	r3, [sp, #28]
     cee:	e7dc      	b.n	caa <_vprintk+0x1c2>
	for (; size; size--) {
     cf0:	9b04      	ldr	r3, [sp, #16]
     cf2:	e7df      	b.n	cb4 <_vprintk+0x1cc>
			nibble += nibble > 9 ? 87 : 48;
     cf4:	2809      	cmp	r0, #9
     cf6:	bf8c      	ite	hi
     cf8:	2257      	movhi	r2, #87	; 0x57
     cfa:	2230      	movls	r2, #48	; 0x30
			out((int)nibble, ctx);
     cfc:	4639      	mov	r1, r7
     cfe:	4410      	add	r0, r2
     d00:	9304      	str	r3, [sp, #16]
     d02:	47b0      	blx	r6
			digits++;
     d04:	9b02      	ldr	r3, [sp, #8]
			found_largest_digit = 1;
     d06:	9505      	str	r5, [sp, #20]
			digits++;
     d08:	3301      	adds	r3, #1
     d0a:	9302      	str	r3, [sp, #8]
	for (; size; size--) {
     d0c:	f1bb 0f00 	cmp.w	fp, #0
     d10:	d1ee      	bne.n	cf0 <_vprintk+0x208>
	if (padding == PAD_SPACE_AFTER) {
     d12:	f1b8 0f03 	cmp.w	r8, #3
     d16:	d199      	bne.n	c4c <_vprintk+0x164>
		remaining = min_width * 2 - digits;
     d18:	9b02      	ldr	r3, [sp, #8]
     d1a:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     d1e:	2d00      	cmp	r5, #0
     d20:	dd94      	ble.n	c4c <_vprintk+0x164>
			out(' ', ctx);
     d22:	4639      	mov	r1, r7
     d24:	2020      	movs	r0, #32
     d26:	47b0      	blx	r6
     d28:	3d01      	subs	r5, #1
     d2a:	e7f8      	b.n	d1e <_vprintk+0x236>
		if (remaining-- <= min_width) {
     d2c:	1e5a      	subs	r2, r3, #1
     d2e:	4599      	cmp	r9, r3
     d30:	9204      	str	r2, [sp, #16]
     d32:	dbeb      	blt.n	d0c <_vprintk+0x224>
			if (padding == PAD_ZERO_BEFORE) {
     d34:	f1b8 0f01 	cmp.w	r8, #1
     d38:	d103      	bne.n	d42 <_vprintk+0x25a>
				out('0', ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     d3e:	47b0      	blx	r6
     d40:	e7e4      	b.n	d0c <_vprintk+0x224>
			} else if (padding == PAD_SPACE_BEFORE) {
     d42:	f1b8 0f02 	cmp.w	r8, #2
     d46:	d1e1      	bne.n	d0c <_vprintk+0x224>
				out(' ', ctx);
     d48:	4639      	mov	r1, r7
     d4a:	2020      	movs	r0, #32
     d4c:	e7f7      	b.n	d3e <_vprintk+0x256>
					out((int)(*s++), ctx);
     d4e:	4639      	mov	r1, r7
     d50:	47b0      	blx	r6
     d52:	4623      	mov	r3, r4
     d54:	e716      	b.n	b84 <_vprintk+0x9c>
						out(' ', ctx);
     d56:	4639      	mov	r1, r7
     d58:	2020      	movs	r0, #32
     d5a:	47b0      	blx	r6
     d5c:	3c01      	subs	r4, #1
     d5e:	e71e      	b.n	b9e <_vprintk+0xb6>
				out(c, ctx);
     d60:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     d62:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     d64:	4639      	mov	r1, r7
     d66:	47b0      	blx	r6
				int c = va_arg(ap, int);
     d68:	462c      	mov	r4, r5
     d6a:	e76f      	b.n	c4c <_vprintk+0x164>
				long_ctr = 0;
     d6c:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     d6e:	46a8      	mov	r8, r5
				min_width = -1;
     d70:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     d74:	2501      	movs	r5, #1
     d76:	e6d0      	b.n	b1a <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     d78:	f04f 0801 	mov.w	r8, #1
     d7c:	e6cd      	b.n	b1a <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     d7e:	465c      	mov	r4, fp
			might_format = 0;
     d80:	4605      	mov	r5, r0
     d82:	e6ca      	b.n	b1a <_vprintk+0x32>

00000d84 <vprintk>:
{
     d84:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     d86:	ac02      	add	r4, sp, #8
     d88:	2300      	movs	r3, #0
     d8a:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     d8e:	4602      	mov	r2, r0
     d90:	460b      	mov	r3, r1
     d92:	4803      	ldr	r0, [pc, #12]	; (da0 <vprintk+0x1c>)
     d94:	4621      	mov	r1, r4
     d96:	f7ff fea7 	bl	ae8 <_vprintk>
}
     d9a:	b002      	add	sp, #8
     d9c:	bd10      	pop	{r4, pc}
     d9e:	bf00      	nop
     da0:	00000a01 	.word	0x00000a01

00000da4 <printk>:
{
     da4:	b40f      	push	{r0, r1, r2, r3}
     da6:	b507      	push	{r0, r1, r2, lr}
     da8:	a904      	add	r1, sp, #16
     daa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     dae:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
     db0:	f7ff ffe8 	bl	d84 <vprintk>
}
     db4:	b003      	add	sp, #12
     db6:	f85d eb04 	ldr.w	lr, [sp], #4
     dba:	b004      	add	sp, #16
     dbc:	4770      	bx	lr
	...

00000dc0 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     dc0:	b40c      	push	{r2, r3}
     dc2:	b530      	push	{r4, r5, lr}
     dc4:	b085      	sub	sp, #20
     dc6:	ab08      	add	r3, sp, #32
     dc8:	4604      	mov	r4, r0
     dca:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     dce:	9001      	str	r0, [sp, #4]
     dd0:	9102      	str	r1, [sp, #8]
     dd2:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     dd4:	a901      	add	r1, sp, #4
     dd6:	4807      	ldr	r0, [pc, #28]	; (df4 <snprintk+0x34>)
	va_start(ap, fmt);
     dd8:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     dda:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     ddc:	f7ff fe84 	bl	ae8 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     de0:	9803      	ldr	r0, [sp, #12]
     de2:	9b02      	ldr	r3, [sp, #8]
     de4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     de6:	bfb8      	it	lt
     de8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     dea:	b005      	add	sp, #20
     dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     df0:	b002      	add	sp, #8
     df2:	4770      	bx	lr
     df4:	00000ab1 	.word	0x00000ab1

00000df8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_COMPILER_OPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_KERNEL_BIN_NAME, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
     df8:	4770      	bx	lr
	...

00000dfc <nordicsemi_nrf52_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf52_init(struct device *arg)
{
     dfc:	b510      	push	{r4, lr}
	__asm__ volatile(
     dfe:	f04f 0320 	mov.w	r3, #32
     e02:	f3ef 8411 	mrs	r4, BASEPRI
     e06:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     e0a:	f000 f825 	bl	e58 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     e0e:	4a08      	ldr	r2, [pc, #32]	; (e30 <nordicsemi_nrf52_init+0x34>)
     e10:	2301      	movs	r3, #1
     e12:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     e16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     e1a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     e1e:	4b05      	ldr	r3, [pc, #20]	; (e34 <nordicsemi_nrf52_init+0x38>)
     e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e24:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     e26:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     e28:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     e2c:	2000      	movs	r0, #0
     e2e:	bd10      	pop	{r4, pc}
     e30:	4001e000 	.word	0x4001e000
     e34:	e000ed00 	.word	0xe000ed00

00000e38 <errata_103>:
}


static bool errata_120(void)
{
    if (*(uint32_t *)0x10000130ul == 0x8ul){
     e38:	4b05      	ldr	r3, [pc, #20]	; (e50 <errata_103+0x18>)
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	2b08      	cmp	r3, #8
        if (*(uint32_t *)0x10000134ul == 0x0ul){
     e3e:	bf01      	itttt	eq
     e40:	4b04      	ldreq	r3, [pc, #16]	; (e54 <errata_103+0x1c>)
     e42:	6818      	ldreq	r0, [r3, #0]
     e44:	fab0 f080 	clzeq	r0, r0
     e48:	0940      	lsreq	r0, r0, #5
            return true;
        }
    }
    
    return false;
     e4a:	bf18      	it	ne
     e4c:	2000      	movne	r0, #0
}
     e4e:	4770      	bx	lr
     e50:	10000130 	.word	0x10000130
     e54:	10000134 	.word	0x10000134

00000e58 <SystemInit>:
{
     e58:	b508      	push	{r3, lr}
        NRF_CLOCK->EVENTS_DONE = 0;
     e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     e5e:	2200      	movs	r2, #0
     e60:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     e64:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     e68:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     e70:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
     e74:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     e78:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     e7c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     e80:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     e84:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     e88:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     e8c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     e90:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     e94:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     e98:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     e9c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     ea0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     ea4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     ea8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     eac:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     eb0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     eb4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     eb8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     ebc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     ec0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     ec4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     ec8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     ecc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     ed0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     ed4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     ed8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     edc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     ee0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     ee4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     ee8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     eec:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     ef0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     ef4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     ef8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_98()){
     efc:	f7ff ff9c 	bl	e38 <errata_103>
     f00:	b110      	cbz	r0, f08 <SystemInit+0xb0>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
     f02:	4b33      	ldr	r3, [pc, #204]	; (fd0 <SystemInit+0x178>)
     f04:	4a33      	ldr	r2, [pc, #204]	; (fd4 <SystemInit+0x17c>)
     f06:	601a      	str	r2, [r3, #0]
    if (errata_103()){
     f08:	f7ff ff96 	bl	e38 <errata_103>
     f0c:	b118      	cbz	r0, f16 <SystemInit+0xbe>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
     f0e:	4b32      	ldr	r3, [pc, #200]	; (fd8 <SystemInit+0x180>)
     f10:	22fb      	movs	r2, #251	; 0xfb
     f12:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    if (errata_115()){
     f16:	f7ff ff8f 	bl	e38 <errata_103>
     f1a:	b148      	cbz	r0, f30 <SystemInit+0xd8>
        *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
     f1c:	492f      	ldr	r1, [pc, #188]	; (fdc <SystemInit+0x184>)
     f1e:	4b30      	ldr	r3, [pc, #192]	; (fe0 <SystemInit+0x188>)
     f20:	680a      	ldr	r2, [r1, #0]
     f22:	681b      	ldr	r3, [r3, #0]
     f24:	f022 020f 	bic.w	r2, r2, #15
     f28:	f003 030f 	and.w	r3, r3, #15
     f2c:	4313      	orrs	r3, r2
     f2e:	600b      	str	r3, [r1, #0]
    if (errata_120()){
     f30:	f7ff ff82 	bl	e38 <errata_103>
     f34:	b118      	cbz	r0, f3e <SystemInit+0xe6>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
     f36:	4b2b      	ldr	r3, [pc, #172]	; (fe4 <SystemInit+0x18c>)
     f38:	f44f 7200 	mov.w	r2, #512	; 0x200
     f3c:	601a      	str	r2, [r3, #0]
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
     f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     f42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     f46:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
     f48:	bf44      	itt	mi
     f4a:	f06f 0201 	mvnmi.w	r2, #1
     f4e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     f52:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     f56:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     f5a:	2a00      	cmp	r2, #0
     f5c:	db03      	blt.n	f66 <SystemInit+0x10e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
     f5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     f62:	2b00      	cmp	r3, #0
     f64:	da2f      	bge.n	fc6 <SystemInit+0x16e>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     f66:	4b20      	ldr	r3, [pc, #128]	; (fe8 <SystemInit+0x190>)
     f68:	2201      	movs	r2, #1
     f6a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     f6e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     f72:	2a00      	cmp	r2, #0
     f74:	d0fb      	beq.n	f6e <SystemInit+0x116>
            NRF_UICR->PSELRESET[0] = 18;
     f76:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     f7a:	2112      	movs	r1, #18
     f7c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     f80:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     f84:	2a00      	cmp	r2, #0
     f86:	d0fb      	beq.n	f80 <SystemInit+0x128>
            NRF_UICR->PSELRESET[1] = 18;
     f88:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     f8c:	2212      	movs	r2, #18
     f8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     f92:	4b15      	ldr	r3, [pc, #84]	; (fe8 <SystemInit+0x190>)
     f94:	461a      	mov	r2, r3
     f96:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     f9a:	2900      	cmp	r1, #0
     f9c:	d0fb      	beq.n	f96 <SystemInit+0x13e>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     f9e:	2100      	movs	r1, #0
     fa0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     fa4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     fa8:	2b00      	cmp	r3, #0
     faa:	d0fb      	beq.n	fa4 <SystemInit+0x14c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     fac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     fb0:	490e      	ldr	r1, [pc, #56]	; (fec <SystemInit+0x194>)
     fb2:	4b0f      	ldr	r3, [pc, #60]	; (ff0 <SystemInit+0x198>)
     fb4:	68ca      	ldr	r2, [r1, #12]
     fb6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     fba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     fbc:	60cb      	str	r3, [r1, #12]
     fbe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     fc2:	bf00      	nop
     fc4:	e7fd      	b.n	fc2 <SystemInit+0x16a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     fc6:	4b0b      	ldr	r3, [pc, #44]	; (ff4 <SystemInit+0x19c>)
     fc8:	4a0b      	ldr	r2, [pc, #44]	; (ff8 <SystemInit+0x1a0>)
     fca:	601a      	str	r2, [r3, #0]
     fcc:	bd08      	pop	{r3, pc}
     fce:	bf00      	nop
     fd0:	4000568c 	.word	0x4000568c
     fd4:	00038148 	.word	0x00038148
     fd8:	4000f000 	.word	0x4000f000
     fdc:	40000ee4 	.word	0x40000ee4
     fe0:	10000258 	.word	0x10000258
     fe4:	40029640 	.word	0x40029640
     fe8:	4001e000 	.word	0x4001e000
     fec:	e000ed00 	.word	0xe000ed00
     ff0:	05fa0004 	.word	0x05fa0004
     ff4:	200027bc 	.word	0x200027bc
     ff8:	03d09000 	.word	0x03d09000

00000ffc <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
     ffc:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
     ffe:	4c04      	ldr	r4, [pc, #16]	; (1010 <__do_init_array_aux+0x14>)
    1000:	4d04      	ldr	r5, [pc, #16]	; (1014 <__do_init_array_aux+0x18>)
    1002:	42ac      	cmp	r4, r5
    1004:	d300      	bcc.n	1008 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    1006:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    1008:	f854 3b04 	ldr.w	r3, [r4], #4
    100c:	4798      	blx	r3
    100e:	e7f8      	b.n	1002 <__do_init_array_aux+0x6>
    1010:	00008458 	.word	0x00008458
    1014:	00008458 	.word	0x00008458

00001018 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    1018:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned int)__CTOR_LIST__[0];
    101a:	4c06      	ldr	r4, [pc, #24]	; (1034 <__do_global_ctors_aux+0x1c>)
    101c:	6825      	ldr	r5, [r4, #0]
    101e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    1022:	3404      	adds	r4, #4

	while (nCtors >= 1) {
    1024:	b905      	cbnz	r5, 1028 <__do_global_ctors_aux+0x10>
		__CTOR_LIST__[nCtors--]();
	}
}
    1026:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    1028:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    102c:	3d01      	subs	r5, #1
    102e:	4798      	blx	r3
    1030:	e7f8      	b.n	1024 <__do_global_ctors_aux+0xc>
    1032:	bf00      	nop
    1034:	00008450 	.word	0x00008450

00001038 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    1038:	b513      	push	{r0, r1, r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    103a:	4c11      	ldr	r4, [pc, #68]	; (1080 <sys_rand32_get+0x48>)
    103c:	f3bf 8f5b 	dmb	ish
    1040:	6820      	ldr	r0, [r4, #0]
    1042:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    1046:	b960      	cbnz	r0, 1062 <sys_rand32_get+0x2a>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
    1048:	480e      	ldr	r0, [pc, #56]	; (1084 <sys_rand32_get+0x4c>)
    104a:	f006 f83b 	bl	70c4 <_impl_device_get_binding>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    104e:	f3bf 8f5b 	dmb	ish
    1052:	e854 3f00 	ldrex	r3, [r4]
    1056:	e844 0200 	strex	r2, r0, [r4]
    105a:	2a00      	cmp	r2, #0
    105c:	d1f9      	bne.n	1052 <sys_rand32_get+0x1a>
    105e:	f3bf 8f5b 	dmb	ish
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1062:	6843      	ldr	r3, [r0, #4]
    1064:	2204      	movs	r2, #4
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	eb0d 0102 	add.w	r1, sp, r2
    106c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    106e:	2800      	cmp	r0, #0
    1070:	da02      	bge.n	1078 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1072:	f000 fa55 	bl	1520 <_timer_cycle_get_32>
    1076:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1078:	9801      	ldr	r0, [sp, #4]
    107a:	b002      	add	sp, #8
    107c:	bd10      	pop	{r4, pc}
    107e:	bf00      	nop
    1080:	2000001c 	.word	0x2000001c
    1084:	00008557 	.word	0x00008557

00001088 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1088:	280a      	cmp	r0, #10
{
    108a:	b538      	push	{r3, r4, r5, lr}
    108c:	4604      	mov	r4, r0
    108e:	4d07      	ldr	r5, [pc, #28]	; (10ac <console_out+0x24>)
	if ('\n' == c) {
    1090:	d104      	bne.n	109c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1092:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    1094:	6843      	ldr	r3, [r0, #4]
    1096:	210d      	movs	r1, #13
    1098:	685b      	ldr	r3, [r3, #4]
    109a:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    109c:	6828      	ldr	r0, [r5, #0]
    109e:	6843      	ldr	r3, [r0, #4]
    10a0:	b2e1      	uxtb	r1, r4
    10a2:	685b      	ldr	r3, [r3, #4]
    10a4:	4798      	blx	r3

	return c;
}
    10a6:	4620      	mov	r0, r4
    10a8:	bd38      	pop	{r3, r4, r5, pc}
    10aa:	bf00      	nop
    10ac:	20000020 	.word	0x20000020

000010b0 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    10b0:	4801      	ldr	r0, [pc, #4]	; (10b8 <uart_console_hook_install+0x8>)
    10b2:	f7ff bd13 	b.w	adc <__printk_hook_install>
    10b6:	bf00      	nop
    10b8:	00001089 	.word	0x00001089

000010bc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    10bc:	b508      	push	{r3, lr}
    10be:	4804      	ldr	r0, [pc, #16]	; (10d0 <uart_console_init+0x14>)
    10c0:	f006 f800 	bl	70c4 <_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    10c4:	4b03      	ldr	r3, [pc, #12]	; (10d4 <uart_console_init+0x18>)
    10c6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    10c8:	f7ff fff2 	bl	10b0 <uart_console_hook_install>

	return 0;
}
    10cc:	2000      	movs	r0, #0
    10ce:	bd08      	pop	{r3, pc}
    10d0:	00008561 	.word	0x00008561
    10d4:	20000020 	.word	0x20000020

000010d8 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    10d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    10da:	f04f 0320 	mov.w	r3, #32
    10de:	f3ef 8211 	mrs	r2, BASEPRI
    10e2:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    10e6:	4c11      	ldr	r4, [pc, #68]	; (112c <_m16src_stop+0x54>)
    10e8:	7823      	ldrb	r3, [r4, #0]
    10ea:	b923      	cbnz	r3, 10f6 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10ec:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10f0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10f4:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10f6:	3b01      	subs	r3, #1
    10f8:	b2db      	uxtb	r3, r3
    10fa:	7023      	strb	r3, [r4, #0]
    10fc:	b123      	cbz	r3, 1108 <_m16src_stop+0x30>
    10fe:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    1102:	f06f 000f 	mvn.w	r0, #15
    1106:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    1108:	4b09      	ldr	r3, [pc, #36]	; (1130 <_m16src_stop+0x58>)
    110a:	7818      	ldrb	r0, [r3, #0]
    110c:	2101      	movs	r1, #1
    110e:	b128      	cbz	r0, 111c <_m16src_stop+0x44>
		m16src_ref++;
    1110:	7021      	strb	r1, [r4, #0]
    1112:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    1116:	f06f 000a 	mvn.w	r0, #10
    111a:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1U;
    111c:	7019      	strb	r1, [r3, #0]
    111e:	f382 8811 	msr	BASEPRI, r2
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1122:	4a04      	ldr	r2, [pc, #16]	; (1134 <_m16src_stop+0x5c>)
    1124:	6011      	str	r1, [r2, #0]
	/* re-entrancy and mult-context safe, and reference count is zero, */

	nrf_clock_task_trigger(NRF_CLOCK_TASK_HFCLKSTOP);

	/* release resource guard */
	m16src_grd = 0U;
    1126:	7018      	strb	r0, [r3, #0]

	return 0;
}
    1128:	bd10      	pop	{r4, pc}
    112a:	bf00      	nop
    112c:	20000026 	.word	0x20000026
    1130:	20000025 	.word	0x20000025
    1134:	40000004 	.word	0x40000004

00001138 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    1138:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
    113a:	2200      	movs	r2, #0
    113c:	4610      	mov	r0, r2
    113e:	2101      	movs	r1, #1
    1140:	f000 fbdc 	bl	18fc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    1144:	2000      	movs	r0, #0
    1146:	f000 fba7 	bl	1898 <_arch_irq_enable>

	return 0;
}
    114a:	2000      	movs	r0, #0
    114c:	bd08      	pop	{r3, pc}
	...

00001150 <_m16src_start>:
{
    1150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1152:	f04f 0220 	mov.w	r2, #32
    1156:	f3ef 8311 	mrs	r3, BASEPRI
    115a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    115e:	4a26      	ldr	r2, [pc, #152]	; (11f8 <_m16src_start+0xa8>)
    1160:	7810      	ldrb	r0, [r2, #0]
    1162:	1c44      	adds	r4, r0, #1
    1164:	7014      	strb	r4, [r2, #0]
    1166:	b170      	cbz	r0, 1186 <_m16src_start+0x36>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1168:	f383 8811 	msr	BASEPRI, r3
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    116c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1170:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    1174:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    1178:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    117c:	bf0c      	ite	eq
    117e:	2000      	moveq	r0, #0
    1180:	f06f 0043 	mvnne.w	r0, #67	; 0x43
}
    1184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    1186:	4d1d      	ldr	r5, [pc, #116]	; (11fc <_m16src_start+0xac>)
    1188:	782f      	ldrb	r7, [r5, #0]
    118a:	b12f      	cbz	r7, 1198 <_m16src_start+0x48>
		m16src_ref--;
    118c:	7010      	strb	r0, [r2, #0]
    118e:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1192:	f06f 000a 	mvn.w	r0, #10
    1196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    1198:	2601      	movs	r6, #1
    119a:	702e      	strb	r6, [r5, #0]
    119c:	f383 8811 	msr	BASEPRI, r3
    11a0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    11a4:	b319      	cbz	r1, 11ee <_m16src_start+0x9e>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    11a6:	4638      	mov	r0, r7
    11a8:	f000 fb86 	bl	18b8 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11ac:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    11b0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    11b4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    11b8:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    11ba:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    11be:	b192      	cbz	r2, 11e6 <_m16src_start+0x96>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11c0:	2200      	movs	r2, #0
    11c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11c6:	4a0e      	ldr	r2, [pc, #56]	; (1200 <_m16src_start+0xb0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    11c8:	f013 0f01 	tst.w	r3, #1
    11cc:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    11d0:	bf08      	it	eq
    11d2:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    11d6:	2000      	movs	r0, #0
    11d8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    11dc:	f000 fb5c 	bl	1898 <_arch_irq_enable>
	m16src_grd = 0U;
    11e0:	2300      	movs	r3, #0
    11e2:	702b      	strb	r3, [r5, #0]
    11e4:	e7c2      	b.n	116c <_m16src_start+0x1c>
			__WFE();
    11e6:	bf20      	wfe
			__SEV();
    11e8:	bf40      	sev
			__WFE();
    11ea:	bf20      	wfe
    11ec:	e7e5      	b.n	11ba <_m16src_start+0x6a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    11f2:	6026      	str	r6, [r4, #0]
    11f4:	e7f4      	b.n	11e0 <_m16src_start+0x90>
    11f6:	bf00      	nop
    11f8:	20000026 	.word	0x20000026
    11fc:	20000025 	.word	0x20000025
    1200:	e000e100 	.word	0xe000e100

00001204 <_power_clock_isr>:
{
    1204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    120a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    120c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	hf_intenset = ((NRF_CLOCK->INTENSET &
    1210:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1214:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf_intenset = ((NRF_CLOCK->INTENSET &
    1218:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    121c:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1220:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1224:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    1228:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    122a:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    122e:	bf18      	it	ne
    1230:	2401      	movne	r4, #1
	if (pof) {
    1232:	f1be 0f00 	cmp.w	lr, #0
    1236:	d003      	beq.n	1240 <_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    1238:	f04f 0e00 	mov.w	lr, #0
    123c:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    1240:	2f00      	cmp	r7, #0
    1242:	d041      	beq.n	12c8 <_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1248:	2700      	movs	r7, #0
    124a:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    124e:	b152      	cbz	r2, 1266 <_power_clock_isr+0x62>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1254:	4f23      	ldr	r7, [pc, #140]	; (12e4 <_power_clock_isr+0xe0>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1256:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1258:	f04f 0e02 	mov.w	lr, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    125c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1260:	f8c7 e000 	str.w	lr, [r7]
		NRF_CLOCK->TASKS_CAL = 1;
    1264:	611a      	str	r2, [r3, #16]
	if (lf) {
    1266:	b9ee      	cbnz	r6, 12a4 <_power_clock_isr+0xa0>
	if (done) {
    1268:	b159      	cbz	r1, 1282 <_power_clock_isr+0x7e>
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    126a:	4b1e      	ldr	r3, [pc, #120]	; (12e4 <_power_clock_isr+0xe0>)
		NRF_CLOCK->EVENTS_DONE = 0;
    126c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    1270:	2100      	movs	r1, #0
    1272:	6019      	str	r1, [r3, #0]
		err = _m16src_stop(dev, NULL);
    1274:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    1276:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    127a:	f7ff ff2d 	bl	10d8 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    127e:	2301      	movs	r3, #1
    1280:	6173      	str	r3, [r6, #20]
	if (ctto) {
    1282:	b36c      	cbz	r4, 12e0 <_power_clock_isr+0xdc>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1288:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    128a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    128c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1290:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1292:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1296:	f7ff ff5b 	bl	1150 <_m16src_start>
		if (!err) {
    129a:	bb08      	cbnz	r0, 12e0 <_power_clock_isr+0xdc>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    129c:	4b12      	ldr	r3, [pc, #72]	; (12e8 <_power_clock_isr+0xe4>)
    129e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    12a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12a8:	2200      	movs	r2, #0
    12aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    12ae:	0782      	lsls	r2, r0, #30
    12b0:	d5da      	bpl.n	1268 <_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    12b2:	2202      	movs	r2, #2
    12b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    12b8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    12bc:	079b      	lsls	r3, r3, #30
    12be:	d1d3      	bne.n	1268 <_power_clock_isr+0x64>
	if (done) {
    12c0:	2900      	cmp	r1, #0
    12c2:	d0df      	beq.n	1284 <_power_clock_isr+0x80>
				ctto = 1U;
    12c4:	2401      	movs	r4, #1
    12c6:	e7d0      	b.n	126a <_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    12c8:	2a00      	cmp	r2, #0
    12ca:	d0cc      	beq.n	1266 <_power_clock_isr+0x62>
    12cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    12d4:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    12d8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    12dc:	d1c3      	bne.n	1266 <_power_clock_isr+0x62>
    12de:	e7b7      	b.n	1250 <_power_clock_isr+0x4c>
    12e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12e2:	bf00      	nop
    12e4:	40000c34 	.word	0x40000c34
    12e8:	e000e100 	.word	0xe000e100

000012ec <_k32src_start>:
{
    12ec:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    12ee:	f04f 0220 	mov.w	r2, #32
    12f2:	f3ef 8311 	mrs	r3, BASEPRI
    12f6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    12fa:	4d22      	ldr	r5, [pc, #136]	; (1384 <_k32src_start+0x98>)
    12fc:	782a      	ldrb	r2, [r5, #0]
    12fe:	b18a      	cbz	r2, 1324 <_k32src_start+0x38>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1300:	f383 8811 	msr	BASEPRI, r3
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    1304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1308:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    130c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    1310:	f003 0303 	and.w	r3, r3, #3
    1314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    1318:	4393      	bics	r3, r2
}
    131a:	bf14      	ite	ne
    131c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    1320:	2000      	moveq	r0, #0
    1322:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    1324:	2401      	movs	r4, #1
    1326:	702c      	strb	r4, [r5, #0]
    1328:	f383 8811 	msr	BASEPRI, r3
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    132c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1330:	4e15      	ldr	r6, [pc, #84]	; (1388 <_k32src_start+0x9c>)
    1332:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    1336:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1338:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    133c:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1340:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1344:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    1346:	f04f 0618 	mov.w	r6, #24
    134a:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    134e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1352:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1356:	d1d5      	bne.n	1304 <_k32src_start+0x18>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1358:	2210      	movs	r2, #16
    135a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    135e:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    1362:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    1366:	03d2      	lsls	r2, r2, #15
    1368:	d402      	bmi.n	1370 <_k32src_start+0x84>
    136a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    136e:	e7c9      	b.n	1304 <_k32src_start+0x18>
    1370:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1374:	f7ff feec 	bl	1150 <_m16src_start>
		if (!err) {
    1378:	2800      	cmp	r0, #0
    137a:	d1c3      	bne.n	1304 <_k32src_start+0x18>
    137c:	4b03      	ldr	r3, [pc, #12]	; (138c <_k32src_start+0xa0>)
    137e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1382:	e7bf      	b.n	1304 <_k32src_start+0x18>
    1384:	20000024 	.word	0x20000024
    1388:	40000008 	.word	0x40000008
    138c:	e000e100 	.word	0xe000e100

00001390 <z_clock_idle_exit>:
    1390:	4770      	bx	lr
	...

00001394 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    1394:	4b0e      	ldr	r3, [pc, #56]	; (13d0 <rtc1_nrf_isr+0x3c>)
    1396:	2200      	movs	r2, #0
{
    1398:	b410      	push	{r4}
	RTC->EVENTS_COMPARE[0] = 0;
    139a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    139e:	f04f 0220 	mov.w	r2, #32
    13a2:	f3ef 8411 	mrs	r4, BASEPRI
    13a6:	f382 8811 	msr	BASEPRI, r2

	u32_t key = irq_lock();
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    13aa:	4a0a      	ldr	r2, [pc, #40]	; (13d4 <rtc1_nrf_isr+0x40>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    13ac:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    13b0:	6811      	ldr	r1, [r2, #0]
    13b2:	f240 1347 	movw	r3, #327	; 0x147
	return (a - b) & COUNTER_MAX;
    13b6:	1a40      	subs	r0, r0, r1
    13b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    13bc:	fbb0 f0f3 	udiv	r0, r0, r3

	last_count += dticks * CYC_PER_TICK;
    13c0:	fb03 1300 	mla	r3, r3, r0, r1
    13c4:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    13c6:	f384 8811 	msr	BASEPRI, r4
		set_comparator(next);
	}

	irq_unlock(key);
	z_clock_announce(dticks);
}
    13ca:	bc10      	pop	{r4}
	z_clock_announce(dticks);
    13cc:	f006 bdd8 	b.w	7f80 <z_clock_announce>
    13d0:	40011000 	.word	0x40011000
    13d4:	20000028 	.word	0x20000028

000013d8 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    13d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    13da:	481e      	ldr	r0, [pc, #120]	; (1454 <z_clock_driver_init+0x7c>)
    13dc:	f005 fe72 	bl	70c4 <_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF_K32SRC_DRV_NAME);
	if (!clock) {
    13e0:	2800      	cmp	r0, #0
    13e2:	d033      	beq.n	144c <z_clock_driver_init+0x74>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    13e4:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    13e6:	4d1c      	ldr	r5, [pc, #112]	; (1458 <z_clock_driver_init+0x80>)
    13e8:	681b      	ldr	r3, [r3, #0]
    13ea:	2101      	movs	r1, #1
    13ec:	4798      	blx	r3
    13ee:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    13f0:	f240 1347 	movw	r3, #327	; 0x147
    p_reg->PRESCALER = val;
    13f4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    13f8:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    13fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1400:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
    1404:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    140c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1410:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1414:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	9301      	str	r3, [sp, #4]
    (void)dummy;
    141a:	9b01      	ldr	r3, [sp, #4]
    141c:	4b0f      	ldr	r3, [pc, #60]	; (145c <z_clock_driver_init+0x84>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    141e:	2101      	movs	r1, #1
    1420:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1424:	2011      	movs	r0, #17
    1426:	4622      	mov	r2, r4
    1428:	f000 fa68 	bl	18fc <_irq_priority_set>
	irq_enable(RTC1_IRQn);
    142c:	2011      	movs	r0, #17
    142e:	f000 fa33 	bl	1898 <_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1432:	4a0b      	ldr	r2, [pc, #44]	; (1460 <z_clock_driver_init+0x88>)
    1434:	2301      	movs	r3, #1
    1436:	6013      	str	r3, [r2, #0]
    1438:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
    143a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    143e:	f203 1347 	addw	r3, r3, #327	; 0x147
    p_reg->CC[ch] = cc_val;
    1442:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    1446:	4620      	mov	r0, r4
}
    1448:	b003      	add	sp, #12
    144a:	bd30      	pop	{r4, r5, pc}
		return -1;
    144c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1450:	e7fa      	b.n	1448 <z_clock_driver_init+0x70>
    1452:	bf00      	nop
    1454:	00008580 	.word	0x00008580
    1458:	40011000 	.word	0x40011000
    145c:	e000e100 	.word	0xe000e100
    1460:	40011008 	.word	0x40011008

00001464 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1464:	f64c 036a 	movw	r3, #51306	; 0xc86a
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1468:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    146c:	bf08      	it	eq
    146e:	4618      	moveq	r0, r3
	ticks = max(min(ticks - 1, (s32_t)MAX_TICKS), 0);
    1470:	3801      	subs	r0, #1
    1472:	4298      	cmp	r0, r3
    1474:	bfa8      	it	ge
    1476:	4618      	movge	r0, r3
	 * Get the requested delay in tick-aligned cycles.  Increase
	 * by one tick to round up so we don't timeout early due to
	 * cycles elapsed since the last tick.  Cap at the maximum
	 * tick-aligned delta.
	 */
	u32_t cyc = min((1 + ticks) * CYC_PER_TICK, MAX_DELAY);
    1478:	f240 1247 	movw	r2, #327	; 0x147
    147c:	4b18      	ldr	r3, [pc, #96]	; (14e0 <z_clock_set_timeout+0x7c>)
    147e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1482:	fb00 2002 	mla	r0, r0, r2, r2
    1486:	4298      	cmp	r0, r3
{
    1488:	b570      	push	{r4, r5, r6, lr}
	u32_t cyc = min((1 + ticks) * CYC_PER_TICK, MAX_DELAY);
    148a:	bf28      	it	cs
    148c:	4618      	movcs	r0, r3
	__asm__ volatile(
    148e:	f04f 0320 	mov.w	r3, #32
    1492:	f3ef 8511 	mrs	r5, BASEPRI
    1496:	f383 8811 	msr	BASEPRI, r3
     return p_reg->COUNTER;
    149a:	4912      	ldr	r1, [pc, #72]	; (14e4 <z_clock_set_timeout+0x80>)

	u32_t key = irq_lock();
	u32_t d = counter_sub(counter(), last_count);
    149c:	4c12      	ldr	r4, [pc, #72]	; (14e8 <z_clock_set_timeout+0x84>)
    149e:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    14a2:	6824      	ldr	r4, [r4, #0]
	return (a - b) & COUNTER_MAX;
    14a4:	1b1b      	subs	r3, r3, r4
    14a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	 * We've already accounted for anything less than a full tick,
	 * and assumed we meet the minimum delay for the tick.  If
	 * that's not true, we have to adjust, which may involve a
	 * rare and expensive integer division.
	 */
	if (d > (CYC_PER_TICK - MIN_DELAY)) {
    14aa:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
    14ae:	d310      	bcc.n	14d2 <z_clock_set_timeout+0x6e>
		if (d >= CYC_PER_TICK) {
    14b0:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    14b4:	d907      	bls.n	14c6 <z_clock_set_timeout+0x62>
			 * We're late by at least one tick.  Adjust
			 * the compare offset for the missed ones, and
			 * reduce d to be the portion since the last
			 * (unseen) tick.
			 */
			u32_t missed_ticks = d / CYC_PER_TICK;
    14b6:	fbb3 f6f2 	udiv	r6, r3, r2
			u32_t missed_cycles = missed_ticks * CYC_PER_TICK;
    14ba:	4372      	muls	r2, r6
			cyc += missed_cycles;
			d -= missed_cycles;
		}
		if (d > (CYC_PER_TICK - MIN_DELAY)) {
    14bc:	1a9b      	subs	r3, r3, r2
    14be:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
			cyc += missed_cycles;
    14c2:	4410      	add	r0, r2
		if (d > (CYC_PER_TICK - MIN_DELAY)) {
    14c4:	d301      	bcc.n	14ca <z_clock_set_timeout+0x66>
			 * We're (now) within the tick, but too close
			 * to meet the minimum delay required to
			 * guarantee compare firing.  Step up to the
			 * next tick.
			 */
			cyc += CYC_PER_TICK;
    14c6:	f200 1047 	addw	r0, r0, #327	; 0x147
    14ca:	4b05      	ldr	r3, [pc, #20]	; (14e0 <z_clock_set_timeout+0x7c>)
    14cc:	4298      	cmp	r0, r3
    14ce:	bf28      	it	cs
    14d0:	4618      	movcs	r0, r3
		if (cyc > MAX_DELAY) {
			/* Don't adjust beyond the counter range. */
			cyc = MAX_DELAY;
		}
	}
	set_comparator(last_count + cyc);
    14d2:	4420      	add	r0, r4
    p_reg->CC[ch] = cc_val;
    14d4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    14d8:	f385 8811 	msr	BASEPRI, r5
    14dc:	bd70      	pop	{r4, r5, r6, pc}
    14de:	bf00      	nop
    14e0:	00ffff66 	.word	0x00ffff66
    14e4:	40011000 	.word	0x40011000
    14e8:	20000028 	.word	0x20000028

000014ec <z_clock_elapsed>:
	__asm__ volatile(
    14ec:	f04f 0220 	mov.w	r2, #32
    14f0:	f3ef 8311 	mrs	r3, BASEPRI
    14f4:	f382 8811 	msr	BASEPRI, r2
     return p_reg->COUNTER;
    14f8:	4a07      	ldr	r2, [pc, #28]	; (1518 <z_clock_elapsed+0x2c>)
    14fa:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	u32_t key = irq_lock();
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    14fe:	4a07      	ldr	r2, [pc, #28]	; (151c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1500:	6812      	ldr	r2, [r2, #0]
    1502:	1a80      	subs	r0, r0, r2
    1504:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1508:	f240 1247 	movw	r2, #327	; 0x147
    150c:	fbb0 f0f2 	udiv	r0, r0, r2
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1510:	f383 8811 	msr	BASEPRI, r3

	irq_unlock(key);
	return ret;
}
    1514:	4770      	bx	lr
    1516:	bf00      	nop
    1518:	40011000 	.word	0x40011000
    151c:	20000028 	.word	0x20000028

00001520 <_timer_cycle_get_32>:
	__asm__ volatile(
    1520:	f04f 0320 	mov.w	r3, #32
    1524:	f3ef 8211 	mrs	r2, BASEPRI
    1528:	f383 8811 	msr	BASEPRI, r3

u32_t _timer_cycle_get_32(void)
{
	u32_t key = irq_lock();
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    152c:	4905      	ldr	r1, [pc, #20]	; (1544 <_timer_cycle_get_32+0x24>)
    152e:	4b06      	ldr	r3, [pc, #24]	; (1548 <_timer_cycle_get_32+0x28>)
    1530:	6808      	ldr	r0, [r1, #0]
    1532:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1536:	f382 8811 	msr	BASEPRI, r2
	return (a - b) & COUNTER_MAX;
    153a:	1a1b      	subs	r3, r3, r0
    153c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	irq_unlock(key);
	return ret;
}
    1540:	4418      	add	r0, r3
    1542:	4770      	bx	lr
    1544:	20000028 	.word	0x20000028
    1548:	40011000 	.word	0x40011000

0000154c <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    154c:	4804      	ldr	r0, [pc, #16]	; (1560 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    154e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    1550:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    1552:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1554:	d003      	beq.n	155e <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    1556:	4903      	ldr	r1, [pc, #12]	; (1564 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    1558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    155c:	600a      	str	r2, [r1, #0]

0000155e <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    155e:	4770      	bx	lr
    ldr r0, =_kernel
    1560:	20000df4 	.word	0x20000df4
    ldr r1, =_SCS_ICSR
    1564:	e000ed04 	.word	0xe000ed04

00001568 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1568:	4804      	ldr	r0, [pc, #16]	; (157c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    156a:	2300      	movs	r3, #0
    156c:	2120      	movs	r1, #32
    156e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1570:	3301      	adds	r3, #1
    1572:	2b30      	cmp	r3, #48	; 0x30
    1574:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1578:	d1f9      	bne.n	156e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    157a:	4770      	bx	lr
    157c:	e000e100 	.word	0xe000e100

00001580 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1580:	4a08      	ldr	r2, [pc, #32]	; (15a4 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1582:	4909      	ldr	r1, [pc, #36]	; (15a8 <__swap+0x28>)
	_current->arch.basepri = key;
    1584:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1586:	6809      	ldr	r1, [r1, #0]
    1588:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    158a:	4908      	ldr	r1, [pc, #32]	; (15ac <__swap+0x2c>)
	_current->arch.basepri = key;
    158c:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    158e:	684b      	ldr	r3, [r1, #4]
    1590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1594:	604b      	str	r3, [r1, #4]
    1596:	2300      	movs	r3, #0
    1598:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    159c:	6893      	ldr	r3, [r2, #8]
}
    159e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    15a0:	4770      	bx	lr
    15a2:	bf00      	nop
    15a4:	20000df4 	.word	0x20000df4
    15a8:	00008aa8 	.word	0x00008aa8
    15ac:	e000ed00 	.word	0xe000ed00

000015b0 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    15b0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    15b2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    15b6:	490d      	ldr	r1, [pc, #52]	; (15ec <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    15b8:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    15ba:	2028      	movs	r0, #40	; 0x28
    add r0, r2
    15bc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    15be:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    15c2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    15c6:	4f0a      	ldr	r7, [pc, #40]	; (15f0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    15c8:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    15cc:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    15ce:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    15d0:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    15d2:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    15d4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    15d6:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    15d8:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    15dc:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    15e0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r3, #0
    msr PSPLIM, r3
    pop {r3}
#endif

    msr PSP, ip
    15e4:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    15e8:	4770      	bx	lr
    15ea:	0000      	.short	0x0000
    ldr r1, =_kernel
    15ec:	20000df4 	.word	0x20000df4
    ldr v4, =_SCS_ICSR
    15f0:	e000ed04 	.word	0xe000ed04

000015f4 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    15f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    15f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    15fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    15fe:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1602:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    1604:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1608:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    160c:	2902      	cmp	r1, #2
    beq _oops
    160e:	d0ff      	beq.n	1610 <_oops>

00001610 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1610:	b500      	push	{lr}
    blx _do_kernel_oops
    1612:	f000 fa17 	bl	1a44 <_do_kernel_oops>
    pop {pc}
    1616:	bd00      	pop	{pc}

00001618 <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    1618:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    161a:	4c19      	ldr	r4, [pc, #100]	; (1680 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    161c:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    161e:	4819      	ldr	r0, [pc, #100]	; (1684 <_MpuFault.isra.2+0x6c>)
    1620:	f7ff fbc0 	bl	da4 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1626:	06d9      	lsls	r1, r3, #27
    1628:	d502      	bpl.n	1630 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    162a:	4817      	ldr	r0, [pc, #92]	; (1688 <_MpuFault.isra.2+0x70>)
    162c:	f7ff fbba 	bl	da4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1632:	071a      	lsls	r2, r3, #28
    1634:	d502      	bpl.n	163c <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    1636:	4815      	ldr	r0, [pc, #84]	; (168c <_MpuFault.isra.2+0x74>)
    1638:	f7ff fbb4 	bl	da4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    163c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    163e:	079b      	lsls	r3, r3, #30
    1640:	d50e      	bpl.n	1660 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    1642:	4813      	ldr	r0, [pc, #76]	; (1690 <_MpuFault.isra.2+0x78>)
    1644:	f7ff fbae 	bl	da4 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    1648:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    164a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    164c:	0618      	lsls	r0, r3, #24
    164e:	d507      	bpl.n	1660 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    1650:	4810      	ldr	r0, [pc, #64]	; (1694 <_MpuFault.isra.2+0x7c>)
    1652:	f7ff fba7 	bl	da4 <printk>
			if (fromHardFault) {
    1656:	b11d      	cbz	r5, 1660 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1658:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    165a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    165e:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1660:	4c07      	ldr	r4, [pc, #28]	; (1680 <_MpuFault.isra.2+0x68>)
    1662:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1664:	07d2      	lsls	r2, r2, #31
    1666:	d502      	bpl.n	166e <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    1668:	480b      	ldr	r0, [pc, #44]	; (1698 <_MpuFault.isra.2+0x80>)
    166a:	f7ff fb9b 	bl	da4 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    166e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1670:	069b      	lsls	r3, r3, #26
    1672:	d502      	bpl.n	167a <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    1674:	4809      	ldr	r0, [pc, #36]	; (169c <_MpuFault.isra.2+0x84>)
    1676:	f7ff fb95 	bl	da4 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    167a:	2000      	movs	r0, #0
    167c:	bd38      	pop	{r3, r4, r5, pc}
    167e:	bf00      	nop
    1680:	e000ed00 	.word	0xe000ed00
    1684:	000086ef 	.word	0x000086ef
    1688:	00008706 	.word	0x00008706
    168c:	00008718 	.word	0x00008718
    1690:	0000872c 	.word	0x0000872c
    1694:	00008745 	.word	0x00008745
    1698:	0000875c 	.word	0x0000875c
    169c:	0000877c 	.word	0x0000877c

000016a0 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    16a0:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16a2:	4c1b      	ldr	r4, [pc, #108]	; (1710 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    16a4:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    16a6:	481b      	ldr	r0, [pc, #108]	; (1714 <_BusFault.isra.3+0x74>)
    16a8:	f7ff fb7c 	bl	da4 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16ae:	04d8      	lsls	r0, r3, #19
    16b0:	d504      	bpl.n	16bc <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
    16b2:	4819      	ldr	r0, [pc, #100]	; (1718 <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    16b4:	f7ff fb76 	bl	da4 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    16bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16be:	0519      	lsls	r1, r3, #20
    16c0:	d501      	bpl.n	16c6 <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    16c2:	4816      	ldr	r0, [pc, #88]	; (171c <_BusFault.isra.3+0x7c>)
    16c4:	e7f6      	b.n	16b4 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    16c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16c8:	059a      	lsls	r2, r3, #22
    16ca:	d514      	bpl.n	16f6 <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
    16cc:	4814      	ldr	r0, [pc, #80]	; (1720 <_BusFault.isra.3+0x80>)
    16ce:	f7ff fb69 	bl	da4 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    16d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    16d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16d6:	041b      	lsls	r3, r3, #16
    16d8:	d507      	bpl.n	16ea <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    16da:	4812      	ldr	r0, [pc, #72]	; (1724 <_BusFault.isra.3+0x84>)
    16dc:	f7ff fb62 	bl	da4 <printk>
			if (fromHardFault) {
    16e0:	b11d      	cbz	r5, 16ea <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    16e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    16e8:	62a3      	str	r3, [r4, #40]	; 0x28
		if ((SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) != 0) {
    16ea:	4b09      	ldr	r3, [pc, #36]	; (1710 <_BusFault.isra.3+0x70>)
    16ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16ee:	0558      	lsls	r0, r3, #21
    16f0:	d5e2      	bpl.n	16b8 <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
    16f2:	480d      	ldr	r0, [pc, #52]	; (1728 <_BusFault.isra.3+0x88>)
    16f4:	e7de      	b.n	16b4 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    16f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f8:	0559      	lsls	r1, r3, #21
    16fa:	d4fa      	bmi.n	16f2 <_BusFault.isra.3+0x52>
	} else if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    16fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16fe:	05da      	lsls	r2, r3, #23
    1700:	d501      	bpl.n	1706 <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
    1702:	480a      	ldr	r0, [pc, #40]	; (172c <_BusFault.isra.3+0x8c>)
    1704:	e7d6      	b.n	16b4 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1708:	049b      	lsls	r3, r3, #18
    170a:	d5d5      	bpl.n	16b8 <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    170c:	4808      	ldr	r0, [pc, #32]	; (1730 <_BusFault.isra.3+0x90>)
    170e:	e7d1      	b.n	16b4 <_BusFault.isra.3+0x14>
    1710:	e000ed00 	.word	0xe000ed00
    1714:	000085a0 	.word	0x000085a0
    1718:	00008706 	.word	0x00008706
    171c:	00008718 	.word	0x00008718
    1720:	000085b7 	.word	0x000085b7
    1724:	000085d1 	.word	0x000085d1
    1728:	000085e7 	.word	0x000085e7
    172c:	00008603 	.word	0x00008603
    1730:	0000877c 	.word	0x0000877c

00001734 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    1734:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1736:	4c19      	ldr	r4, [pc, #100]	; (179c <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    1738:	4819      	ldr	r0, [pc, #100]	; (17a0 <_UsageFault.isra.5+0x6c>)
    173a:	f7ff fb33 	bl	da4 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    173e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1740:	019a      	lsls	r2, r3, #6
    1742:	d502      	bpl.n	174a <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    1744:	4817      	ldr	r0, [pc, #92]	; (17a4 <_UsageFault.isra.5+0x70>)
    1746:	f7ff fb2d 	bl	da4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    174a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174c:	01db      	lsls	r3, r3, #7
    174e:	d502      	bpl.n	1756 <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    1750:	4815      	ldr	r0, [pc, #84]	; (17a8 <_UsageFault.isra.5+0x74>)
    1752:	f7ff fb27 	bl	da4 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1758:	0318      	lsls	r0, r3, #12
    175a:	d502      	bpl.n	1762 <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    175c:	4813      	ldr	r0, [pc, #76]	; (17ac <_UsageFault.isra.5+0x78>)
    175e:	f7ff fb21 	bl	da4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1762:	4c0e      	ldr	r4, [pc, #56]	; (179c <_UsageFault.isra.5+0x68>)
    1764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1766:	0359      	lsls	r1, r3, #13
    1768:	d502      	bpl.n	1770 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    176a:	4811      	ldr	r0, [pc, #68]	; (17b0 <_UsageFault.isra.5+0x7c>)
    176c:	f7ff fb1a 	bl	da4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1772:	039a      	lsls	r2, r3, #14
    1774:	d502      	bpl.n	177c <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    1776:	480f      	ldr	r0, [pc, #60]	; (17b4 <_UsageFault.isra.5+0x80>)
    1778:	f7ff fb14 	bl	da4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    177c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    177e:	03db      	lsls	r3, r3, #15
    1780:	d502      	bpl.n	1788 <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    1782:	480d      	ldr	r0, [pc, #52]	; (17b8 <_UsageFault.isra.5+0x84>)
    1784:	f7ff fb0e 	bl	da4 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1788:	4a04      	ldr	r2, [pc, #16]	; (179c <_UsageFault.isra.5+0x68>)
    178a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    178c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1790:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1794:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1796:	2000      	movs	r0, #0
    1798:	bd10      	pop	{r4, pc}
    179a:	bf00      	nop
    179c:	e000ed00 	.word	0xe000ed00
    17a0:	000087ac 	.word	0x000087ac
    17a4:	000087c5 	.word	0x000087c5
    17a8:	000087d9 	.word	0x000087d9
    17ac:	000087f4 	.word	0x000087f4
    17b0:	00008813 	.word	0x00008813
    17b4:	00008839 	.word	0x00008839
    17b8:	00008854 	.word	0x00008854

000017bc <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    17bc:	b538      	push	{r3, r4, r5, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17be:	4c27      	ldr	r4, [pc, #156]	; (185c <_Fault+0xa0>)
    17c0:	6863      	ldr	r3, [r4, #4]
    17c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    17c6:	1eda      	subs	r2, r3, #3
{
    17c8:	4605      	mov	r5, r0
	switch (fault) {
    17ca:	2a09      	cmp	r2, #9
    17cc:	d83a      	bhi.n	1844 <_Fault+0x88>
    17ce:	e8df f002 	tbb	[pc, r2]
    17d2:	3305      	.short	0x3305
    17d4:	39393035 	.word	0x39393035
    17d8:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    17dc:	4820      	ldr	r0, [pc, #128]	; (1860 <_Fault+0xa4>)
    17de:	f7ff fae1 	bl	da4 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    17e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17e4:	079a      	lsls	r2, r3, #30
    17e6:	d503      	bpl.n	17f0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17e8:	481e      	ldr	r0, [pc, #120]	; (1864 <_Fault+0xa8>)
	PR_FAULT_INFO(
    17ea:	f7ff fadb 	bl	da4 <printk>
    17ee:	e002      	b.n	17f6 <_Fault+0x3a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    17f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17f2:	005b      	lsls	r3, r3, #1
    17f4:	d405      	bmi.n	1802 <_Fault+0x46>
	PR_FAULT_INFO(
    17f6:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
	reason = _NANO_ERR_HW_EXCEPTION;
#endif
	_NanoFatalErrorHandler(reason, esf);
    17f8:	4629      	mov	r1, r5
}
    17fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_NanoFatalErrorHandler(reason, esf);
    17fe:	f000 b8ef 	b.w	19e0 <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    1802:	4819      	ldr	r0, [pc, #100]	; (1868 <_Fault+0xac>)
    1804:	f7ff face 	bl	da4 <printk>
		if (SCB_MMFSR != 0) {
    1808:	4b18      	ldr	r3, [pc, #96]	; (186c <_Fault+0xb0>)
    180a:	781b      	ldrb	r3, [r3, #0]
    180c:	b12b      	cbz	r3, 181a <_Fault+0x5e>
			reason = _MpuFault(esf, 1);
    180e:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    1810:	f7ff ff02 	bl	1618 <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    1814:	2806      	cmp	r0, #6
    1816:	d1ef      	bne.n	17f8 <_Fault+0x3c>
    1818:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR != 0) {
    181a:	4b15      	ldr	r3, [pc, #84]	; (1870 <_Fault+0xb4>)
    181c:	781b      	ldrb	r3, [r3, #0]
    181e:	b11b      	cbz	r3, 1828 <_Fault+0x6c>
			reason = _BusFault(esf, 1);
    1820:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    1822:	f7ff ff3d 	bl	16a0 <_BusFault.isra.3>
    1826:	e7f5      	b.n	1814 <_Fault+0x58>
		} else if (SCB_UFSR != 0) {
    1828:	4b12      	ldr	r3, [pc, #72]	; (1874 <_Fault+0xb8>)
    182a:	881b      	ldrh	r3, [r3, #0]
    182c:	b29b      	uxth	r3, r3
    182e:	2b00      	cmp	r3, #0
    1830:	d0e1      	beq.n	17f6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    1832:	f7ff ff7f 	bl	1734 <_UsageFault.isra.5>
    1836:	e7ed      	b.n	1814 <_Fault+0x58>
		reason = _MpuFault(esf, 0);
    1838:	2000      	movs	r0, #0
    183a:	e7e9      	b.n	1810 <_Fault+0x54>
		reason = _BusFault(esf, 0);
    183c:	2000      	movs	r0, #0
    183e:	e7f0      	b.n	1822 <_Fault+0x66>
	PR_FAULT_INFO(
    1840:	480d      	ldr	r0, [pc, #52]	; (1878 <_Fault+0xbc>)
    1842:	e7d2      	b.n	17ea <_Fault+0x2e>
	PR_FAULT_INFO("***** %s %d) *****\n",
    1844:	480d      	ldr	r0, [pc, #52]	; (187c <_Fault+0xc0>)
    1846:	490e      	ldr	r1, [pc, #56]	; (1880 <_Fault+0xc4>)
    1848:	f1a3 0210 	sub.w	r2, r3, #16
    184c:	2b0f      	cmp	r3, #15
    184e:	bfd8      	it	le
    1850:	4601      	movle	r1, r0
    1852:	480c      	ldr	r0, [pc, #48]	; (1884 <_Fault+0xc8>)
    1854:	f7ff faa6 	bl	da4 <printk>
    1858:	e7cd      	b.n	17f6 <_Fault+0x3a>
    185a:	bf00      	nop
    185c:	e000ed00 	.word	0xe000ed00
    1860:	0000864a 	.word	0x0000864a
    1864:	00008662 	.word	0x00008662
    1868:	00008684 	.word	0x00008684
    186c:	e000ed28 	.word	0xe000ed28
    1870:	e000ed29 	.word	0xe000ed29
    1874:	e000ed2a 	.word	0xe000ed2a
    1878:	000086a4 	.word	0x000086a4
    187c:	0000861c 	.word	0x0000861c
    1880:	00008631 	.word	0x00008631
    1884:	000086db 	.word	0x000086db

00001888 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1888:	4a02      	ldr	r2, [pc, #8]	; (1894 <_FaultInit+0xc>)
    188a:	6953      	ldr	r3, [r2, #20]
    188c:	f043 0310 	orr.w	r3, r3, #16
    1890:	6153      	str	r3, [r2, #20]
    1892:	4770      	bx	lr
    1894:	e000ed00 	.word	0xe000ed00

00001898 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1898:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    189a:	2b00      	cmp	r3, #0
    189c:	db08      	blt.n	18b0 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    189e:	2201      	movs	r2, #1
    18a0:	f000 001f 	and.w	r0, r0, #31
    18a4:	fa02 f000 	lsl.w	r0, r2, r0
    18a8:	095b      	lsrs	r3, r3, #5
    18aa:	4a02      	ldr	r2, [pc, #8]	; (18b4 <_arch_irq_enable+0x1c>)
    18ac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    18b0:	4770      	bx	lr
    18b2:	bf00      	nop
    18b4:	e000e100 	.word	0xe000e100

000018b8 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    18b8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18ba:	2b00      	cmp	r3, #0
    18bc:	db0d      	blt.n	18da <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18be:	2201      	movs	r2, #1
    18c0:	095b      	lsrs	r3, r3, #5
    18c2:	f000 001f 	and.w	r0, r0, #31
    18c6:	fa02 f000 	lsl.w	r0, r2, r0
    18ca:	3320      	adds	r3, #32
    18cc:	4a03      	ldr	r2, [pc, #12]	; (18dc <_arch_irq_disable+0x24>)
    18ce:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    18d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18d6:	f3bf 8f6f 	isb	sy
    18da:	4770      	bx	lr
    18dc:	e000e100 	.word	0xe000e100

000018e0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18e0:	0942      	lsrs	r2, r0, #5
    18e2:	4b05      	ldr	r3, [pc, #20]	; (18f8 <_arch_irq_is_enabled+0x18>)
    18e4:	f000 001f 	and.w	r0, r0, #31
    18e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ec:	2301      	movs	r3, #1
    18ee:	fa03 f000 	lsl.w	r0, r3, r0
}
    18f2:	4010      	ands	r0, r2
    18f4:	4770      	bx	lr
    18f6:	bf00      	nop
    18f8:	e000e100 	.word	0xe000e100

000018fc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18fc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18fe:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1900:	bfa8      	it	ge
    1902:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1906:	f101 0101 	add.w	r1, r1, #1
    190a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    190e:	bfad      	iteet	ge
    1910:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1914:	f000 000f 	andlt.w	r0, r0, #15
    1918:	4b03      	ldrlt	r3, [pc, #12]	; (1928 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    191a:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    191c:	bfb6      	itet	lt
    191e:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1920:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1924:	5419      	strblt	r1, [r3, r0]
    1926:	4770      	bx	lr
    1928:	e000ed14 	.word	0xe000ed14

0000192c <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    192c:	f000 b844 	b.w	19b8 <__bus_fault>

00001930 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1930:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    1932:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1934:	4b04      	ldr	r3, [pc, #16]	; (1948 <_arch_isr_direct_pm+0x18>)
    1936:	6a18      	ldr	r0, [r3, #32]
    1938:	b118      	cbz	r0, 1942 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    193a:	2200      	movs	r2, #0
    193c:	621a      	str	r2, [r3, #32]
		_sys_power_save_idle_exit(idle_val);
    193e:	f005 fbe7 	bl	7110 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1942:	b662      	cpsie	i
    1944:	bd08      	pop	{r3, pc}
    1946:	bf00      	nop
    1948:	20000df4 	.word	0x20000df4

0000194c <_arch_isr_direct_header>:

}
#endif

void _arch_isr_direct_header(void)
{
    194c:	4770      	bx	lr
	...

00001950 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1952:	460c      	mov	r4, r1
    1954:	4616      	mov	r6, r2
    1956:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1958:	2204      	movs	r2, #4
    195a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    195c:	9909      	ldr	r1, [sp, #36]	; 0x24
    195e:	4605      	mov	r5, r0
    1960:	f006 fa26 	bl	7db0 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1964:	f1a6 0120 	sub.w	r1, r6, #32
    1968:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    196a:	4a0c      	ldr	r2, [pc, #48]	; (199c <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    196c:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    196e:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1972:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1974:	f022 0201 	bic.w	r2, r2, #1
    1978:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    197a:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
    197c:	65ee      	str	r6, [r5, #92]	; 0x5c
    197e:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1980:	9a06      	ldr	r2, [sp, #24]
    1982:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1984:	9a07      	ldr	r2, [sp, #28]
    1986:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1988:	9a08      	ldr	r2, [sp, #32]
    198a:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    198c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    198e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1992:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1994:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    1996:	666b      	str	r3, [r5, #100]	; 0x64
    1998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    199a:	bf00      	nop
    199c:	0000098d 	.word	0x0000098d

000019a0 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    19a0:	4901      	ldr	r1, [pc, #4]	; (19a8 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    19a2:	2210      	movs	r2, #16
	str r2, [r1]
    19a4:	600a      	str	r2, [r1, #0]
	bx lr
    19a6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    19a8:	e000ed10 	.word	0xe000ed10

000019ac <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    19ac:	4040      	eors	r0, r0
	msr BASEPRI, r0
    19ae:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    19b2:	bf30      	wfi

	bx lr
    19b4:	4770      	bx	lr
    19b6:	bf00      	nop

000019b8 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    19b8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    19ba:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    19be:	f8df c01c 	ldr.w	ip, [pc, #28]	; 19dc <__bus_fault+0x24>
	ldr ip, [ip]
    19c2:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    19c6:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    19ca:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    19cc:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    19d0:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    19d4:	b500      	push	{lr}
	bl _Fault
    19d6:	f7ff fef1 	bl	17bc <_Fault>

	pop {pc}
    19da:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    19dc:	e000ed04 	.word	0xe000ed04

000019e0 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    19e0:	b538      	push	{r3, r4, r5, lr}
    19e2:	4604      	mov	r4, r0
    19e4:	460d      	mov	r5, r1
	LOG_PANIC();

	switch (reason) {
    19e6:	2805      	cmp	r0, #5
    19e8:	d81a      	bhi.n	1a20 <_NanoFatalErrorHandler+0x40>
    19ea:	e8df f000 	tbb	[pc, r0]
    19ee:	1903      	.short	0x1903
    19f0:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    19f4:	480d      	ldr	r0, [pc, #52]	; (1a2c <_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19f6:	f7ff f9d5 	bl	da4 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    19fa:	f006 f86f 	bl	7adc <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19fe:	69aa      	ldr	r2, [r5, #24]
    1a00:	4601      	mov	r1, r0
    1a02:	480b      	ldr	r0, [pc, #44]	; (1a30 <_NanoFatalErrorHandler+0x50>)
    1a04:	f7ff f9ce 	bl	da4 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    1a08:	4629      	mov	r1, r5
    1a0a:	4620      	mov	r0, r4
}
    1a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1a10:	f000 b81c 	b.w	1a4c <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    1a14:	4807      	ldr	r0, [pc, #28]	; (1a34 <_NanoFatalErrorHandler+0x54>)
    1a16:	e7ee      	b.n	19f6 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    1a18:	4807      	ldr	r0, [pc, #28]	; (1a38 <_NanoFatalErrorHandler+0x58>)
    1a1a:	e7ec      	b.n	19f6 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    1a1c:	4807      	ldr	r0, [pc, #28]	; (1a3c <_NanoFatalErrorHandler+0x5c>)
    1a1e:	e7ea      	b.n	19f6 <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1a20:	4601      	mov	r1, r0
    1a22:	4807      	ldr	r0, [pc, #28]	; (1a40 <_NanoFatalErrorHandler+0x60>)
    1a24:	f7ff f9be 	bl	da4 <printk>
		break;
    1a28:	e7e7      	b.n	19fa <_NanoFatalErrorHandler+0x1a>
    1a2a:	bf00      	nop
    1a2c:	00008880 	.word	0x00008880
    1a30:	0000891e 	.word	0x0000891e
    1a34:	000088a0 	.word	0x000088a0
    1a38:	000088c6 	.word	0x000088c6
    1a3c:	000088e0 	.word	0x000088e0
    1a40:	000088fb 	.word	0x000088fb

00001a44 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1a44:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1a46:	6800      	ldr	r0, [r0, #0]
    1a48:	f7ff bfca 	b.w	19e0 <_NanoFatalErrorHandler>

00001a4c <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a4c:	2805      	cmp	r0, #5
{
    1a4e:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a50:	d00c      	beq.n	1a6c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a52:	f006 f8d7 	bl	7c04 <k_is_in_isr>
    1a56:	b160      	cbz	r0, 1a72 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a58:	f006 f8d4 	bl	7c04 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a5c:	4b0c      	ldr	r3, [pc, #48]	; (1a90 <_SysFatalErrorHandler+0x44>)
    1a5e:	490d      	ldr	r1, [pc, #52]	; (1a94 <_SysFatalErrorHandler+0x48>)
    1a60:	2800      	cmp	r0, #0
    1a62:	bf08      	it	eq
    1a64:	4619      	moveq	r1, r3
    1a66:	480c      	ldr	r0, [pc, #48]	; (1a98 <_SysFatalErrorHandler+0x4c>)
    1a68:	f7ff f99c 	bl	da4 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a6c:	f7ff ff9e 	bl	19ac <k_cpu_idle>
    1a70:	e7fc      	b.n	1a6c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a72:	f006 f8d7 	bl	7c24 <_is_thread_essential>
    1a76:	2800      	cmp	r0, #0
    1a78:	d1ee      	bne.n	1a58 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a7a:	4c08      	ldr	r4, [pc, #32]	; (1a9c <_SysFatalErrorHandler+0x50>)
    1a7c:	4808      	ldr	r0, [pc, #32]	; (1aa0 <_SysFatalErrorHandler+0x54>)
    1a7e:	68a1      	ldr	r1, [r4, #8]
    1a80:	f7ff f990 	bl	da4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    1a84:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a8a:	f000 b80b 	b.w	1aa4 <_impl_k_thread_abort>
    1a8e:	bf00      	nop
    1a90:	0000895e 	.word	0x0000895e
    1a94:	0000895a 	.word	0x0000895a
    1a98:	0000896f 	.word	0x0000896f
    1a9c:	20000df4 	.word	0x20000df4
    1aa0:	0000898f 	.word	0x0000898f

00001aa4 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1aa4:	b538      	push	{r3, r4, r5, lr}
    1aa6:	4605      	mov	r5, r0
	__asm__ volatile(
    1aa8:	f04f 0320 	mov.w	r3, #32
    1aac:	f3ef 8411 	mrs	r4, BASEPRI
    1ab0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1ab4:	f006 f910 	bl	7cd8 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1ab8:	4b0a      	ldr	r3, [pc, #40]	; (1ae4 <_impl_k_thread_abort+0x40>)
    1aba:	689b      	ldr	r3, [r3, #8]
    1abc:	429d      	cmp	r5, r3
    1abe:	d10b      	bne.n	1ad8 <_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1ac0:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <_impl_k_thread_abort+0x44>)
    1ac2:	685a      	ldr	r2, [r3, #4]
    1ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1ac8:	b912      	cbnz	r2, 1ad0 <_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    1aca:	4620      	mov	r0, r4
    1acc:	f7ff fd58 	bl	1580 <__swap>
			(void)_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1ad0:	685a      	ldr	r2, [r3, #4]
    1ad2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1ad6:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1ad8:	4620      	mov	r0, r4
}
    1ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1ade:	f005 bdff 	b.w	76e0 <_reschedule>
    1ae2:	bf00      	nop
    1ae4:	20000df4 	.word	0x20000df4
    1ae8:	e000ed00 	.word	0xe000ed00

00001aec <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aec:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aee:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1af0:	4a0b      	ldr	r2, [pc, #44]	; (1b20 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1af2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1af4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1af6:	bf1e      	ittt	ne
	movne	r1, #0
    1af8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1afa:	6211      	strne	r1, [r2, #32]
		blxne	_sys_power_save_idle_exit
    1afc:	f005 fb08 	blne	7110 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1b00:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1b02:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1b06:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1b0a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1b0e:	4905      	ldr	r1, [pc, #20]	; (1b24 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1b10:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1b12:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1b14:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1b16:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    1b1a:	4803      	ldr	r0, [pc, #12]	; (1b28 <_isr_wrapper+0x3c>)
	bx r0
    1b1c:	4700      	bx	r0
    1b1e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1b20:	20000df4 	.word	0x20000df4
	ldr r1, =_sw_isr_table
    1b24:	000082d0 	.word	0x000082d0
	ldr r0, =_IntExit
    1b28:	0000154d 	.word	0x0000154d

00001b2c <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b2c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1b2e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1b32:	4806      	ldr	r0, [pc, #24]	; (1b4c <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1b38:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1b3a:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1b3e:	2002      	movs	r0, #2
    msr CONTROL, r0
    1b40:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1b44:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    1b48:	f000 f806 	bl	1b58 <_PrepC>
    ldr r0, =_interrupt_stack
    1b4c:	20001bb8 	.word	0x20001bb8

00001b50 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b50:	bf30      	wfi
    b _SysNmiOnReset
    1b52:	f7ff bffd 	b.w	1b50 <_SysNmiOnReset>
    1b56:	bf00      	nop

00001b58 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b58:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b5a:	4b08      	ldr	r3, [pc, #32]	; (1b7c <_PrepC+0x24>)
    1b5c:	4a08      	ldr	r2, [pc, #32]	; (1b80 <_PrepC+0x28>)
    1b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b62:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b68:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b6c:	f005 faea 	bl	7144 <_bss_zero>
	_data_copy();
    1b70:	f005 faf2 	bl	7158 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	_IntLibInit();
    1b74:	f7ff fcf8 	bl	1568 <_IntLibInit>
	_Cstart();
    1b78:	f005 fb16 	bl	71a8 <_Cstart>
    1b7c:	00000000 	.word	0x00000000
    1b80:	e000ed00 	.word	0xe000ed00

00001b84 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b84:	b508      	push	{r3, lr}
	handler();
    1b86:	f7ff ffe3 	bl	1b50 <_SysNmiOnReset>
	_ExcExit();
}
    1b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b8e:	f7ff bcdd 	b.w	154c <_ExcExit>
	...

00001b94 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1b94:	4b03      	ldr	r3, [pc, #12]	; (1ba4 <arm_core_mpu_enable+0x10>)
    1b96:	2205      	movs	r2, #5
    1b98:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b9e:	f3bf 8f6f 	isb	sy
    1ba2:	4770      	bx	lr
    1ba4:	e000ed90 	.word	0xe000ed90

00001ba8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1ba8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1bac:	4b01      	ldr	r3, [pc, #4]	; (1bb4 <arm_core_mpu_disable+0xc>)
    1bae:	2200      	movs	r2, #0
    1bb0:	605a      	str	r2, [r3, #4]
    1bb2:	4770      	bx	lr
    1bb4:	e000ed90 	.word	0xe000ed90

00001bb8 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1bb8:	4912      	ldr	r1, [pc, #72]	; (1c04 <arm_mpu_init+0x4c>)
{
    1bba:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1bbc:	680c      	ldr	r4, [r1, #0]
    1bbe:	2c08      	cmp	r4, #8
    1bc0:	d81c      	bhi.n	1bfc <arm_mpu_init+0x44>
		return -1;
	}

	LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();
    1bc2:	f7ff fff1 	bl	1ba8 <arm_core_mpu_disable>
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    1bc6:	4810      	ldr	r0, [pc, #64]	; (1c08 <arm_mpu_init+0x50>)
    1bc8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Configure regions */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1bca:	2200      	movs	r2, #0
    1bcc:	42a2      	cmp	r2, r4
    1bce:	f101 010c 	add.w	r1, r1, #12
    1bd2:	d103      	bne.n	1bdc <arm_mpu_init+0x24>
	if (gcov_size > 0) {
		_region_init(gcov_index, &gcov_region_conf);
	}
#endif

	arm_core_mpu_enable();
    1bd4:	f7ff ffde 	bl	1b94 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    1bd8:	2000      	movs	r0, #0
    1bda:	bd10      	pop	{r4, pc}
    1bdc:	6082      	str	r2, [r0, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1bde:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1be2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1be6:	f043 0310 	orr.w	r3, r3, #16
    1bea:	4313      	orrs	r3, r2
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1bec:	60c3      	str	r3, [r0, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1bf2:	f043 0301 	orr.w	r3, r3, #1
    1bf6:	6103      	str	r3, [r0, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1bf8:	3201      	adds	r2, #1
    1bfa:	e7e7      	b.n	1bcc <arm_mpu_init+0x14>
		return -1;
    1bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1c00:	bd10      	pop	{r4, pc}
    1c02:	bf00      	nop
    1c04:	00008528 	.word	0x00008528
    1c08:	e000ed90 	.word	0xe000ed90

00001c0c <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    1c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    1c10:	780f      	ldrb	r7, [r1, #0]
{
    1c12:	4605      	mov	r5, r0
	if (c != 0) {
    1c14:	b187      	cbz	r7, 1c38 <strstr+0x2c>
	c = *find++;
    1c16:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    1c18:	4620      	mov	r0, r4
    1c1a:	f000 f81c 	bl	1c56 <strlen>
    1c1e:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
    1c20:	462e      	mov	r6, r5
    1c22:	f816 0b01 	ldrb.w	r0, [r6], #1
				if (sc == 0)
    1c26:	b140      	cbz	r0, 1c3a <strstr+0x2e>
				return NULL;
			} while (sc != c);
    1c28:	4287      	cmp	r7, r0
    1c2a:	d108      	bne.n	1c3e <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
    1c2c:	4642      	mov	r2, r8
    1c2e:	4621      	mov	r1, r4
    1c30:	4630      	mov	r0, r6
    1c32:	f000 f825 	bl	1c80 <strncmp>
    1c36:	b910      	cbnz	r0, 1c3e <strstr+0x32>
    1c38:	4628      	mov	r0, r5
	s--;
	}
	return (char *)s;
}
    1c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    1c3e:	4635      	mov	r5, r6
    1c40:	e7ee      	b.n	1c20 <strstr+0x14>

00001c42 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1c42:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1c44:	4603      	mov	r3, r0
    1c46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1c4a:	b90a      	cbnz	r2, 1c50 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1c4c:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1c4e:	4770      	bx	lr
		*d = *s;
    1c50:	f803 2b01 	strb.w	r2, [r3], #1
    1c54:	e7f7      	b.n	1c46 <strcpy+0x4>

00001c56 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1c56:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1c58:	4603      	mov	r3, r0
    1c5a:	1a98      	subs	r0, r3, r2
    1c5c:	f813 1b01 	ldrb.w	r1, [r3], #1
    1c60:	2900      	cmp	r1, #0
    1c62:	d1fa      	bne.n	1c5a <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1c64:	4770      	bx	lr

00001c66 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1c66:	3801      	subs	r0, #1
    1c68:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1c6a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1c6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1c72:	4293      	cmp	r3, r2
    1c74:	d102      	bne.n	1c7c <strcmp+0x16>
    1c76:	2b00      	cmp	r3, #0
    1c78:	d1f7      	bne.n	1c6a <strcmp+0x4>
    1c7a:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1c7c:	1a98      	subs	r0, r3, r2
    1c7e:	4770      	bx	lr

00001c80 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    1c80:	b510      	push	{r4, lr}
    1c82:	3901      	subs	r1, #1
    1c84:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    1c86:	4290      	cmp	r0, r2
    1c88:	d009      	beq.n	1c9e <strncmp+0x1e>
    1c8a:	7803      	ldrb	r3, [r0, #0]
    1c8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1c90:	42a3      	cmp	r3, r4
    1c92:	d100      	bne.n	1c96 <strncmp+0x16>
    1c94:	b90b      	cbnz	r3, 1c9a <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    1c96:	1b18      	subs	r0, r3, r4
}
    1c98:	bd10      	pop	{r4, pc}
		s1++;
    1c9a:	3001      	adds	r0, #1
    1c9c:	e7f3      	b.n	1c86 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
    1c9e:	2000      	movs	r0, #0
    1ca0:	bd10      	pop	{r4, pc}

00001ca2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1ca2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1ca4:	b182      	cbz	r2, 1cc8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1ca6:	3a01      	subs	r2, #1
    1ca8:	460c      	mov	r4, r1
    1caa:	4603      	mov	r3, r0
    1cac:	d103      	bne.n	1cb6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1cae:	781a      	ldrb	r2, [r3, #0]
    1cb0:	7820      	ldrb	r0, [r4, #0]
    1cb2:	1a10      	subs	r0, r2, r0
    1cb4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1cb6:	781e      	ldrb	r6, [r3, #0]
    1cb8:	7825      	ldrb	r5, [r4, #0]
    1cba:	42ae      	cmp	r6, r5
    1cbc:	f100 0001 	add.w	r0, r0, #1
    1cc0:	f101 0101 	add.w	r1, r1, #1
    1cc4:	d0ef      	beq.n	1ca6 <memcmp+0x4>
    1cc6:	e7f2      	b.n	1cae <memcmp+0xc>
		return 0;
    1cc8:	4610      	mov	r0, r2
}
    1cca:	bd70      	pop	{r4, r5, r6, pc}

00001ccc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1ccc:	ea81 0300 	eor.w	r3, r1, r0
    1cd0:	f013 0f03 	tst.w	r3, #3
{
    1cd4:	b570      	push	{r4, r5, r6, lr}
    1cd6:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1cd8:	d00b      	beq.n	1cf2 <memcpy+0x26>
    1cda:	3b01      	subs	r3, #1
    1cdc:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1cde:	4291      	cmp	r1, r2
    1ce0:	d11b      	bne.n	1d1a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1ce2:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1ce4:	2a00      	cmp	r2, #0
    1ce6:	d0fc      	beq.n	1ce2 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
    1cec:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1cf0:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1cf2:	079c      	lsls	r4, r3, #30
    1cf4:	d1f6      	bne.n	1ce4 <memcpy+0x18>
    1cf6:	1f1e      	subs	r6, r3, #4
    1cf8:	460d      	mov	r5, r1
    1cfa:	1b54      	subs	r4, r2, r5
    1cfc:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1cfe:	2c03      	cmp	r4, #3
    1d00:	d806      	bhi.n	1d10 <memcpy+0x44>
    1d02:	f022 0403 	bic.w	r4, r2, #3
    1d06:	4421      	add	r1, r4
    1d08:	4423      	add	r3, r4
    1d0a:	f002 0203 	and.w	r2, r2, #3
    1d0e:	e7e4      	b.n	1cda <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1d10:	f855 4b04 	ldr.w	r4, [r5], #4
    1d14:	f846 4f04 	str.w	r4, [r6, #4]!
    1d18:	e7ef      	b.n	1cfa <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1d22:	e7dc      	b.n	1cde <memcpy+0x12>

00001d24 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1d24:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1d26:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1d28:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1d2a:	079c      	lsls	r4, r3, #30
    1d2c:	d111      	bne.n	1d52 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1d2e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1d32:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1d36:	461e      	mov	r6, r3
    1d38:	1b95      	subs	r5, r2, r6
    1d3a:	441d      	add	r5, r3
    1d3c:	2d03      	cmp	r5, #3
    1d3e:	d80e      	bhi.n	1d5e <memset+0x3a>
    1d40:	f022 0403 	bic.w	r4, r2, #3
    1d44:	4423      	add	r3, r4
    1d46:	f002 0203 	and.w	r2, r2, #3
    1d4a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1d4c:	4293      	cmp	r3, r2
    1d4e:	d109      	bne.n	1d64 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1d50:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1d52:	2a00      	cmp	r2, #0
    1d54:	d0fc      	beq.n	1d50 <memset+0x2c>
		*(d_byte++) = c_byte;
    1d56:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1d5a:	3a01      	subs	r2, #1
    1d5c:	e7e5      	b.n	1d2a <memset+0x6>
		*(d_word++) = c_word;
    1d5e:	f846 4b04 	str.w	r4, [r6], #4
    1d62:	e7e9      	b.n	1d38 <memset+0x14>
		*(d_byte++) = c_byte;
    1d64:	f803 1b01 	strb.w	r1, [r3], #1
    1d68:	e7f0      	b.n	1d4c <memset+0x28>

00001d6a <atomic_or>:
{
    1d6a:	b500      	push	{lr}
}
    1d6c:	f3bf 8f5b 	dmb	ish
    1d70:	e850 3f00 	ldrex	r3, [r0]
    1d74:	ea43 0201 	orr.w	r2, r3, r1
    1d78:	e840 2e00 	strex	lr, r2, [r0]
    1d7c:	f1be 0f00 	cmp.w	lr, #0
    1d80:	d1f6      	bne.n	1d70 <atomic_or+0x6>
    1d82:	f3bf 8f5b 	dmb	ish
    1d86:	4618      	mov	r0, r3
    1d88:	f85d fb04 	ldr.w	pc, [sp], #4

00001d8c <hci_cmd_done.isra.7>:

	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
	atomic_set(bt_dev.flags, flags);
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1d8c:	b570      	push	{r4, r5, r6, lr}
    1d8e:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1d90:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1d92:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1d94:	f004 fe0c 	bl	69b0 <net_buf_pool_get>
    1d98:	4b0e      	ldr	r3, [pc, #56]	; (1dd4 <hci_cmd_done.isra.7+0x48>)
    1d9a:	4283      	cmp	r3, r0
    1d9c:	d119      	bne.n	1dd2 <hci_cmd_done.isra.7+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1d9e:	4628      	mov	r0, r5
    1da0:	f004 fe0c 	bl	69bc <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1da4:	4628      	mov	r0, r5
    1da6:	f004 fe09 	bl	69bc <net_buf_id>
    1daa:	4c0b      	ldr	r4, [pc, #44]	; (1dd8 <hci_cmd_done.isra.7+0x4c>)
    1dac:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1db0:	6843      	ldr	r3, [r0, #4]
    1db2:	b173      	cbz	r3, 1dd2 <hci_cmd_done.isra.7+0x46>
		cmd(buf)->status = status;
    1db4:	4628      	mov	r0, r5
    1db6:	f004 fe01 	bl	69bc <net_buf_id>
    1dba:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1dbe:	4628      	mov	r0, r5
    1dc0:	f004 fdfc 	bl	69bc <net_buf_id>
    1dc4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    1dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    1dcc:	6840      	ldr	r0, [r0, #4]
    1dce:	f005 be94 	b.w	7afa <_impl_k_sem_give>
    1dd2:	bd70      	pop	{r4, r5, r6, pc}
    1dd4:	20002a48 	.word	0x20002a48
    1dd8:	2000002c 	.word	0x2000002c

00001ddc <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    1ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    1dde:	4e0b      	ldr	r6, [pc, #44]	; (1e0c <id_find+0x30>)
{
    1de0:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    1de2:	2500      	movs	r5, #0
    1de4:	79f3      	ldrb	r3, [r6, #7]
    1de6:	b2ec      	uxtb	r4, r5
    1de8:	42a3      	cmp	r3, r4
    1dea:	d802      	bhi.n	1df2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    1dec:	f06f 0401 	mvn.w	r4, #1
    1df0:	e009      	b.n	1e06 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    1df2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    1df6:	2207      	movs	r2, #7
    1df8:	4431      	add	r1, r6
    1dfa:	4638      	mov	r0, r7
    1dfc:	f7ff ff51 	bl	1ca2 <memcmp>
    1e00:	3501      	adds	r5, #1
    1e02:	2800      	cmp	r0, #0
    1e04:	d1ee      	bne.n	1de4 <id_find+0x8>
}
    1e06:	4620      	mov	r0, r4
    1e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e0a:	bf00      	nop
    1e0c:	200027c0 	.word	0x200027c0

00001e10 <atomic_test_bit.constprop.22>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e10:	4b07      	ldr	r3, [pc, #28]	; (1e30 <atomic_test_bit.constprop.22+0x20>)
    1e12:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1e16:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e18:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1e1c:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1e22:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1e26:	fa43 f000 	asr.w	r0, r3, r0
}
    1e2a:	f000 0001 	and.w	r0, r0, #1
    1e2e:	4770      	bx	lr
    1e30:	200027c0 	.word	0x200027c0

00001e34 <bt_hci_cmd_create>:
{
    1e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e38:	4680      	mov	r8, r0
    1e3a:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1e3c:	4813      	ldr	r0, [pc, #76]	; (1e8c <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1e3e:	4d14      	ldr	r5, [pc, #80]	; (1e90 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1e44:	f004 fe48 	bl	6ad8 <net_buf_alloc_fixed>
    1e48:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1e4a:	f100 0608 	add.w	r6, r0, #8
    1e4e:	2100      	movs	r1, #0
    1e50:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1e52:	2700      	movs	r7, #0
    1e54:	f004 fe46 	bl	6ae4 <net_buf_simple_reserve>
    1e58:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1e5a:	4620      	mov	r0, r4
    1e5c:	f004 fdae 	bl	69bc <net_buf_id>
    1e60:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1e64:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1e68:	4620      	mov	r0, r4
    1e6a:	f004 fda7 	bl	69bc <net_buf_id>
    1e6e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1e72:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1e74:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1e76:	4630      	mov	r0, r6
    1e78:	f004 fe78 	bl	6b6c <net_buf_simple_add>
	hdr->param_len = param_len;
    1e7c:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1e80:	f8a0 8000 	strh.w	r8, [r0]
}
    1e84:	4620      	mov	r0, r4
    1e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e8a:	bf00      	nop
    1e8c:	20002a48 	.word	0x20002a48
    1e90:	2000002c 	.word	0x2000002c

00001e94 <bt_hci_cmd_send_sync>:
{
    1e94:	b570      	push	{r4, r5, r6, lr}
    1e96:	4615      	mov	r5, r2
    1e98:	b086      	sub	sp, #24
	if (!buf) {
    1e9a:	460c      	mov	r4, r1
    1e9c:	b919      	cbnz	r1, 1ea6 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1e9e:	f7ff ffc9 	bl	1e34 <bt_hci_cmd_create>
		if (!buf) {
    1ea2:	4604      	mov	r4, r0
    1ea4:	b368      	cbz	r0, 1f02 <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    1ea6:	2201      	movs	r2, #1
    1ea8:	2100      	movs	r1, #0
    1eaa:	4668      	mov	r0, sp
    1eac:	f005 fe1c 	bl	7ae8 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1eb0:	4620      	mov	r0, r4
    1eb2:	f004 fd83 	bl	69bc <net_buf_id>
    1eb6:	4e14      	ldr	r6, [pc, #80]	; (1f08 <bt_hci_cmd_send_sync+0x74>)
    1eb8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1ebc:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1ec0:	4620      	mov	r0, r4
    1ec2:	f004 fe4f 	bl	6b64 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1ec6:	4621      	mov	r1, r4
    1ec8:	4810      	ldr	r0, [pc, #64]	; (1f0c <bt_hci_cmd_send_sync+0x78>)
    1eca:	f004 fe0f 	bl	6aec <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    1ece:	f242 7110 	movw	r1, #10000	; 0x2710
    1ed2:	4668      	mov	r0, sp
    1ed4:	f005 fe37 	bl	7b46 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1ed8:	4620      	mov	r0, r4
    1eda:	f004 fd6f 	bl	69bc <net_buf_id>
    1ede:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    1ee2:	b130      	cbz	r0, 1ef2 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    1ee4:	4620      	mov	r0, r4
    1ee6:	f004 fe0f 	bl	6b08 <net_buf_unref>
		err = -EIO;
    1eea:	f06f 0004 	mvn.w	r0, #4
}
    1eee:	b006      	add	sp, #24
    1ef0:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    1ef2:	b10d      	cbz	r5, 1ef8 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    1ef4:	602c      	str	r4, [r5, #0]
    1ef6:	e7fa      	b.n	1eee <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    1ef8:	4620      	mov	r0, r4
    1efa:	f004 fe05 	bl	6b08 <net_buf_unref>
		err = 0;
    1efe:	4628      	mov	r0, r5
    1f00:	e7f5      	b.n	1eee <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    1f02:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1f06:	e7f2      	b.n	1eee <bt_hci_cmd_send_sync+0x5a>
    1f08:	2000002c 	.word	0x2000002c
    1f0c:	20002864 	.word	0x20002864

00001f10 <set_random_address>:
{
    1f10:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    1f12:	4d15      	ldr	r5, [pc, #84]	; (1f68 <set_random_address+0x58>)
    1f14:	2206      	movs	r2, #6
    1f16:	f105 010a 	add.w	r1, r5, #10
    1f1a:	4606      	mov	r6, r0
    1f1c:	f7ff fec1 	bl	1ca2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    1f20:	4604      	mov	r4, r0
    1f22:	b1d8      	cbz	r0, 1f5c <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    1f24:	2106      	movs	r1, #6
    1f26:	f242 0005 	movw	r0, #8197	; 0x2005
    1f2a:	f7ff ff83 	bl	1e34 <bt_hci_cmd_create>
	if (!buf) {
    1f2e:	4604      	mov	r4, r0
    1f30:	b1b0      	cbz	r0, 1f60 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    1f32:	2206      	movs	r2, #6
    1f34:	4631      	mov	r1, r6
    1f36:	3008      	adds	r0, #8
    1f38:	f004 fe1e 	bl	6b78 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    1f3c:	4621      	mov	r1, r4
    1f3e:	2200      	movs	r2, #0
    1f40:	f242 0005 	movw	r0, #8197	; 0x2005
    1f44:	f7ff ffa6 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    1f48:	4604      	mov	r4, r0
    1f4a:	b938      	cbnz	r0, 1f5c <set_random_address+0x4c>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1f4c:	2206      	movs	r2, #6
    1f4e:	4631      	mov	r1, r6
    1f50:	f105 000a 	add.w	r0, r5, #10
    1f54:	f7ff feba 	bl	1ccc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1f58:	2301      	movs	r3, #1
    1f5a:	726b      	strb	r3, [r5, #9]
}
    1f5c:	4620      	mov	r0, r4
    1f5e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    1f60:	f06f 0436 	mvn.w	r4, #54	; 0x36
    1f64:	e7fa      	b.n	1f5c <set_random_address+0x4c>
    1f66:	bf00      	nop
    1f68:	200027c0 	.word	0x200027c0

00001f6c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    1f6c:	2301      	movs	r3, #1
{
    1f6e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    1f70:	2106      	movs	r1, #6
{
    1f72:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    1f74:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    1f78:	f002 f85a 	bl	4030 <bt_rand>
	if (err) {
    1f7c:	b918      	cbnz	r0, 1f86 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    1f7e:	79a3      	ldrb	r3, [r4, #6]
    1f80:	f063 033f 	orn	r3, r3, #63	; 0x3f
    1f84:	71a3      	strb	r3, [r4, #6]
}
    1f86:	bd10      	pop	{r4, pc}

00001f88 <id_create.isra.12>:

static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    1f88:	b530      	push	{r4, r5, lr}
    1f8a:	4604      	mov	r4, r0
    1f8c:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    1f8e:	460d      	mov	r5, r1
    1f90:	b199      	cbz	r1, 1fba <id_create.isra.12+0x32>
    1f92:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    1f94:	2207      	movs	r2, #7
    1f96:	4669      	mov	r1, sp
    1f98:	4628      	mov	r0, r5
    1f9a:	9300      	str	r3, [sp, #0]
    1f9c:	f8cd 3003 	str.w	r3, [sp, #3]
    1fa0:	f7ff fe7f 	bl	1ca2 <memcmp>
    1fa4:	b148      	cbz	r0, 1fba <id_create.isra.12+0x32>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1fa6:	4810      	ldr	r0, [pc, #64]	; (1fe8 <id_create.isra.12+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    1fa8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    1fac:	2207      	movs	r2, #7
    1fae:	4629      	mov	r1, r5
    1fb0:	4420      	add	r0, r4
    1fb2:	f7ff fe8b 	bl	1ccc <memcpy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    1fb6:	b005      	add	sp, #20
    1fb8:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    1fba:	a802      	add	r0, sp, #8
    1fbc:	f7ff ffd6 	bl	1f6c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    1fc0:	a802      	add	r0, sp, #8
    1fc2:	f7ff ff0b 	bl	1ddc <id_find>
    1fc6:	2800      	cmp	r0, #0
    1fc8:	daf7      	bge.n	1fba <id_create.isra.12+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    1fca:	4807      	ldr	r0, [pc, #28]	; (1fe8 <id_create.isra.12+0x60>)
    1fcc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    1fd0:	4404      	add	r4, r0
    1fd2:	2207      	movs	r2, #7
    1fd4:	a902      	add	r1, sp, #8
    1fd6:	4620      	mov	r0, r4
    1fd8:	f7ff fe78 	bl	1ccc <memcpy>
		if (addr) {
    1fdc:	2d00      	cmp	r5, #0
    1fde:	d0ea      	beq.n	1fb6 <id_create.isra.12+0x2e>
    1fe0:	2207      	movs	r2, #7
    1fe2:	4621      	mov	r1, r4
    1fe4:	4628      	mov	r0, r5
    1fe6:	e7e4      	b.n	1fb2 <id_create.isra.12+0x2a>
    1fe8:	200027c0 	.word	0x200027c0

00001fec <bt_recv>:
{
    1fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (bt_buf_get_type(buf)) {
    1fee:	7d06      	ldrb	r6, [r0, #20]
    1ff0:	2e01      	cmp	r6, #1
{
    1ff2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    1ff4:	d10a      	bne.n	200c <bt_recv+0x20>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    1ff6:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    1ff8:	783b      	ldrb	r3, [r7, #0]
    1ffa:	3b0e      	subs	r3, #14
    1ffc:	2b01      	cmp	r3, #1
    1ffe:	d80a      	bhi.n	2016 <bt_recv+0x2a>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2000:	4040      	eors	r0, r0
    2002:	f380 8811 	msr	BASEPRI, r0
    2006:	f04f 0004 	mov.w	r0, #4
    200a:	df02      	svc	2
		net_buf_unref(buf);
    200c:	f004 fd7c 	bl	6b08 <net_buf_unref>
		return -EINVAL;
    2010:	f06f 0015 	mvn.w	r0, #21
    2014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(*hdr));
    2016:	f100 0508 	add.w	r5, r0, #8
    201a:	2102      	movs	r1, #2
    201c:	4628      	mov	r0, r5
    201e:	f004 fdb4 	bl	6b8a <net_buf_simple_pull>
	switch (hdr->evt) {
    2022:	783b      	ldrb	r3, [r7, #0]
    2024:	2b3e      	cmp	r3, #62	; 0x3e
    2026:	d103      	bne.n	2030 <bt_recv+0x44>
	net_buf_pull(buf, sizeof(*evt));
    2028:	4631      	mov	r1, r6
    202a:	4628      	mov	r0, r5
    202c:	f004 fdad 	bl	6b8a <net_buf_simple_pull>
	net_buf_unref(buf);
    2030:	4620      	mov	r0, r4
    2032:	f004 fd69 	bl	6b08 <net_buf_unref>
		return 0;
    2036:	2000      	movs	r0, #0
    2038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000203c <bt_recv_prio>:
{
    203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    203e:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2040:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2042:	2b01      	cmp	r3, #1
{
    2044:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2046:	d005      	beq.n	2054 <bt_recv_prio+0x18>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2048:	4040      	eors	r0, r0
    204a:	f380 8811 	msr	BASEPRI, r0
    204e:	f04f 0004 	mov.w	r0, #4
    2052:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2054:	8983      	ldrh	r3, [r0, #12]
    2056:	2b01      	cmp	r3, #1
    2058:	d9f6      	bls.n	2048 <bt_recv_prio+0xc>
    205a:	7833      	ldrb	r3, [r6, #0]
    205c:	3b0e      	subs	r3, #14
    205e:	2b01      	cmp	r3, #1
    2060:	d8f2      	bhi.n	2048 <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    2062:	f100 0508 	add.w	r5, r0, #8
    2066:	2102      	movs	r1, #2
    2068:	4628      	mov	r0, r5
    206a:	f004 fd8e 	bl	6b8a <net_buf_simple_pull>
	switch (hdr->evt) {
    206e:	7833      	ldrb	r3, [r6, #0]
    2070:	2b0e      	cmp	r3, #14
    2072:	d005      	beq.n	2080 <bt_recv_prio+0x44>
    2074:	2b0f      	cmp	r3, #15
    2076:	d017      	beq.n	20a8 <bt_recv_prio+0x6c>
		net_buf_unref(buf);
    2078:	4620      	mov	r0, r4
    207a:	f004 fd45 	bl	6b08 <net_buf_unref>
    207e:	e7e3      	b.n	2048 <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    2080:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2082:	2103      	movs	r1, #3
    2084:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    2086:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    2088:	f004 fd7f 	bl	6b8a <net_buf_simple_pull>
	status = buf->data[0];
    208c:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    208e:	4621      	mov	r1, r4
    2090:	7818      	ldrb	r0, [r3, #0]
    2092:	f7ff fe7b 	bl	1d8c <hci_cmd_done.isra.7>
	if (ncmd) {
    2096:	b116      	cbz	r6, 209e <bt_recv_prio+0x62>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    2098:	480a      	ldr	r0, [pc, #40]	; (20c4 <bt_recv_prio+0x88>)
    209a:	f005 fd2e 	bl	7afa <_impl_k_sem_give>
	net_buf_unref(buf);
    209e:	4620      	mov	r0, r4
    20a0:	f004 fd32 	bl	6b08 <net_buf_unref>
}
    20a4:	2000      	movs	r0, #0
    20a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    20a8:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    20aa:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    20ac:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    20ae:	4628      	mov	r0, r5
    20b0:	f004 fd6b 	bl	6b8a <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    20b4:	4621      	mov	r1, r4
    20b6:	7830      	ldrb	r0, [r6, #0]
    20b8:	f7ff fe68 	bl	1d8c <hci_cmd_done.isra.7>
	if (ncmd) {
    20bc:	2f00      	cmp	r7, #0
    20be:	d0ee      	beq.n	209e <bt_recv_prio+0x62>
    20c0:	e7ea      	b.n	2098 <bt_recv_prio+0x5c>
    20c2:	bf00      	nop
    20c4:	20002848 	.word	0x20002848

000020c8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    20c8:	4a08      	ldr	r2, [pc, #32]	; (20ec <bt_hci_driver_register+0x24>)
    20ca:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
    20ce:	b93b      	cbnz	r3, 20e0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    20d0:	68c1      	ldr	r1, [r0, #12]
    20d2:	b141      	cbz	r1, 20e6 <bt_hci_driver_register+0x1e>
    20d4:	6901      	ldr	r1, [r0, #16]
    20d6:	b131      	cbz	r1, 20e6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    20d8:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
	return 0;
    20dc:	4618      	mov	r0, r3
    20de:	4770      	bx	lr
		return -EALREADY;
    20e0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    20e4:	4770      	bx	lr
		return -EINVAL;
    20e6:	f06f 0015 	mvn.w	r0, #21
}
    20ea:	4770      	bx	lr
    20ec:	200027c0 	.word	0x200027c0

000020f0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, u8_t *irk)
{
    20f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20f2:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    20f4:	4606      	mov	r6, r0
    20f6:	b928      	cbnz	r0, 2104 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    20f8:	b1f4      	cbz	r4, 2138 <bt_id_create+0x48>
			return -EINVAL;
    20fa:	f06f 0515 	mvn.w	r5, #21
	}

	id_create(new_id, addr, irk);

	return new_id;
}
    20fe:	4628      	mov	r0, r5
    2100:	b003      	add	sp, #12
    2102:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    2104:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2106:	2207      	movs	r2, #7
    2108:	4669      	mov	r1, sp
    210a:	9300      	str	r3, [sp, #0]
    210c:	f8cd 3003 	str.w	r3, [sp, #3]
    2110:	f7ff fdc7 	bl	1ca2 <memcmp>
    2114:	2800      	cmp	r0, #0
    2116:	d0ef      	beq.n	20f8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    2118:	7833      	ldrb	r3, [r6, #0]
    211a:	2b01      	cmp	r3, #1
    211c:	d1ed      	bne.n	20fa <bt_id_create+0xa>
    211e:	79b3      	ldrb	r3, [r6, #6]
    2120:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2124:	2bc0      	cmp	r3, #192	; 0xc0
    2126:	d1e8      	bne.n	20fa <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    2128:	4630      	mov	r0, r6
    212a:	f7ff fe57 	bl	1ddc <id_find>
    212e:	2800      	cmp	r0, #0
    2130:	dbe2      	blt.n	20f8 <bt_id_create+0x8>
			return -EALREADY;
    2132:	f06f 0544 	mvn.w	r5, #68	; 0x44
    2136:	e7e2      	b.n	20fe <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    2138:	4f0c      	ldr	r7, [pc, #48]	; (216c <bt_id_create+0x7c>)
    213a:	79fc      	ldrb	r4, [r7, #7]
    213c:	2c01      	cmp	r4, #1
    213e:	d011      	beq.n	2164 <bt_id_create+0x74>
	new_id = bt_dev.id_count++;
    2140:	1c63      	adds	r3, r4, #1
    2142:	71fb      	strb	r3, [r7, #7]
    2144:	4625      	mov	r5, r4
	if (new_id == BT_ID_DEFAULT &&
    2146:	b944      	cbnz	r4, 215a <bt_id_create+0x6a>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    2148:	2001      	movs	r0, #1
    214a:	f7ff fe61 	bl	1e10 <atomic_test_bit.constprop.22>
	if (new_id == BT_ID_DEFAULT &&
    214e:	b920      	cbnz	r0, 215a <bt_id_create+0x6a>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2150:	2108      	movs	r1, #8
    2152:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2156:	f7ff fe08 	bl	1d6a <atomic_or>
	id_create(new_id, addr, irk);
    215a:	4631      	mov	r1, r6
    215c:	4620      	mov	r0, r4
    215e:	f7ff ff13 	bl	1f88 <id_create.isra.12>
	return new_id;
    2162:	e7cc      	b.n	20fe <bt_id_create+0xe>
		return -ENOMEM;
    2164:	f06f 050b 	mvn.w	r5, #11
    2168:	e7c9      	b.n	20fe <bt_id_create+0xe>
    216a:	bf00      	nop
    216c:	200027c0 	.word	0x200027c0

00002170 <bt_setup_id_addr>:
#elif defined(CONFIG_BT_CTLR)
uint8_t bt_read_static_addr(bt_addr_le_t *addr);
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_id_addr(void)
{
    2170:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    2174:	4d22      	ldr	r5, [pc, #136]	; (2200 <bt_setup_id_addr+0x90>)
    2176:	79e9      	ldrb	r1, [r5, #7]
    2178:	2900      	cmp	r1, #0
    217a:	d13b      	bne.n	21f4 <bt_setup_id_addr+0x84>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    217c:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    2180:	07db      	lsls	r3, r3, #31
    2182:	d40d      	bmi.n	21a0 <bt_setup_id_addr+0x30>
		return 0;
    2184:	2700      	movs	r7, #0
		bt_addr_le_t addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs);
    2186:	71ef      	strb	r7, [r5, #7]
		if (bt_dev.id_count) {
    2188:	2f00      	cmp	r7, #0
    218a:	d033      	beq.n	21f4 <bt_setup_id_addr+0x84>
    218c:	2400      	movs	r4, #0
			int i;

			for (i = 0; i < bt_dev.id_count; i++) {
    218e:	79eb      	ldrb	r3, [r5, #7]
    2190:	429c      	cmp	r4, r3
    2192:	db26      	blt.n	21e2 <bt_setup_id_addr+0x72>
				id_create(i, &addrs[i], NULL);
			}

			return set_random_address(&bt_dev.id_addr[0].a);
    2194:	481b      	ldr	r0, [pc, #108]	; (2204 <bt_setup_id_addr+0x94>)
    2196:	f7ff febb 	bl	1f10 <set_random_address>
		}
	}
#endif
	return bt_id_create(NULL, NULL);
}
    219a:	b004      	add	sp, #16
    219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    21a0:	aa01      	add	r2, sp, #4
    21a2:	f64f 4009 	movw	r0, #64521	; 0xfc09
    21a6:	f7ff fe75 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    21aa:	2800      	cmp	r0, #0
    21ac:	d1ea      	bne.n	2184 <bt_setup_id_addr+0x14>
	rp = (void *)rsp->data;
    21ae:	9b01      	ldr	r3, [sp, #4]
    21b0:	689e      	ldr	r6, [r3, #8]
	cnt = min(rp->num_addrs, CONFIG_BT_ID_MAX);
    21b2:	7874      	ldrb	r4, [r6, #1]
    21b4:	3400      	adds	r4, #0
    21b6:	bf18      	it	ne
    21b8:	2401      	movne	r4, #1
    21ba:	4627      	mov	r7, r4
		addr[i].type = BT_ADDR_LE_RANDOM;
    21bc:	f04f 0801 	mov.w	r8, #1
		bt_addr_copy(&addr[i].a, &rp->a[i].bdaddr);
    21c0:	3602      	adds	r6, #2
	for (i = 0; i < cnt; i++) {
    21c2:	4284      	cmp	r4, r0
    21c4:	dc03      	bgt.n	21ce <bt_setup_id_addr+0x5e>
	net_buf_unref(rsp);
    21c6:	9801      	ldr	r0, [sp, #4]
    21c8:	f004 fc9e 	bl	6b08 <net_buf_unref>
    21cc:	e7db      	b.n	2186 <bt_setup_id_addr+0x16>
	memcpy(dst, src, sizeof(*dst));
    21ce:	2206      	movs	r2, #6
    21d0:	4631      	mov	r1, r6
    21d2:	f10d 0009 	add.w	r0, sp, #9
		addr[i].type = BT_ADDR_LE_RANDOM;
    21d6:	f88d 8008 	strb.w	r8, [sp, #8]
    21da:	f7ff fd77 	bl	1ccc <memcpy>
	for (i = 0; i < cnt; i++) {
    21de:	2001      	movs	r0, #1
    21e0:	e7ef      	b.n	21c2 <bt_setup_id_addr+0x52>
				id_create(i, &addrs[i], NULL);
    21e2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    21e6:	ab02      	add	r3, sp, #8
    21e8:	b2e0      	uxtb	r0, r4
    21ea:	4419      	add	r1, r3
    21ec:	f7ff fecc 	bl	1f88 <id_create.isra.12>
			for (i = 0; i < bt_dev.id_count; i++) {
    21f0:	3401      	adds	r4, #1
    21f2:	e7cc      	b.n	218e <bt_setup_id_addr+0x1e>
	return bt_id_create(NULL, NULL);
    21f4:	2100      	movs	r1, #0
    21f6:	4608      	mov	r0, r1
    21f8:	f7ff ff7a 	bl	20f0 <bt_id_create>
    21fc:	e7cd      	b.n	219a <bt_setup_id_addr+0x2a>
    21fe:	bf00      	nop
    2200:	200027c0 	.word	0x200027c0
    2204:	200027c1 	.word	0x200027c1

00002208 <bt_init>:
{
    2208:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    220a:	4dbc      	ldr	r5, [pc, #752]	; (24fc <bt_init+0x2f4>)
    220c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    2210:	6899      	ldr	r1, [r3, #8]
    2212:	f011 0101 	ands.w	r1, r1, #1
{
    2216:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2218:	d122      	bne.n	2260 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    221a:	aa01      	add	r2, sp, #4
    221c:	f640 4003 	movw	r0, #3075	; 0xc03
    2220:	f7ff fe38 	bl	1e94 <bt_hci_cmd_send_sync>
		if (err) {
    2224:	4604      	mov	r4, r0
    2226:	2800      	cmp	r0, #0
    2228:	f040 8140 	bne.w	24ac <bt_init+0x2a4>
	u8_t status = buf->data[0];
    222c:	9b01      	ldr	r3, [sp, #4]
    222e:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2230:	781b      	ldrb	r3, [r3, #0]
    2232:	b993      	cbnz	r3, 225a <bt_init+0x52>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2234:	f3bf 8f5b 	dmb	ish
    2238:	462b      	mov	r3, r5
    223a:	f853 2f70 	ldr.w	r2, [r3, #112]!
    223e:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2242:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2246:	f3bf 8f5b 	dmb	ish
    224a:	e853 1f00 	ldrex	r1, [r3]
    224e:	e843 2000 	strex	r0, r2, [r3]
    2252:	2800      	cmp	r0, #0
    2254:	d1f9      	bne.n	224a <bt_init+0x42>
    2256:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    225a:	9801      	ldr	r0, [sp, #4]
    225c:	f004 fc54 	bl	6b08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2260:	aa01      	add	r2, sp, #4
    2262:	2100      	movs	r1, #0
    2264:	f241 0003 	movw	r0, #4099	; 0x1003
    2268:	f7ff fe14 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    226c:	4604      	mov	r4, r0
    226e:	2800      	cmp	r0, #0
    2270:	f040 811c 	bne.w	24ac <bt_init+0x2a4>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2274:	9b01      	ldr	r3, [sp, #4]
    2276:	48a2      	ldr	r0, [pc, #648]	; (2500 <bt_init+0x2f8>)
    2278:	6899      	ldr	r1, [r3, #8]
    227a:	2208      	movs	r2, #8
    227c:	3101      	adds	r1, #1
    227e:	f7ff fd25 	bl	1ccc <memcpy>
	net_buf_unref(rsp);
    2282:	9801      	ldr	r0, [sp, #4]
    2284:	f004 fc40 	bl	6b08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2288:	4621      	mov	r1, r4
    228a:	aa01      	add	r2, sp, #4
    228c:	f241 0001 	movw	r0, #4097	; 0x1001
    2290:	f7ff fe00 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    2294:	4604      	mov	r4, r0
    2296:	2800      	cmp	r0, #0
    2298:	f040 8108 	bne.w	24ac <bt_init+0x2a4>
	read_local_ver_complete(rsp);
    229c:	9801      	ldr	r0, [sp, #4]
    229e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    22a0:	785a      	ldrb	r2, [r3, #1]
    22a2:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    22a4:	78d9      	ldrb	r1, [r3, #3]
    22a6:	789a      	ldrb	r2, [r3, #2]
    22a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    22ac:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    22ae:	791a      	ldrb	r2, [r3, #4]
    22b0:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    22b2:	7a19      	ldrb	r1, [r3, #8]
    22b4:	79da      	ldrb	r2, [r3, #7]
    22b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    22ba:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    22bc:	795a      	ldrb	r2, [r3, #5]
    22be:	799b      	ldrb	r3, [r3, #6]
    22c0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    22c4:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    22c6:	f004 fc1f 	bl	6b08 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    22ca:	2003      	movs	r0, #3
    22cc:	f7ff fda0 	bl	1e10 <atomic_test_bit.constprop.22>
    22d0:	4601      	mov	r1, r0
    22d2:	bb58      	cbnz	r0, 232c <bt_init+0x124>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    22d4:	aa01      	add	r2, sp, #4
    22d6:	f241 0009 	movw	r0, #4105	; 0x1009
    22da:	f7ff fddb 	bl	1e94 <bt_hci_cmd_send_sync>
		if (err) {
    22de:	4604      	mov	r4, r0
    22e0:	2800      	cmp	r0, #0
    22e2:	f040 80e3 	bne.w	24ac <bt_init+0x2a4>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    22e6:	9b01      	ldr	r3, [sp, #4]
    22e8:	9002      	str	r0, [sp, #8]
    22ea:	689e      	ldr	r6, [r3, #8]
    22ec:	f8ad 000c 	strh.w	r0, [sp, #12]
    22f0:	3601      	adds	r6, #1
	return memcmp(a, b, sizeof(*a));
    22f2:	2206      	movs	r2, #6
    22f4:	a902      	add	r1, sp, #8
    22f6:	4630      	mov	r0, r6
    22f8:	f7ff fcd3 	bl	1ca2 <memcmp>
    22fc:	b198      	cbz	r0, 2326 <bt_init+0x11e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    22fe:	4b81      	ldr	r3, [pc, #516]	; (2504 <bt_init+0x2fc>)
    2300:	6818      	ldr	r0, [r3, #0]
    2302:	9004      	str	r0, [sp, #16]
    2304:	889b      	ldrh	r3, [r3, #4]
    2306:	f8ad 3014 	strh.w	r3, [sp, #20]
    230a:	2206      	movs	r2, #6
    230c:	a904      	add	r1, sp, #16
    230e:	4630      	mov	r0, r6
    2310:	f7ff fcc7 	bl	1ca2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    2314:	b138      	cbz	r0, 2326 <bt_init+0x11e>
	memcpy(dst, src, sizeof(*dst));
    2316:	2206      	movs	r2, #6
    2318:	4631      	mov	r1, r6
    231a:	487b      	ldr	r0, [pc, #492]	; (2508 <bt_init+0x300>)
    231c:	f7ff fcd6 	bl	1ccc <memcpy>
	bt_dev.id_count = 1U;
    2320:	2301      	movs	r3, #1
	bt_dev.id_addr[0].type = BT_ADDR_LE_PUBLIC;
    2322:	702c      	strb	r4, [r5, #0]
	bt_dev.id_count = 1U;
    2324:	71eb      	strb	r3, [r5, #7]
		net_buf_unref(rsp);
    2326:	9801      	ldr	r0, [sp, #4]
    2328:	f004 fbee 	bl	6b08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    232c:	aa01      	add	r2, sp, #4
    232e:	2100      	movs	r1, #0
    2330:	f241 0002 	movw	r0, #4098	; 0x1002
    2334:	f7ff fdae 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    2338:	4604      	mov	r4, r0
    233a:	2800      	cmp	r0, #0
    233c:	f040 80b6 	bne.w	24ac <bt_init+0x2a4>
	memcpy(bt_dev.supported_commands, rp->commands,
    2340:	9b01      	ldr	r3, [sp, #4]
    2342:	4872      	ldr	r0, [pc, #456]	; (250c <bt_init+0x304>)
    2344:	6899      	ldr	r1, [r3, #8]
    2346:	2240      	movs	r2, #64	; 0x40
    2348:	3101      	adds	r1, #1
    234a:	f7ff fcbf 	bl	1ccc <memcpy>
	net_buf_unref(rsp);
    234e:	9801      	ldr	r0, [sp, #4]
    2350:	f004 fbda 	bl	6b08 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2354:	7f2b      	ldrb	r3, [r5, #28]
    2356:	0659      	lsls	r1, r3, #25
    2358:	f140 80c0 	bpl.w	24dc <bt_init+0x2d4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    235c:	4621      	mov	r1, r4
    235e:	aa01      	add	r2, sp, #4
    2360:	f242 0003 	movw	r0, #8195	; 0x2003
    2364:	f7ff fd96 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    2368:	4604      	mov	r4, r0
    236a:	2800      	cmp	r0, #0
    236c:	f040 809e 	bne.w	24ac <bt_init+0x2a4>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2370:	9b01      	ldr	r3, [sp, #4]
    2372:	4867      	ldr	r0, [pc, #412]	; (2510 <bt_init+0x308>)
    2374:	6899      	ldr	r1, [r3, #8]
    2376:	2208      	movs	r2, #8
    2378:	3101      	adds	r1, #1
    237a:	f7ff fca7 	bl	1ccc <memcpy>
	net_buf_unref(rsp);
    237e:	9801      	ldr	r0, [sp, #4]
    2380:	f004 fbc2 	bl	6b08 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2384:	7f2b      	ldrb	r3, [r5, #28]
    2386:	069a      	lsls	r2, r3, #26
    2388:	d575      	bpl.n	2476 <bt_init+0x26e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    238a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    238e:	071b      	lsls	r3, r3, #28
    2390:	f100 808f 	bmi.w	24b2 <bt_init+0x2aa>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2394:	2108      	movs	r1, #8
    2396:	f242 0001 	movw	r0, #8193	; 0x2001
    239a:	f7ff fd4b 	bl	1e34 <bt_hci_cmd_create>
	if (!buf) {
    239e:	4604      	mov	r4, r0
    23a0:	2800      	cmp	r0, #0
    23a2:	d06f      	beq.n	2484 <bt_init+0x27c>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    23a4:	2108      	movs	r1, #8
    23a6:	4408      	add	r0, r1
    23a8:	f004 fbe0 	bl	6b6c <net_buf_simple_add>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    23ac:	2602      	movs	r6, #2
	dst[1] = val >> 8;
    23ae:	2200      	movs	r2, #0
	dst[0] = val;
    23b0:	7006      	strb	r6, [r0, #0]
	dst[1] = val >> 8;
    23b2:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    23b4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    23b6:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    23b8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    23ba:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    23bc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    23be:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    23c0:	4621      	mov	r1, r4
    23c2:	f242 0001 	movw	r0, #8193	; 0x2001
    23c6:	f7ff fd65 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    23ca:	4604      	mov	r4, r0
    23cc:	2800      	cmp	r0, #0
    23ce:	d16d      	bne.n	24ac <bt_init+0x2a4>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    23d0:	2108      	movs	r1, #8
    23d2:	f640 4001 	movw	r0, #3073	; 0xc01
    23d6:	f7ff fd2d 	bl	1e34 <bt_hci_cmd_create>
	if (!buf) {
    23da:	4607      	mov	r7, r0
    23dc:	2800      	cmp	r0, #0
    23de:	d051      	beq.n	2484 <bt_init+0x27c>
	ev = net_buf_add(buf, sizeof(*ev));
    23e0:	2108      	movs	r1, #8
    23e2:	4408      	add	r0, r1
    23e4:	f004 fbc2 	bl	6b6c <net_buf_simple_add>
    23e8:	2380      	movs	r3, #128	; 0x80
    23ea:	7043      	strb	r3, [r0, #1]
    23ec:	2320      	movs	r3, #32
	dst[0] = val;
    23ee:	7004      	strb	r4, [r0, #0]
    23f0:	7084      	strb	r4, [r0, #2]
    23f2:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    23f4:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    23f6:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    23f8:	70c6      	strb	r6, [r0, #3]
    23fa:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    23fc:	4622      	mov	r2, r4
    23fe:	4639      	mov	r1, r7
    2400:	f640 4001 	movw	r0, #3073	; 0xc01
    2404:	f7ff fd46 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    2408:	4604      	mov	r4, r0
    240a:	2800      	cmp	r0, #0
    240c:	d14e      	bne.n	24ac <bt_init+0x2a4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    240e:	4601      	mov	r1, r0
    2410:	aa01      	add	r2, sp, #4
    2412:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2416:	f7ff fd3d 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    241a:	bb20      	cbnz	r0, 2466 <bt_init+0x25e>
	net_buf_unref(rsp);
    241c:	9801      	ldr	r0, [sp, #4]
    241e:	f004 fb73 	bl	6b08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2422:	aa01      	add	r2, sp, #4
    2424:	4621      	mov	r1, r4
    2426:	f64f 4002 	movw	r0, #64514	; 0xfc02
    242a:	f7ff fd33 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    242e:	b9d0      	cbnz	r0, 2466 <bt_init+0x25e>
	rp.cmds = (void *)rsp->data;
    2430:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2432:	4838      	ldr	r0, [pc, #224]	; (2514 <bt_init+0x30c>)
    2434:	6899      	ldr	r1, [r3, #8]
    2436:	4632      	mov	r2, r6
    2438:	3101      	adds	r1, #1
    243a:	f7ff fc47 	bl	1ccc <memcpy>
	net_buf_unref(rsp);
    243e:	9801      	ldr	r0, [sp, #4]
    2440:	f004 fb62 	bl	6b08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2444:	aa01      	add	r2, sp, #4
    2446:	4621      	mov	r1, r4
    2448:	f64f 4003 	movw	r0, #64515	; 0xfc03
    244c:	f7ff fd22 	bl	1e94 <bt_hci_cmd_send_sync>
	if (err) {
    2450:	b948      	cbnz	r0, 2466 <bt_init+0x25e>
	rp.feat = (void *)rsp->data;
    2452:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2454:	4830      	ldr	r0, [pc, #192]	; (2518 <bt_init+0x310>)
    2456:	6899      	ldr	r1, [r3, #8]
    2458:	2201      	movs	r2, #1
    245a:	4411      	add	r1, r2
    245c:	f7ff fc36 	bl	1ccc <memcpy>
	net_buf_unref(rsp);
    2460:	9801      	ldr	r0, [sp, #4]
    2462:	f004 fb51 	bl	6b08 <net_buf_unref>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    2466:	79eb      	ldrb	r3, [r5, #7]
    2468:	2b00      	cmp	r3, #0
    246a:	d13a      	bne.n	24e2 <bt_init+0x2da>
		err = bt_setup_id_addr();
    246c:	f7ff fe80 	bl	2170 <bt_setup_id_addr>
		if (err) {
    2470:	b3b8      	cbz	r0, 24e2 <bt_init+0x2da>
    2472:	4604      	mov	r4, r0
    2474:	e01a      	b.n	24ac <bt_init+0x2a4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2476:	2102      	movs	r1, #2
    2478:	f640 406d 	movw	r0, #3181	; 0xc6d
    247c:	f7ff fcda 	bl	1e34 <bt_hci_cmd_create>
		if (!buf) {
    2480:	4606      	mov	r6, r0
    2482:	b910      	cbnz	r0, 248a <bt_init+0x282>
		return -ENOBUFS;
    2484:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2488:	e010      	b.n	24ac <bt_init+0x2a4>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    248a:	2102      	movs	r1, #2
    248c:	3008      	adds	r0, #8
    248e:	f004 fb6d 	bl	6b6c <net_buf_simple_add>
		cp_le->le = 0x01;
    2492:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2494:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2496:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2498:	4622      	mov	r2, r4
    249a:	4631      	mov	r1, r6
    249c:	f640 406d 	movw	r0, #3181	; 0xc6d
    24a0:	f7ff fcf8 	bl	1e94 <bt_hci_cmd_send_sync>
		if (err) {
    24a4:	4604      	mov	r4, r0
    24a6:	2800      	cmp	r0, #0
    24a8:	f43f af6f 	beq.w	238a <bt_init+0x182>
}
    24ac:	4620      	mov	r0, r4
    24ae:	b007      	add	sp, #28
    24b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    24b2:	aa01      	add	r2, sp, #4
    24b4:	2100      	movs	r1, #0
    24b6:	f242 001c 	movw	r0, #8220	; 0x201c
    24ba:	f7ff fceb 	bl	1e94 <bt_hci_cmd_send_sync>
		if (err) {
    24be:	4604      	mov	r4, r0
    24c0:	2800      	cmp	r0, #0
    24c2:	d1f3      	bne.n	24ac <bt_init+0x2a4>
		le_read_supp_states_complete(rsp);
    24c4:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    24c6:	6883      	ldr	r3, [r0, #8]
    24c8:	f853 2f01 	ldr.w	r2, [r3, #1]!
    24cc:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    24ce:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    24d2:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    24d6:	f004 fb17 	bl	6b08 <net_buf_unref>
    24da:	e75b      	b.n	2394 <bt_init+0x18c>
		return -ENODEV;
    24dc:	f06f 0412 	mvn.w	r4, #18
    24e0:	e7e4      	b.n	24ac <bt_init+0x2a4>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    24e2:	2102      	movs	r1, #2
    24e4:	480d      	ldr	r0, [pc, #52]	; (251c <bt_init+0x314>)
    24e6:	f7ff fc40 	bl	1d6a <atomic_or>
	if (bt_dev.id_count > 0) {
    24ea:	79eb      	ldrb	r3, [r5, #7]
    24ec:	2b00      	cmp	r3, #0
    24ee:	d0dd      	beq.n	24ac <bt_init+0x2a4>
    24f0:	2104      	movs	r1, #4
    24f2:	480a      	ldr	r0, [pc, #40]	; (251c <bt_init+0x314>)
    24f4:	f7ff fc39 	bl	1d6a <atomic_or>
    24f8:	e7d8      	b.n	24ac <bt_init+0x2a4>
    24fa:	bf00      	nop
    24fc:	200027c0 	.word	0x200027c0
    2500:	200027d8 	.word	0x200027d8
    2504:	000084dc 	.word	0x000084dc
    2508:	200027c1 	.word	0x200027c1
    250c:	200027e0 	.word	0x200027e0
    2510:	20002838 	.word	0x20002838
    2514:	20002821 	.word	0x20002821
    2518:	20002820 	.word	0x20002820
    251c:	20002830 	.word	0x20002830

00002520 <init_work>:
{
    2520:	b510      	push	{r4, lr}
	err = bt_init();
    2522:	f7ff fe71 	bl	2208 <bt_init>
	if (ready_cb) {
    2526:	4b03      	ldr	r3, [pc, #12]	; (2534 <init_work+0x14>)
    2528:	681b      	ldr	r3, [r3, #0]
    252a:	b113      	cbz	r3, 2532 <init_work+0x12>
}
    252c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2530:	4718      	bx	r3
    2532:	bd10      	pop	{r4, pc}
    2534:	2000003c 	.word	0x2000003c

00002538 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2538:	b538      	push	{r3, r4, r5, lr}
    253a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    253c:	4805      	ldr	r0, [pc, #20]	; (2554 <bt_buf_get_rx+0x1c>)
    253e:	f004 facb 	bl	6ad8 <net_buf_alloc_fixed>
#endif

	if (buf) {
    2542:	4604      	mov	r4, r0
    2544:	b120      	cbz	r0, 2550 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2546:	2100      	movs	r1, #0
    2548:	3008      	adds	r0, #8
    254a:	f004 facb 	bl	6ae4 <net_buf_simple_reserve>
    254e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2550:	4620      	mov	r0, r4
    2552:	bd38      	pop	{r3, r4, r5, pc}
    2554:	20002a68 	.word	0x20002a68

00002558 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    2558:	b510      	push	{r4, lr}
    255a:	4601      	mov	r1, r0
    255c:	f04f 0320 	mov.w	r3, #32
    2560:	f3ef 8011 	mrs	r0, BASEPRI
    2564:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    2568:	4a0b      	ldr	r2, [pc, #44]	; (2598 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    256a:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    256c:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    2570:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2574:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    2578:	b924      	cbnz	r4, 2584 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    257a:	2001      	movs	r0, #1
}
    257c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2580:	f7ff bfda 	b.w	2538 <bt_buf_get_rx>
    2584:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2586:	f104 0008 	add.w	r0, r4, #8
    258a:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    258c:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    258e:	4619      	mov	r1, r3
    2590:	f004 faa8 	bl	6ae4 <net_buf_simple_reserve>
}
    2594:	4620      	mov	r0, r4
    2596:	bd10      	pop	{r4, pc}
    2598:	200027c0 	.word	0x200027c0

0000259c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    259c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    259e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    25a0:	1dc3      	adds	r3, r0, #7
{
    25a2:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    25a4:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    25a8:	1e50      	subs	r0, r2, #1
{
    25aa:	460e      	mov	r6, r1
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    25ac:	b280      	uxth	r0, r0
{
    25ae:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    25b0:	801a      	strh	r2, [r3, #0]
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    25b2:	2100      	movs	r1, #0
    25b4:	2204      	movs	r2, #4
    25b6:	fb06 5000 	mla	r0, r6, r0, r5
    25ba:	f7ff fbb3 	bl	1d24 <memset>
    25be:	3c02      	subs	r4, #2
    25c0:	b2a4      	uxth	r4, r4
		     sizeof(mem_pool));
	while (mem_count--) {
    25c2:	f64f 77ff 	movw	r7, #65535	; 0xffff
    25c6:	42bc      	cmp	r4, r7
    25c8:	d101      	bne.n	25ce <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    25ca:	b003      	add	sp, #12
    25cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    25ce:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    25d2:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    25d4:	2204      	movs	r2, #4
    25d6:	1b80      	subs	r0, r0, r6
    25d8:	eb0d 0102 	add.w	r1, sp, r2
    25dc:	4428      	add	r0, r5
    25de:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    25e0:	9301      	str	r3, [sp, #4]
    25e2:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    25e4:	f7ff fb72 	bl	1ccc <memcpy>
    25e8:	e7ed      	b.n	25c6 <mem_init+0x2a>

000025ea <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    25ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    25ec:	6805      	ldr	r5, [r0, #0]
{
    25ee:	4606      	mov	r6, r0
	if (*mem_head) {
    25f0:	b195      	cbz	r5, 2618 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    25f2:	1deb      	adds	r3, r5, #7
    25f4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    25f8:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    25fa:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    25fc:	4629      	mov	r1, r5
    25fe:	eb0d 0002 	add.w	r0, sp, r2
    2602:	f7ff fb63 	bl	1ccc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    2606:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    2608:	3c01      	subs	r4, #1
    260a:	b2a4      	uxth	r4, r4
		if (head) {
    260c:	b11b      	cbz	r3, 2616 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    260e:	1dda      	adds	r2, r3, #7
    2610:	f022 0203 	bic.w	r2, r2, #3
    2614:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    2616:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    2618:	4628      	mov	r0, r5
    261a:	b002      	add	sp, #8
    261c:	bd70      	pop	{r4, r5, r6, pc}

0000261e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    261e:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    2620:	680c      	ldr	r4, [r1, #0]
{
    2622:	4606      	mov	r6, r0
    2624:	460d      	mov	r5, r1
	if (*mem_head) {
    2626:	b11c      	cbz	r4, 2630 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2628:	1de3      	adds	r3, r4, #7
    262a:	f023 0303 	bic.w	r3, r3, #3
    262e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    2630:	2204      	movs	r2, #4
    2632:	4629      	mov	r1, r5
    2634:	4630      	mov	r0, r6
    2636:	f7ff fb49 	bl	1ccc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    263a:	1df2      	adds	r2, r6, #7
    263c:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    2640:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2642:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    2644:	602e      	str	r6, [r5, #0]
    2646:	bd70      	pop	{r4, r5, r6, pc}

00002648 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    2648:	fb02 0001 	mla	r0, r2, r1, r0
    264c:	4770      	bx	lr

0000264e <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    264e:	b510      	push	{r4, lr}
	src += len;
    2650:	4411      	add	r1, r2
    2652:	3801      	subs	r0, #1
	while (len--) {
    2654:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2658:	3a01      	subs	r2, #1
    265a:	b292      	uxth	r2, r2
    265c:	429a      	cmp	r2, r3
    265e:	d100      	bne.n	2662 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    2660:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    2662:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    2666:	f800 4f01 	strb.w	r4, [r0, #1]!
    266a:	e7f5      	b.n	2658 <mem_rcopy+0xa>

0000266c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    266c:	6010      	str	r0, [r2, #0]
    266e:	6008      	str	r0, [r1, #0]

	return link;
}
    2670:	4770      	bx	lr

00002672 <memq_enqueue>:
 * @param mem[in]      Memory buffer. Will be owned by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    2672:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    2674:	6814      	ldr	r4, [r2, #0]
    2676:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    2678:	6814      	ldr	r4, [r2, #0]
    267a:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
    267c:	6010      	str	r0, [r2, #0]

	return link;
}
    267e:	bd10      	pop	{r4, pc}

00002680 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    2680:	4288      	cmp	r0, r1
    2682:	d003      	beq.n	268c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    2684:	b11a      	cbz	r2, 268e <memq_peek+0xe>
		*mem = head->mem;
    2686:	6843      	ldr	r3, [r0, #4]
    2688:	6013      	str	r3, [r2, #0]
    268a:	4770      	bx	lr
		return NULL;
    268c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    268e:	4770      	bx	lr

00002690 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    2690:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    2692:	4283      	cmp	r3, r0
    2694:	d009      	beq.n	26aa <memq_dequeue+0x1a>
	if (mem) {
    2696:	b122      	cbz	r2, 26a2 <memq_dequeue+0x12>
		*mem = head->mem;
    2698:	6858      	ldr	r0, [r3, #4]
    269a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    269c:	681a      	ldr	r2, [r3, #0]
    269e:	600a      	str	r2, [r1, #0]

	return old_head;
    26a0:	e001      	b.n	26a6 <memq_dequeue+0x16>
	if (old_head == NULL) {
    26a2:	2b00      	cmp	r3, #0
    26a4:	d1fa      	bne.n	269c <memq_dequeue+0xc>
}
    26a6:	4618      	mov	r0, r3
    26a8:	4770      	bx	lr
		return NULL; /* queue is empty */
    26aa:	2300      	movs	r3, #0
    26ac:	e7fb      	b.n	26a6 <memq_dequeue+0x16>
	...

000026b0 <mayfly_init>:
#if defined(CONFIG_MAYFLY_UT)
static u8_t _state;
#endif /* CONFIG_MAYFLY_UT */

void mayfly_init(void)
{
    26b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    26b4:	4f11      	ldr	r7, [pc, #68]	; (26fc <mayfly_init+0x4c>)
    26b6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2700 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    26ba:	2604      	movs	r6, #4
	while (callee_id--) {
    26bc:	3e01      	subs	r6, #1
    26be:	b2f6      	uxtb	r6, r6
    26c0:	2eff      	cmp	r6, #255	; 0xff
    26c2:	d019      	beq.n	26f8 <mayfly_init+0x48>
    26c4:	b233      	sxth	r3, r6
    26c6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    26ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26ce:	011d      	lsls	r5, r3, #4
    26d0:	2404      	movs	r4, #4
    26d2:	f04f 0a0c 	mov.w	sl, #12
    26d6:	e00a      	b.n	26ee <mayfly_init+0x3e>
    26d8:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    26dc:	1d0a      	adds	r2, r1, #4
    26de:	eb04 0008 	add.w	r0, r4, r8
    26e2:	443a      	add	r2, r7
    26e4:	4439      	add	r1, r7
    26e6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    26ea:	f7ff ffbf 	bl	266c <memq_init>
		while (caller_id--) {
    26ee:	3c01      	subs	r4, #1
    26f0:	b2e4      	uxtb	r4, r4
    26f2:	2cff      	cmp	r4, #255	; 0xff
    26f4:	d1f0      	bne.n	26d8 <mayfly_init+0x28>
    26f6:	e7e1      	b.n	26bc <mayfly_init+0xc>
    26f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    26fc:	200000c4 	.word	0x200000c4
    2700:	20000040 	.word	0x20000040

00002704 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    2704:	b4f0      	push	{r4, r5, r6, r7}
    2706:	4b12      	ldr	r3, [pc, #72]	; (2750 <mayfly_enable+0x4c>)
    2708:	4605      	mov	r5, r0
    270a:	460f      	mov	r7, r1
    270c:	260c      	movs	r6, #12
    270e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    2710:	b172      	cbz	r2, 2730 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    2712:	4361      	muls	r1, r4
    2714:	fb06 1400 	mla	r4, r6, r0, r1
    2718:	4423      	add	r3, r4
    271a:	7a59      	ldrb	r1, [r3, #9]
    271c:	7a18      	ldrb	r0, [r3, #8]
    271e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    2720:	bf04      	itt	eq
    2722:	3101      	addeq	r1, #1
    2724:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    2726:	4628      	mov	r0, r5
    2728:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    272a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    272c:	f004 b8ac 	b.w	6888 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    2730:	434c      	muls	r4, r1
    2732:	fb06 4400 	mla	r4, r6, r0, r4
    2736:	4423      	add	r3, r4
    2738:	7a9c      	ldrb	r4, [r3, #10]
    273a:	7ada      	ldrb	r2, [r3, #11]
    273c:	42a2      	cmp	r2, r4
    273e:	d104      	bne.n	274a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    2740:	3201      	adds	r2, #1
    2742:	729a      	strb	r2, [r3, #10]
}
    2744:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    2746:	f004 b8cd 	b.w	68e4 <mayfly_pend>
}
    274a:	bcf0      	pop	{r4, r5, r6, r7}
    274c:	4770      	bx	lr
    274e:	bf00      	nop
    2750:	200000c4 	.word	0x200000c4

00002754 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    2754:	b570      	push	{r4, r5, r6, lr}
    2756:	4606      	mov	r6, r0
    2758:	460d      	mov	r5, r1
    275a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    275c:	b1a2      	cbz	r2, 2788 <mayfly_enqueue+0x34>
    275e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    2760:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    2762:	7820      	ldrb	r0, [r4, #0]
    2764:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    2766:	f010 0003 	ands.w	r0, r0, #3
    276a:	d02c      	beq.n	27c6 <mayfly_enqueue+0x72>
		if (chain) {
    276c:	b31b      	cbz	r3, 27b6 <mayfly_enqueue+0x62>
			if (state != 1) {
    276e:	2801      	cmp	r0, #1
    2770:	d028      	beq.n	27c4 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    2772:	3201      	adds	r2, #1
    2774:	b2d2      	uxtb	r2, r2
    2776:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1;
    2778:	4b1c      	ldr	r3, [pc, #112]	; (27ec <mayfly_enqueue+0x98>)
    277a:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    277c:	4629      	mov	r1, r5
    277e:	4630      	mov	r0, r6
	mfp[callee_id] = 1;
    2780:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    2782:	f004 f8af 	bl	68e4 <mayfly_pend>
    2786:	e01c      	b.n	27c2 <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2788:	f004 f89a 	bl	68c0 <mayfly_prio_is_equal>
    278c:	2800      	cmp	r0, #0
    278e:	d0e6      	beq.n	275e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    2790:	4629      	mov	r1, r5
    2792:	4630      	mov	r0, r6
    2794:	f004 f886 	bl	68a4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2798:	2800      	cmp	r0, #0
    279a:	d0e0      	beq.n	275e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    279c:	2330      	movs	r3, #48	; 0x30
    279e:	220c      	movs	r2, #12
    27a0:	436b      	muls	r3, r5
    27a2:	fb02 3306 	mla	r3, r2, r6, r3
    27a6:	4a12      	ldr	r2, [pc, #72]	; (27f0 <mayfly_enqueue+0x9c>)
    27a8:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    27aa:	7a93      	ldrb	r3, [r2, #10]
    27ac:	7ad2      	ldrb	r2, [r2, #11]
    27ae:	1a9b      	subs	r3, r3, r2
    27b0:	bf18      	it	ne
    27b2:	2301      	movne	r3, #1
    27b4:	e7d4      	b.n	2760 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    27b6:	3202      	adds	r2, #2
    27b8:	b2d2      	uxtb	r2, r2
    27ba:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    27bc:	68e3      	ldr	r3, [r4, #12]
    27be:	68a0      	ldr	r0, [r4, #8]
    27c0:	4798      	blx	r3

	return 0;
    27c2:	2000      	movs	r0, #0
}
    27c4:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    27c6:	2b00      	cmp	r3, #0
    27c8:	d0f8      	beq.n	27bc <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    27ca:	3201      	adds	r2, #1
    27cc:	b2d2      	uxtb	r2, r2
    27ce:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    27d0:	2304      	movs	r3, #4
    27d2:	2230      	movs	r2, #48	; 0x30
    27d4:	fb12 3205 	smlabb	r2, r2, r5, r3
    27d8:	230c      	movs	r3, #12
    27da:	fb13 2306 	smlabb	r3, r3, r6, r2
    27de:	4a04      	ldr	r2, [pc, #16]	; (27f0 <mayfly_enqueue+0x9c>)
    27e0:	6860      	ldr	r0, [r4, #4]
    27e2:	441a      	add	r2, r3
    27e4:	4621      	mov	r1, r4
    27e6:	f7ff ff44 	bl	2672 <memq_enqueue>
    27ea:	e7c5      	b.n	2778 <mayfly_enqueue+0x24>
    27ec:	200000c0 	.word	0x200000c0
    27f0:	200000c4 	.word	0x200000c4

000027f4 <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
    27f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
    27f8:	4b52      	ldr	r3, [pc, #328]	; (2944 <mayfly_run+0x150>)
    27fa:	5c1a      	ldrb	r2, [r3, r0]
{
    27fc:	b08b      	sub	sp, #44	; 0x2c
    27fe:	4606      	mov	r6, r0
	if (!mfp[callee_id]) {
    2800:	2a00      	cmp	r2, #0
    2802:	f000 809b 	beq.w	293c <mayfly_run+0x148>
		return;
	}
	mfp[callee_id] = 1;
    2806:	2201      	movs	r2, #1
    2808:	541a      	strb	r2, [r3, r0]
    280a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    280e:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    2810:	4d4d      	ldr	r5, [pc, #308]	; (2948 <mayfly_run+0x154>)
    2812:	9306      	str	r3, [sp, #24]
    2814:	2404      	movs	r4, #4
    2816:	233c      	movs	r3, #60	; 0x3c
    2818:	fb13 4300 	smlabb	r3, r3, r0, r4
    281c:	18eb      	adds	r3, r5, r3
	u8_t enable = 0U;
    281e:	f04f 0a00 	mov.w	sl, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    2822:	f04f 0830 	mov.w	r8, #48	; 0x30
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    2826:	9305      	str	r3, [sp, #20]
	u8_t disable = 0U;
    2828:	f8cd a004 	str.w	sl, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
    282c:	fb08 f800 	mul.w	r8, r8, r0
    2830:	46ab      	mov	fp, r5
	while (caller_id--) {
    2832:	3c01      	subs	r4, #1
    2834:	b2e4      	uxtb	r4, r4
    2836:	2cff      	cmp	r4, #255	; 0xff
    2838:	d10b      	bne.n	2852 <mayfly_run+0x5e>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    283a:	9b01      	ldr	r3, [sp, #4]
    283c:	2b00      	cmp	r3, #0
    283e:	d07d      	beq.n	293c <mayfly_run+0x148>
    2840:	f1ba 0f00 	cmp.w	sl, #0
    2844:	d17a      	bne.n	293c <mayfly_run+0x148>
		mayfly_enable_cb(callee_id, callee_id, 0);
    2846:	4652      	mov	r2, sl
    2848:	4631      	mov	r1, r6
    284a:	4630      	mov	r0, r6
    284c:	f004 f81c 	bl	6888 <mayfly_enable_cb>
    2850:	e074      	b.n	293c <mayfly_run+0x148>
		struct mayfly *m = 0;
    2852:	aa0a      	add	r2, sp, #40	; 0x28
    2854:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    2856:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    2858:	f842 3d04 	str.w	r3, [r2, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    285c:	fb07 f304 	mul.w	r3, r7, r4
    2860:	eb03 0008 	add.w	r0, r3, r8
    2864:	1829      	adds	r1, r5, r0
    2866:	5828      	ldr	r0, [r5, r0]
    2868:	6849      	ldr	r1, [r1, #4]
    286a:	9302      	str	r3, [sp, #8]
    286c:	f7ff ff08 	bl	2680 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    2870:	9b06      	ldr	r3, [sp, #24]
    2872:	fb17 3704 	smlabb	r7, r7, r4, r3
    2876:	19eb      	adds	r3, r5, r7
    2878:	9304      	str	r3, [sp, #16]
    287a:	9b02      	ldr	r3, [sp, #8]
    287c:	9303      	str	r3, [sp, #12]
		link = memq_peek(mft[callee_id][caller_id].head,
    287e:	4681      	mov	r9, r0
		while (link) {
    2880:	f1b9 0f00 	cmp.w	r9, #0
    2884:	d115      	bne.n	28b2 <mayfly_run+0xbe>
		if (mft[callee_id][caller_id].disable_req !=
    2886:	230c      	movs	r3, #12
    2888:	fb03 8204 	mla	r2, r3, r4, r8
    288c:	445a      	add	r2, fp
		if (mft[callee_id][caller_id].enable_req !=
    288e:	fb03 8304 	mla	r3, r3, r4, r8
		if (mft[callee_id][caller_id].disable_req !=
    2892:	7a91      	ldrb	r1, [r2, #10]
    2894:	7ad0      	ldrb	r0, [r2, #11]
		if (mft[callee_id][caller_id].enable_req !=
    2896:	445b      	add	r3, fp
		if (mft[callee_id][caller_id].disable_req !=
    2898:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    289a:	bf1e      	ittt	ne
    289c:	72d1      	strbne	r1, [r2, #11]
			disable = 1U;
    289e:	2201      	movne	r2, #1
    28a0:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    28a2:	7a59      	ldrb	r1, [r3, #9]
    28a4:	7a1a      	ldrb	r2, [r3, #8]
    28a6:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    28a8:	bf1c      	itt	ne
    28aa:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    28ac:	f04f 0a01 	movne.w	sl, #1
    28b0:	e7bf      	b.n	2832 <mayfly_run+0x3e>
			state = (m->_req - m->_ack) & 0x03;
    28b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28b4:	7819      	ldrb	r1, [r3, #0]
    28b6:	785a      	ldrb	r2, [r3, #1]
    28b8:	1a89      	subs	r1, r1, r2
    28ba:	f001 0103 	and.w	r1, r1, #3
			if (state == 1) {
    28be:	2901      	cmp	r1, #1
			state = (m->_req - m->_ack) & 0x03;
    28c0:	9102      	str	r1, [sp, #8]
			if (state == 1) {
    28c2:	d104      	bne.n	28ce <mayfly_run+0xda>
				m->_ack--;
    28c4:	3a01      	subs	r2, #1
    28c6:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    28c8:	6898      	ldr	r0, [r3, #8]
    28ca:	68da      	ldr	r2, [r3, #12]
    28cc:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    28ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
	req = m->_req;
    28d0:	783b      	ldrb	r3, [r7, #0]
	if (((req - m->_ack) & 0x03) != 1) {
    28d2:	787a      	ldrb	r2, [r7, #1]
	req = m->_req;
    28d4:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1) {
    28d6:	1a9a      	subs	r2, r3, r2
    28d8:	f002 0203 	and.w	r2, r2, #3
    28dc:	2a01      	cmp	r2, #1
    28de:	9307      	str	r3, [sp, #28]
    28e0:	d019      	beq.n	2916 <mayfly_run+0x122>
		memq_dequeue(mft[callee_id][caller_id].tail,
    28e2:	9b03      	ldr	r3, [sp, #12]
    28e4:	9904      	ldr	r1, [sp, #16]
    28e6:	eb03 0008 	add.w	r0, r3, r8
    28ea:	4458      	add	r0, fp
    28ec:	2200      	movs	r2, #0
    28ee:	6840      	ldr	r0, [r0, #4]
    28f0:	f7ff fece 	bl	2690 <memq_dequeue>
		m->_ack = req;
    28f4:	9b07      	ldr	r3, [sp, #28]
		ack = m->_ack;
    28f6:	787a      	ldrb	r2, [r7, #1]
		m->_ack = req;
    28f8:	707b      	strb	r3, [r7, #1]
		if (((m->_req - ack) & 0x03) == 1) {
    28fa:	783b      	ldrb	r3, [r7, #0]
		m->_link = link;
    28fc:	f8c7 9004 	str.w	r9, [r7, #4]
		if (((m->_req - ack) & 0x03) == 1) {
    2900:	1a9b      	subs	r3, r3, r2
    2902:	f003 0303 	and.w	r3, r3, #3
    2906:	2b01      	cmp	r3, #1
    2908:	d105      	bne.n	2916 <mayfly_run+0x122>
			m->_ack = ack;
    290a:	707a      	strb	r2, [r7, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    290c:	4639      	mov	r1, r7
    290e:	9a05      	ldr	r2, [sp, #20]
    2910:	4648      	mov	r0, r9
    2912:	f7ff feae 	bl	2672 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    2916:	9b03      	ldr	r3, [sp, #12]
    2918:	4443      	add	r3, r8
    291a:	18e9      	adds	r1, r5, r3
    291c:	58e8      	ldr	r0, [r5, r3]
    291e:	6849      	ldr	r1, [r1, #4]
    2920:	aa09      	add	r2, sp, #36	; 0x24
    2922:	f7ff fead 	bl	2680 <memq_peek>
			if (state == 1) {
    2926:	9b02      	ldr	r3, [sp, #8]
    2928:	2b01      	cmp	r3, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    292a:	4681      	mov	r9, r0
			if (state == 1) {
    292c:	d1a8      	bne.n	2880 <mayfly_run+0x8c>
				if (caller_id || link) {
    292e:	b90c      	cbnz	r4, 2934 <mayfly_run+0x140>
    2930:	2800      	cmp	r0, #0
    2932:	d0a8      	beq.n	2886 <mayfly_run+0x92>
					mayfly_pend(callee_id, callee_id);
    2934:	4631      	mov	r1, r6
    2936:	4630      	mov	r0, r6
    2938:	f003 ffd4 	bl	68e4 <mayfly_pend>
	}
}
    293c:	b00b      	add	sp, #44	; 0x2c
    293e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2942:	bf00      	nop
    2944:	200000c0 	.word	0x200000c0
    2948:	200000c4 	.word	0x200000c4

0000294c <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    294c:	b510      	push	{r4, lr}
    294e:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
    2950:	2000      	movs	r0, #0

	while (octets_len--) {
    2952:	3901      	subs	r1, #1
    2954:	b2c9      	uxtb	r1, r1
    2956:	29ff      	cmp	r1, #255	; 0xff
    2958:	d100      	bne.n	295c <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    295a:	bd10      	pop	{r4, pc}
		bite = *octets;
    295c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    2960:	2b00      	cmp	r3, #0
    2962:	d0f6      	beq.n	2952 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    2964:	1e5c      	subs	r4, r3, #1
			one_count++;
    2966:	3001      	adds	r0, #1
			bite &= (bite - 1);
    2968:	4023      	ands	r3, r4
			one_count++;
    296a:	b2c0      	uxtb	r0, r0
    296c:	e7f8      	b.n	2960 <util_ones_count_get+0x14>

0000296e <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    296e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    2970:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    2972:	6805      	ldr	r5, [r0, #0]
	current = previous;
    2974:	461a      	mov	r2, r3
	total = 0U;
    2976:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    2978:	2aff      	cmp	r2, #255	; 0xff
    297a:	d101      	bne.n	2980 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    297c:	2000      	movs	r0, #0
    297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    2980:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    2984:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    2986:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    298a:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    298e:	d004      	beq.n	299a <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    2990:	68b3      	ldr	r3, [r6, #8]
    2992:	441c      	add	r4, r3
		current = ticker_current->next;
    2994:	4613      	mov	r3, r2
    2996:	463a      	mov	r2, r7
    2998:	e7ee      	b.n	2978 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    299a:	4293      	cmp	r3, r2
    299c:	d100      	bne.n	29a0 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    299e:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    29a0:	b21b      	sxth	r3, r3
    29a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29a6:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    29a8:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    29aa:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    29ae:	7833      	ldrb	r3, [r6, #0]
    29b0:	2bff      	cmp	r3, #255	; 0xff
    29b2:	d006      	beq.n	29c2 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    29b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29b8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    29bc:	689a      	ldr	r2, [r3, #8]
    29be:	4402      	add	r2, r0
    29c0:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    29c2:	4420      	add	r0, r4
    29c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000029c6 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    29c6:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    29c8:	1a55      	subs	r5, r2, r1
    29ca:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    29ce:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    29d0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    29d2:	d109      	bne.n	29e8 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    29d4:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    29d8:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    29da:	42a2      	cmp	r2, r4
    29dc:	d90e      	bls.n	29fc <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    29de:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
    29e0:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    29e2:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    29e4:	6144      	str	r4, [r0, #20]
    29e6:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    29e8:	1a8a      	subs	r2, r1, r2
    29ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    29ee:	4293      	cmp	r3, r2
    29f0:	d901      	bls.n	29f6 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    29f2:	1a9a      	subs	r2, r3, r2
    29f4:	e7f1      	b.n	29da <ticks_to_expire_prep+0x14>
    29f6:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    29f8:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
    29fa:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    29fc:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
    29fe:	2200      	movs	r2, #0
    2a00:	e7ef      	b.n	29e2 <ticks_to_expire_prep+0x1c>

00002a02 <ticker_job_op_cb>:
{
    2a02:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    2a04:	2200      	movs	r2, #0
    2a06:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    2a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    2a0a:	6259      	str	r1, [r3, #36]	; 0x24
{
    2a0c:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    2a0e:	b10a      	cbz	r2, 2a14 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    2a10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2a12:	4710      	bx	r2
    2a14:	4770      	bx	lr

00002a16 <ticker_worker>:
{
    2a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    2a1a:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
    2a1c:	2301      	movs	r3, #1
{
    2a1e:	4604      	mov	r4, r0
	instance->worker_trigger = 1U;
    2a20:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    2a22:	2d00      	cmp	r5, #0
    2a24:	d14c      	bne.n	2ac0 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    2a26:	7f43      	ldrb	r3, [r0, #29]
    2a28:	2bff      	cmp	r3, #255	; 0xff
    2a2a:	d102      	bne.n	2a32 <ticker_worker+0x1c>
		instance->worker_trigger = 0U;
    2a2c:	77c5      	strb	r5, [r0, #31]
		return;
    2a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    2a32:	f003 fa9f 	bl	5f74 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2a36:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    2a38:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    2a3a:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2a3e:	1bc7      	subs	r7, r0, r7
    2a40:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    2a44:	2eff      	cmp	r6, #255	; 0xff
    2a46:	d006      	beq.n	2a56 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    2a48:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2a4c:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2a50:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2a52:	429f      	cmp	r7, r3
    2a54:	d218      	bcs.n	2a88 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    2a56:	7aa2      	ldrb	r2, [r4, #10]
    2a58:	7ae3      	ldrb	r3, [r4, #11]
    2a5a:	4293      	cmp	r3, r2
    2a5c:	d105      	bne.n	2a6a <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    2a5e:	3301      	adds	r3, #1
    2a60:	b2db      	uxtb	r3, r3
			last = 0U;
    2a62:	2b02      	cmp	r3, #2
    2a64:	bf08      	it	eq
    2a66:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    2a68:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2a6a:	7ae3      	ldrb	r3, [r4, #11]
    2a6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2a70:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2a72:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0U;
    2a74:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2a76:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0U;
    2a78:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2a7a:	46ac      	mov	ip, r5
    2a7c:	4623      	mov	r3, r4
    2a7e:	2104      	movs	r1, #4
    2a80:	2003      	movs	r0, #3
}
    2a82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2a86:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    2a88:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    2a8a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2a8c:	788a      	ldrb	r2, [r1, #2]
    2a8e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    2a90:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2a94:	1a9b      	subs	r3, r3, r2
    2a96:	b2db      	uxtb	r3, r3
    2a98:	2b01      	cmp	r3, #1
    2a9a:	d1d3      	bne.n	2a44 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    2a9c:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    2aa0:	3a01      	subs	r2, #1
    2aa2:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    2aa4:	f1b9 0f00 	cmp.w	r9, #0
    2aa8:	d0cc      	beq.n	2a44 <ticker_worker+0x2e>
					   ticks_expired -
    2aaa:	6948      	ldr	r0, [r1, #20]
    2aac:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    2aae:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    2ab0:	1a28      	subs	r0, r5, r0
    2ab2:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    2ab4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ab8:	690b      	ldr	r3, [r1, #16]
    2aba:	6a49      	ldr	r1, [r1, #36]	; 0x24
    2abc:	47c8      	blx	r9
    2abe:	e7c1      	b.n	2a44 <ticker_worker+0x2e>
    2ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002ac4 <ticker_job>:
{
    2ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    2ac8:	7fc2      	ldrb	r2, [r0, #31]
{
    2aca:	b093      	sub	sp, #76	; 0x4c
    2acc:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    2ace:	2a00      	cmp	r2, #0
    2ad0:	f040 83b9 	bne.w	3246 <ticker_job+0x782>
	ticks_previous = instance->ticks_current;
    2ad4:	6943      	ldr	r3, [r0, #20]
    2ad6:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1U;
    2ad8:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2ada:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    2adc:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2ade:	7ac0      	ldrb	r0, [r0, #11]
    2ae0:	4298      	cmp	r0, r3
    2ae2:	f000 808f 	beq.w	2c04 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    2ae6:	440b      	add	r3, r1
    2ae8:	b2db      	uxtb	r3, r3
			first = 0U;
    2aea:	2b02      	cmp	r3, #2
    2aec:	bf08      	it	eq
    2aee:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    2af0:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    2af4:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1U;
    2af8:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    2afa:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    2afe:	9b05      	ldr	r3, [sp, #20]
    2b00:	4443      	add	r3, r8
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    2b02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b06:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    2b0a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2b0e:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    2b10:	f8db 3000 	ldr.w	r3, [fp]
    2b14:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    2b16:	f8db 3004 	ldr.w	r3, [fp, #4]
    2b1a:	930b      	str	r3, [sp, #44]	; 0x2c
    2b1c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2b20:	3b01      	subs	r3, #1
    2b22:	b2db      	uxtb	r3, r3
    2b24:	9302      	str	r3, [sp, #8]
	pending = 0U;
    2b26:	2300      	movs	r3, #0
    2b28:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    2b2a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    2b2e:	9b02      	ldr	r3, [sp, #8]
    2b30:	2bff      	cmp	r3, #255	; 0xff
    2b32:	d16a      	bne.n	2c0a <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2b34:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0U;
    2b38:	9a03      	ldr	r2, [sp, #12]
    2b3a:	1a9b      	subs	r3, r3, r2
    2b3c:	bf18      	it	ne
    2b3e:	2301      	movne	r3, #1
    2b40:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    2b42:	9b01      	ldr	r3, [sp, #4]
    2b44:	b1e3      	cbz	r3, 2b80 <ticker_job+0xbc>
	node = &instance->node[0];
    2b46:	f8db 3000 	ldr.w	r3, [fp]
    2b4a:	9304      	str	r3, [sp, #16]
	ticks_expired = 0U;
    2b4c:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    2b50:	f89b 601d 	ldrb.w	r6, [fp, #29]
    2b54:	2eff      	cmp	r6, #255	; 0xff
    2b56:	d00c      	beq.n	2b72 <ticker_job+0xae>
		ticker = &node[id_expired];
    2b58:	b237      	sxth	r7, r6
    2b5a:	9b04      	ldr	r3, [sp, #16]
    2b5c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    2b60:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2b64:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2b66:	4545      	cmp	r5, r8
    2b68:	f240 813a 	bls.w	2de0 <ticker_job+0x31c>
			ticker->ticks_to_expire -= ticks_elapsed;
    2b6c:	eba5 0508 	sub.w	r5, r5, r8
    2b70:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1U;
    2b72:	9b02      	ldr	r3, [sp, #8]
    2b74:	9a01      	ldr	r2, [sp, #4]
    2b76:	9903      	ldr	r1, [sp, #12]
    2b78:	42b1      	cmp	r1, r6
    2b7a:	bf18      	it	ne
    2b7c:	4613      	movne	r3, r2
    2b7e:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    2b80:	f8db 3000 	ldr.w	r3, [fp]
    2b84:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    2b86:	f8db 3004 	ldr.w	r3, [fp, #4]
    2b8a:	9310      	str	r3, [sp, #64]	; 0x40
    2b8c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2b90:	3b01      	subs	r3, #1
    2b92:	b2db      	uxtb	r3, r3
    2b94:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    2b96:	9b01      	ldr	r3, [sp, #4]
    2b98:	2bff      	cmp	r3, #255	; 0xff
    2b9a:	f040 8174 	bne.w	2e86 <ticker_job+0x3c2>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2b9e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2ba2:	9a03      	ldr	r2, [sp, #12]
    2ba4:	4293      	cmp	r3, r2
	if (!pending) {
    2ba6:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    2ba8:	f040 8344 	bne.w	3234 <ticker_job+0x770>
	if (!pending) {
    2bac:	b95b      	cbnz	r3, 2bc6 <ticker_job+0x102>
    2bae:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    2bb2:	f8db 3004 	ldr.w	r3, [fp, #4]
    2bb6:	9301      	str	r3, [sp, #4]
    2bb8:	3c01      	subs	r4, #1
    2bba:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    2bbc:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    2bc0:	2cff      	cmp	r4, #255	; 0xff
    2bc2:	f040 82a4 	bne.w	310e <ticker_job+0x64a>
	instance->job_guard = 0U;
    2bc6:	2300      	movs	r3, #0
    2bc8:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    2bcc:	9b02      	ldr	r3, [sp, #8]
    2bce:	b14b      	cbz	r3, 2be4 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    2bd0:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2bd4:	2bff      	cmp	r3, #255	; 0xff
    2bd6:	f040 82ed 	bne.w	31b4 <ticker_job+0x6f0>
		if (cntr_stop() == 0) {
    2bda:	f003 f9b3 	bl	5f44 <cntr_stop>
    2bde:	b908      	cbnz	r0, 2be4 <ticker_job+0x120>
			instance->ticks_slot_previous = 0U;
    2be0:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    2be4:	f89b 301f 	ldrb.w	r3, [fp, #31]
    2be8:	2b00      	cmp	r3, #0
    2bea:	f000 832c 	beq.w	3246 <ticker_job+0x782>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2bee:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2bf2:	465b      	mov	r3, fp
    2bf4:	2201      	movs	r2, #1
    2bf6:	2103      	movs	r1, #3
    2bf8:	2004      	movs	r0, #4
    2bfa:	46a4      	mov	ip, r4
}
    2bfc:	b013      	add	sp, #76	; 0x4c
    2bfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2c02:	4760      	bx	ip
		flag_elapsed = 0U;
    2c04:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
    2c06:	4690      	mov	r8, r2
    2c08:	e77f      	b.n	2b0a <ticker_job+0x46>
		user = &users[count_user];
    2c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2c0c:	9a02      	ldr	r2, [sp, #8]
    2c0e:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    2c16:	78f9      	ldrb	r1, [r7, #3]
    2c18:	78be      	ldrb	r6, [r7, #2]
    2c1a:	428e      	cmp	r6, r1
    2c1c:	f000 80db 	beq.w	2dd6 <ticker_job+0x312>
			user_op = &user_ops[user->middle];
    2c20:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    2c22:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    2c24:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    2c28:	0112      	lsls	r2, r2, #4
    2c2a:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    2c2c:	1c73      	adds	r3, r6, #1
    2c2e:	b2db      	uxtb	r3, r3
				middle = 0U;
    2c30:	4298      	cmp	r0, r3
    2c32:	bf08      	it	eq
    2c34:	2300      	moveq	r3, #0
			user->middle = middle;
    2c36:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    2c38:	9b06      	ldr	r3, [sp, #24]
    2c3a:	5c9a      	ldrb	r2, [r3, r2]
    2c3c:	2a03      	cmp	r2, #3
    2c3e:	d9eb      	bls.n	2c18 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2c40:	2a05      	cmp	r2, #5
    2c42:	d81b      	bhi.n	2c7c <ticker_job+0x1b8>
			ticker = &node[user_op->id];
    2c44:	7869      	ldrb	r1, [r5, #1]
    2c46:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    2c4a:	930a      	str	r3, [sp, #40]	; 0x28
    2c4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2c4e:	9b04      	ldr	r3, [sp, #16]
    2c50:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    2c54:	7863      	ldrb	r3, [r4, #1]
    2c56:	78a0      	ldrb	r0, [r4, #2]
    2c58:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2c5a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2c5e:	d00d      	beq.n	2c7c <ticker_job+0x1b8>
			    (state == 0) ||
    2c60:	2a04      	cmp	r2, #4
    2c62:	d110      	bne.n	2c86 <ticker_job+0x1c2>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    2c64:	686a      	ldr	r2, [r5, #4]
    2c66:	b972      	cbnz	r2, 2c86 <ticker_job+0x1c2>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    2c68:	68aa      	ldr	r2, [r5, #8]
    2c6a:	b962      	cbnz	r2, 2c86 <ticker_job+0x1c2>
			     (user_op->params.update.ticks_drift_minus == 0) &&
    2c6c:	68ea      	ldr	r2, [r5, #12]
    2c6e:	b952      	cbnz	r2, 2c86 <ticker_job+0x1c2>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    2c70:	692a      	ldr	r2, [r5, #16]
    2c72:	b942      	cbnz	r2, 2c86 <ticker_job+0x1c2>
			     (user_op->params.update.lazy == 0) &&
    2c74:	696a      	ldr	r2, [r5, #20]
    2c76:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    2c7a:	d104      	bne.n	2c86 <ticker_job+0x1c2>
				ticker_job_op_cb(user_op,
    2c7c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2c7e:	4628      	mov	r0, r5
    2c80:	f7ff febf 	bl	2a02 <ticker_job_op_cb>
    2c84:	e7c7      	b.n	2c16 <ticker_job+0x152>
			if (state == 1) {
    2c86:	2b01      	cmp	r3, #1
    2c88:	f040 809b 	bne.w	2dc2 <ticker_job+0x2fe>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2c8c:	4658      	mov	r0, fp
    2c8e:	f7ff fe6e 	bl	296e <ticker_dequeue>
    2c92:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2c94:	782b      	ldrb	r3, [r5, #0]
    2c96:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2c98:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2c9a:	f040 8084 	bne.w	2da6 <ticker_job+0x2e2>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    2c9e:	f8db 3014 	ldr.w	r3, [fp, #20]
    2ca2:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2ca4:	f003 f966 	bl	5f74 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2ca8:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2caa:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2cac:	1ac3      	subs	r3, r0, r3
    2cae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2cb2:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    2cb4:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2cb6:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2cb8:	bf9e      	ittt	ls
    2cba:	6962      	ldrls	r2, [r4, #20]
    2cbc:	1b92      	subls	r2, r2, r6
    2cbe:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    2cc0:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2cc2:	bf96      	itet	ls
    2cc4:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    2cc6:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0U;
    2cc8:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    2cca:	b18a      	cbz	r2, 2cf0 <ticker_job+0x22c>
	    (user_op->params.update.lazy != 0)) {
    2ccc:	8aa9      	ldrh	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0) &&
    2cce:	b179      	cbz	r1, 2cf0 <ticker_job+0x22c>
		user_op->params.update.lazy--;
    2cd0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    2cd4:	fa1f fe8e 	uxth.w	lr, lr
    2cd8:	f8a5 e014 	strh.w	lr, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2cdc:	429a      	cmp	r2, r3
    2cde:	d32b      	bcc.n	2d38 <ticker_job+0x274>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    2ce0:	f8df 9324 	ldr.w	r9, [pc, #804]	; 3008 <ticker_job+0x544>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    2ce4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    2ce8:	45e6      	cmp	lr, ip
    2cea:	d847      	bhi.n	2d7c <ticker_job+0x2b8>
		ticker->lazy_periodic = user_op->params.update.lazy;
    2cec:	f8a4 e01c 	strh.w	lr, [r4, #28]
	ticker->ticks_to_expire = ticks_to_expire +
    2cf0:	686a      	ldr	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2cf2:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    2cf4:	4413      	add	r3, r2
    2cf6:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    2cf8:	68aa      	ldr	r2, [r5, #8]
    2cfa:	6963      	ldr	r3, [r4, #20]
    2cfc:	4413      	add	r3, r2
    2cfe:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2d02:	4620      	mov	r0, r4
    2d04:	f7ff fe5f 	bl	29c6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2d08:	68ea      	ldr	r2, [r5, #12]
    2d0a:	69a3      	ldr	r3, [r4, #24]
    2d0c:	4413      	add	r3, r2
    2d0e:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2d10:	692a      	ldr	r2, [r5, #16]
    2d12:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    2d14:	bf8c      	ite	hi
    2d16:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    2d18:	2300      	movls	r3, #0
    2d1a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    2d1c:	7dab      	ldrb	r3, [r5, #22]
    2d1e:	b103      	cbz	r3, 2d22 <ticker_job+0x25e>
		ticker->force = user_op->params.update.force;
    2d20:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    2d22:	9b04      	ldr	r3, [sp, #16]
    2d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d26:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    2d2a:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    2d2c:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    2d30:	3301      	adds	r3, #1
    2d32:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2d34:	2100      	movs	r1, #0
    2d36:	e7a2      	b.n	2c7e <ticker_job+0x1ba>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    2d38:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2d3c:	45e6      	cmp	lr, ip
    2d3e:	d2cf      	bcs.n	2ce0 <ticker_job+0x21c>
	if ((ticker->remainder_current >= BIT(31)) ||
    2d40:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2d42:	4eaf      	ldr	r6, [pc, #700]	; (3000 <ticker_job+0x53c>)
    2d44:	48af      	ldr	r0, [pc, #700]	; (3004 <ticker_job+0x540>)
    2d46:	198e      	adds	r6, r1, r6
    2d48:	4286      	cmp	r6, r0
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    2d4a:	bf81      	itttt	hi
    2d4c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    2d50:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    2d54:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    2d58:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    2d5a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2d5c:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    2d5e:	bf8c      	ite	hi
    2d60:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0U;
    2d64:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    2d68:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    2d6a:	4491      	add	r9, r2
			ticker->lazy_current--;
    2d6c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    2d70:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    2d72:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    2d76:	f8a4 c01e 	strh.w	ip, [r4, #30]
    2d7a:	e7af      	b.n	2cdc <ticker_job+0x218>
	ticker->remainder_current += ticker->remainder_periodic;
    2d7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2d7e:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    2d80:	48a0      	ldr	r0, [pc, #640]	; (3004 <ticker_job+0x540>)
	ticker->remainder_current += ticker->remainder_periodic;
    2d82:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2d84:	499e      	ldr	r1, [pc, #632]	; (3000 <ticker_job+0x53c>)
    2d86:	1871      	adds	r1, r6, r1
    2d88:	4281      	cmp	r1, r0
	return 0;
    2d8a:	bf8e      	itee	hi
    2d8c:	2100      	movhi	r1, #0
		return 1;
    2d8e:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    2d90:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    2d92:	4411      	add	r1, r2
			ticker->lazy_current++;
    2d94:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    2d98:	bf8c      	ite	hi
    2d9a:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    2d9c:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    2d9e:	440b      	add	r3, r1
			ticker->lazy_current++;
    2da0:	f8a4 c01e 	strh.w	ip, [r4, #30]
    2da4:	e79e      	b.n	2ce4 <ticker_job+0x220>
		ticker->req = ticker->ack;
    2da6:	78a3      	ldrb	r3, [r4, #2]
    2da8:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    2daa:	786b      	ldrb	r3, [r5, #1]
    2dac:	f89b 201c 	ldrb.w	r2, [fp, #28]
    2db0:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2db2:	bf01      	itttt	eq
    2db4:	23ff      	moveq	r3, #255	; 0xff
    2db6:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
    2dba:	2300      	moveq	r3, #0
    2dbc:	f8cb 3018 	streq.w	r3, [fp, #24]
    2dc0:	e7b8      	b.n	2d34 <ticker_job+0x270>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    2dc2:	2104      	movs	r1, #4
    2dc4:	465b      	mov	r3, fp
    2dc6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2dca:	2201      	movs	r2, #1
    2dcc:	4608      	mov	r0, r1
    2dce:	47a0      	blx	r4
				pending = 1U;
    2dd0:	2301      	movs	r3, #1
				user->middle = prev;
    2dd2:	70be      	strb	r6, [r7, #2]
				pending = 1U;
    2dd4:	9307      	str	r3, [sp, #28]
    2dd6:	9b02      	ldr	r3, [sp, #8]
    2dd8:	3b01      	subs	r3, #1
    2dda:	b2db      	uxtb	r3, r3
    2ddc:	9302      	str	r3, [sp, #8]
    2dde:	e6a6      	b.n	2b2e <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    2de0:	f8db 3018 	ldr.w	r3, [fp, #24]
    2de4:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2de6:	bf29      	itett	cs
    2de8:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    2dea:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    2dec:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
    2df0:	2300      	movcs	r3, #0
    2df2:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    2df6:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    2df8:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    2dfa:	b11b      	cbz	r3, 2e04 <ticker_job+0x340>
			instance->ticker_id_slot_previous = id_expired;
    2dfc:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    2e00:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0U;
    2e04:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    2e06:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0U;
    2e08:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    2e0a:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    2e0e:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    2e12:	f8d4 e004 	ldr.w	lr, [r4, #4]
    2e16:	f1be 0f00 	cmp.w	lr, #0
    2e1a:	d030      	beq.n	2e7e <ticker_job+0x3ba>
    2e1c:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    2e1e:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 3004 <ticker_job+0x540>
	ticker->remainder_current += ticker->remainder_periodic;
    2e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2e24:	6a21      	ldr	r1, [r4, #32]
    2e26:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2e28:	4975      	ldr	r1, [pc, #468]	; (3000 <ticker_job+0x53c>)
    2e2a:	1859      	adds	r1, r3, r1
    2e2c:	4561      	cmp	r1, ip
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    2e2e:	bf9f      	itttt	ls
    2e30:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    2e34:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    2e38:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    2e3c:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    2e3e:	bf92      	itee	ls
    2e40:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    2e42:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    2e44:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    2e46:	4473      	add	r3, lr
			while (count--) {
    2e48:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    2e4c:	441a      	add	r2, r3
			while (count--) {
    2e4e:	d2e8      	bcs.n	2e22 <ticker_job+0x35e>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2e50:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    2e52:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2e54:	f8db 1014 	ldr.w	r1, [fp, #20]
    2e58:	eb03 0209 	add.w	r2, r3, r9
    2e5c:	4620      	mov	r0, r4
    2e5e:	f7ff fdb2 	bl	29c6 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    2e62:	8ba3      	ldrh	r3, [r4, #28]
    2e64:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0U;
    2e66:	2300      	movs	r3, #0
    2e68:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    2e6a:	9b04      	ldr	r3, [sp, #16]
    2e6c:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    2e70:	7863      	ldrb	r3, [r4, #1]
    2e72:	3301      	adds	r3, #1
    2e74:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    2e76:	eba8 0805 	sub.w	r8, r8, r5
    2e7a:	46b2      	mov	sl, r6
    2e7c:	e668      	b.n	2b50 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    2e7e:	78a3      	ldrb	r3, [r4, #2]
    2e80:	7063      	strb	r3, [r4, #1]
    2e82:	4656      	mov	r6, sl
    2e84:	e7f7      	b.n	2e76 <ticker_job+0x3b2>
		user = &users[count_user];
    2e86:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2e88:	9a01      	ldr	r2, [sp, #4]
    2e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2e8e:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    2e90:	685b      	ldr	r3, [r3, #4]
    2e92:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    2e94:	9b04      	ldr	r3, [sp, #16]
    2e96:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    2e9a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    2e9e:	f000 808e 	beq.w	2fbe <ticker_job+0x4fa>
				ticker = &node[id_insert];
    2ea2:	fa0f f38a 	sxth.w	r3, sl
    2ea6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2eaa:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    2eac:	46d0      	mov	r8, sl
    2eae:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    2eb2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    2eb6:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    2eb8:	f8db 3000 	ldr.w	r3, [fp]
    2ebc:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    2ebe:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2ec0:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    2ec2:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2ec4:	8be3      	ldrh	r3, [r4, #30]
    2ec6:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    2ec8:	bf86      	itte	hi
    2eca:	1a9b      	subhi	r3, r3, r2
    2ecc:	b29b      	uxthhi	r3, r3
		skip = 0U;
    2ece:	2300      	movls	r3, #0
    2ed0:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    2ed2:	fa0f f388 	sxth.w	r3, r8
    2ed6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2eda:	00db      	lsls	r3, r3, #3
    2edc:	9311      	str	r3, [sp, #68]	; 0x44
    2ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    2ee0:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    2ee4:	f8db 0018 	ldr.w	r0, [fp, #24]
    2ee8:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    2eea:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    2eee:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    2ef0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    2ef4:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    2ef8:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    2efa:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    2efc:	2bff      	cmp	r3, #255	; 0xff
    2efe:	d007      	beq.n	2f10 <ticker_job+0x44c>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    2f00:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    2f04:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    2f08:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    2f0a:	4281      	cmp	r1, r0
    2f0c:	f200 80a9 	bhi.w	3062 <ticker_job+0x59e>
				     ticks_to_expire + ticker_new->ticks_slot);
    2f10:	f8de 0018 	ldr.w	r0, [lr, #24]
    2f14:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    2f16:	eb01 0c00 	add.w	ip, r1, r0
    2f1a:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    2f1c:	2eff      	cmp	r6, #255	; 0xff
    2f1e:	f040 80ae 	bne.w	307e <ticker_job+0x5ba>
	if ((ticker_new->ticks_slot == 0) ||
    2f22:	980d      	ldr	r0, [sp, #52]	; 0x34
    2f24:	b130      	cbz	r0, 2f34 <ticker_job+0x470>
    2f26:	9805      	ldr	r0, [sp, #20]
    2f28:	4281      	cmp	r1, r0
    2f2a:	f0c0 80bf 	bcc.w	30ac <ticker_job+0x5e8>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    2f2e:	2eff      	cmp	r6, #255	; 0xff
    2f30:	f040 8185 	bne.w	323e <ticker_job+0x77a>
		if (previous == current) {
    2f34:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    2f36:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    2f3a:	4283      	cmp	r3, r0
			node[previous].next = id;
    2f3c:	bf18      	it	ne
    2f3e:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    2f42:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    2f46:	bf16      	itet	ne
    2f48:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    2f4c:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    2f50:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    2f54:	2bff      	cmp	r3, #255	; 0xff
    2f56:	d006      	beq.n	2f66 <ticker_job+0x4a2>
			node[current].ticks_to_expire -= ticks_to_expire;
    2f58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2f60:	689a      	ldr	r2, [r3, #8]
    2f62:	1a51      	subs	r1, r2, r1
    2f64:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    2f66:	78a3      	ldrb	r3, [r4, #2]
    2f68:	3301      	adds	r3, #1
    2f6a:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    2f6c:	2100      	movs	r1, #0
			if (user_op) {
    2f6e:	2d00      	cmp	r5, #0
    2f70:	d093      	beq.n	2e9a <ticker_job+0x3d6>
				ticker_job_op_cb(user_op, status);
    2f72:	4628      	mov	r0, r5
    2f74:	f7ff fd45 	bl	2a02 <ticker_job_op_cb>
    2f78:	e78f      	b.n	2e9a <ticker_job+0x3d6>
				user_op = &user_ops[user_ops_first];
    2f7a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    2f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f80:	011b      	lsls	r3, r3, #4
    2f82:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    2f84:	f109 0201 	add.w	r2, r9, #1
    2f88:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    2f8c:	9a04      	ldr	r2, [sp, #16]
    2f8e:	7812      	ldrb	r2, [r2, #0]
					first = 0U;
    2f90:	454a      	cmp	r2, r9
    2f92:	bf08      	it	eq
    2f94:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    2f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f9a:	5cd3      	ldrb	r3, [r2, r3]
    2f9c:	2b03      	cmp	r3, #3
    2f9e:	d10e      	bne.n	2fbe <ticker_job+0x4fa>
				id_insert = user_op->id;
    2fa0:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    2fa4:	9b08      	ldr	r3, [sp, #32]
    2fa6:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    2faa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    2fae:	7862      	ldrb	r2, [r4, #1]
    2fb0:	78a3      	ldrb	r3, [r4, #2]
    2fb2:	429a      	cmp	r2, r3
    2fb4:	d009      	beq.n	2fca <ticker_job+0x506>
					ticker_job_op_cb(user_op,
    2fb6:	2101      	movs	r1, #1
    2fb8:	4628      	mov	r0, r5
    2fba:	f7ff fd22 	bl	2a02 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    2fbe:	9b04      	ldr	r3, [sp, #16]
    2fc0:	789b      	ldrb	r3, [r3, #2]
    2fc2:	454b      	cmp	r3, r9
    2fc4:	d1d9      	bne.n	2f7a <ticker_job+0x4b6>
    2fc6:	9b01      	ldr	r3, [sp, #4]
    2fc8:	e5e2      	b.n	2b90 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    2fca:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    2fcc:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    2fd0:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    2fd2:	692b      	ldr	r3, [r5, #16]
    2fd4:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    2fd6:	8aab      	ldrh	r3, [r5, #20]
    2fd8:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    2fda:	69ab      	ldr	r3, [r5, #24]
    2fdc:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    2fde:	69eb      	ldr	r3, [r5, #28]
    2fe0:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    2fe2:	6a2b      	ldr	r3, [r5, #32]
    2fe4:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
    2fe6:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    2fe8:	68ab      	ldr	r3, [r5, #8]
    2fea:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    2fec:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    2fee:	686a      	ldr	r2, [r5, #4]
    2ff0:	4620      	mov	r0, r4
    2ff2:	f7ff fce8 	bl	29c6 <ticks_to_expire_prep>
	ticker->force = 1U;
    2ff6:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
    2ff8:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    2ffa:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1U;
    2ffc:	70e3      	strb	r3, [r4, #3]
    2ffe:	e75b      	b.n	2eb8 <ticker_job+0x3f4>
    3000:	ff172b5a 	.word	0xff172b5a
    3004:	7f172b59 	.word	0x7f172b59
    3008:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    300c:	6860      	ldr	r0, [r4, #4]
    300e:	2800      	cmp	r0, #0
    3010:	d07b      	beq.n	310a <ticker_job+0x646>
	ticker->remainder_current += ticker->remainder_periodic;
    3012:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3014:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    3016:	4b8d      	ldr	r3, [pc, #564]	; (324c <ticker_job+0x788>)
	ticker->remainder_current += ticker->remainder_periodic;
    3018:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    301a:	498d      	ldr	r1, [pc, #564]	; (3250 <ticker_job+0x78c>)
    301c:	18d3      	adds	r3, r2, r3
    301e:	428b      	cmp	r3, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    3020:	bf9c      	itt	ls
    3022:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    3026:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    302a:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    302c:	bf8b      	itete	hi
    302e:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    3030:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    3034:	2200      	movhi	r2, #0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    3036:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3038:	4403      	add	r3, r0
		return 1;
    303a:	bf98      	it	ls
    303c:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    303e:	4413      	add	r3, r2
			ticker->lazy_current++;
    3040:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3042:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    3044:	3201      	adds	r2, #1
    3046:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    3048:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    304a:	4293      	cmp	r3, r2
    304c:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    3050:	bf89      	itett	hi
    3052:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    3054:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    3056:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0U;
    3058:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    305a:	bf9c      	itt	ls
    305c:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0U;
    305e:	60a1      	strls	r1, [r4, #8]
    3060:	e73d      	b.n	2ede <ticker_job+0x41a>
		if (ticker_current->ticks_slot != 0) {
    3062:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    3064:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    3066:	b946      	cbnz	r6, 307a <ticker_job+0x5b6>
			if (ticks_slot_previous > ticks_to_expire_current) {
    3068:	9f05      	ldr	r7, [sp, #20]
    306a:	42b8      	cmp	r0, r7
    306c:	d200      	bcs.n	3070 <ticker_job+0x5ac>
				ticks_slot_previous -= ticks_to_expire_current;
    306e:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    3070:	9309      	str	r3, [sp, #36]	; 0x24
    3072:	9605      	str	r6, [sp, #20]
    3074:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    3078:	e740      	b.n	2efc <ticker_job+0x438>
		if (ticker_current->ticks_slot != 0) {
    307a:	9306      	str	r3, [sp, #24]
    307c:	e7f8      	b.n	3070 <ticker_job+0x5ac>
		ticker = &node[ticker_id_head];
    307e:	b230      	sxth	r0, r6
    3080:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3084:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    3088:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    308a:	68bf      	ldr	r7, [r7, #8]
    308c:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    308e:	4567      	cmp	r7, ip
    3090:	d20a      	bcs.n	30a8 <ticker_job+0x5e4>
		if (ticker->ticks_slot) {
    3092:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3094:	69bf      	ldr	r7, [r7, #24]
    3096:	2f00      	cmp	r7, #0
    3098:	f47f af43 	bne.w	2f22 <ticker_job+0x45e>
		ticks_slot -= ticks_to_expire;
    309c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    309e:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    30a2:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    30a6:	e739      	b.n	2f1c <ticker_job+0x458>
			return TICKER_NULL;
    30a8:	26ff      	movs	r6, #255	; 0xff
    30aa:	e73a      	b.n	2f22 <ticker_job+0x45e>
	while (id_insert !=
    30ac:	9b06      	ldr	r3, [sp, #24]
    30ae:	4598      	cmp	r8, r3
    30b0:	f43f af59 	beq.w	2f66 <ticker_job+0x4a2>
		if (id_collide != TICKER_NULL) {
    30b4:	9b06      	ldr	r3, [sp, #24]
    30b6:	2bff      	cmp	r3, #255	; 0xff
    30b8:	d0a8      	beq.n	300c <ticker_job+0x548>
    30ba:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    30bc:	b233      	sxth	r3, r6
    30be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30c2:	9305      	str	r3, [sp, #20]
    30c4:	9a05      	ldr	r2, [sp, #20]
    30c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    30c8:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    30cc:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    30ce:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    30d0:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    30d2:	bf88      	it	hi
    30d4:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    30d6:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    30d8:	bf8c      	ite	hi
    30da:	b29b      	uxthhi	r3, r3
				skip_collide = 0U;
    30dc:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    30de:	2a00      	cmp	r2, #0
    30e0:	d094      	beq.n	300c <ticker_job+0x548>
    30e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    30e4:	4293      	cmp	r3, r2
    30e6:	d891      	bhi.n	300c <ticker_job+0x548>
			    skip_collide <= skip &&
    30e8:	78fa      	ldrb	r2, [r7, #3]
    30ea:	78e3      	ldrb	r3, [r4, #3]
    30ec:	429a      	cmp	r2, r3
    30ee:	d28d      	bcs.n	300c <ticker_job+0x548>
					ticker_dequeue(instance, id_collide);
    30f0:	4631      	mov	r1, r6
    30f2:	4658      	mov	r0, fp
    30f4:	f7ff fc3b 	bl	296e <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    30f8:	78bb      	ldrb	r3, [r7, #2]
    30fa:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    30fc:	9a05      	ldr	r2, [sp, #20]
    30fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    3100:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    3102:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    3106:	46b2      	mov	sl, r6
    3108:	e6e9      	b.n	2ede <ticker_job+0x41a>
			return TICKER_STATUS_FAILURE;
    310a:	2101      	movs	r1, #1
    310c:	e72f      	b.n	2f6e <ticker_job+0x4aa>
		user = &users[count_user];
    310e:	9b01      	ldr	r3, [sp, #4]
    3110:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    3114:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    3116:	786b      	ldrb	r3, [r5, #1]
    3118:	78ea      	ldrb	r2, [r5, #3]
    311a:	429a      	cmp	r2, r3
    311c:	d102      	bne.n	3124 <ticker_job+0x660>
    311e:	3c01      	subs	r4, #1
    3120:	b2e4      	uxtb	r4, r4
    3122:	e54d      	b.n	2bc0 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    3124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3128:	011b      	lsls	r3, r3, #4
    312a:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    312c:	5cf3      	ldrb	r3, [r6, r3]
    312e:	2b01      	cmp	r3, #1
    3130:	d025      	beq.n	317e <ticker_job+0x6ba>
    3132:	2b02      	cmp	r3, #2
    3134:	d12a      	bne.n	318c <ticker_job+0x6c8>
		ticker_by_next_slot_get(instance,
    3136:	f8d2 c004 	ldr.w	ip, [r2, #4]
    313a:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    313c:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    3140:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    3144:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    3148:	28ff      	cmp	r0, #255	; 0xff
    314a:	d004      	beq.n	3156 <ticker_job+0x692>
    314c:	6819      	ldr	r1, [r3, #0]
    314e:	f8db 7014 	ldr.w	r7, [fp, #20]
    3152:	42b9      	cmp	r1, r7
    3154:	d023      	beq.n	319e <ticker_job+0x6da>
		*ticks_current = instance->ticks_current;
    3156:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    315a:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    315e:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0U;
    3160:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    3162:	29ff      	cmp	r1, #255	; 0xff
    3164:	d007      	beq.n	3176 <ticker_job+0x6b2>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    3166:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    316a:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    316e:	6987      	ldr	r7, [r0, #24]
    3170:	6880      	ldr	r0, [r0, #8]
    3172:	b1df      	cbz	r7, 31ac <ticker_job+0x6e8>
		_ticks_to_expire += ticker->ticks_to_expire;
    3174:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    3176:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    317a:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    317e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    3180:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    3184:	b113      	cbz	r3, 318c <ticker_job+0x6c8>
		fp_op_func(uop->status, uop->op_context);
    3186:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3188:	2000      	movs	r0, #0
    318a:	4798      	blx	r3
			first = user->first + 1;
    318c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    318e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    3190:	3301      	adds	r3, #1
    3192:	b2db      	uxtb	r3, r3
				first = 0U;
    3194:	429a      	cmp	r2, r3
    3196:	bf08      	it	eq
    3198:	2300      	moveq	r3, #0
			user->first = first;
    319a:	706b      	strb	r3, [r5, #1]
    319c:	e7bb      	b.n	3116 <ticker_job+0x652>
		ticker = &node[_ticker_id_head];
    319e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    31a2:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    31a6:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    31aa:	e7da      	b.n	3162 <ticker_job+0x69e>
		_ticks_to_expire += ticker->ticks_to_expire;
    31ac:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    31ae:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    31b2:	e7d6      	b.n	3162 <ticker_job+0x69e>
	if (ticker_id_old_head == TICKER_NULL) {
    31b4:	9b03      	ldr	r3, [sp, #12]
    31b6:	2bff      	cmp	r3, #255	; 0xff
    31b8:	d107      	bne.n	31ca <ticker_job+0x706>
		ticks_current = cntr_cnt_get();
    31ba:	f002 fedb 	bl	5f74 <cntr_cnt_get>
    31be:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    31c0:	f002 feb2 	bl	5f28 <cntr_start>
    31c4:	b908      	cbnz	r0, 31ca <ticker_job+0x706>
			instance->ticks_current = ticks_current;
    31c6:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    31ca:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    31ce:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    31d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    31d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    31da:	260a      	movs	r6, #10
    31dc:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    31de:	f002 fec9 	bl	5f74 <cntr_cnt_get>
		cc = instance->ticks_current;
    31e2:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    31e6:	1b03      	subs	r3, r0, r4
    31e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    31ec:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    31ee:	42ab      	cmp	r3, r5
    31f0:	bf2c      	ite	cs
    31f2:	18e4      	addcs	r4, r4, r3
    31f4:	1964      	addcc	r4, r4, r5
		cc &= HAL_TICKER_CNTR_MASK;
    31f6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    31fa:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    31fc:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    3200:	4620      	mov	r0, r4
    3202:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    3204:	f002 feb6 	bl	5f74 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    3208:	1bc0      	subs	r0, r0, r7
    320a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    320e:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3210:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    3212:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    3216:	42a0      	cmp	r0, r4
    3218:	f67f ace4 	bls.w	2be4 <ticker_job+0x120>
		LL_ASSERT(i);
    321c:	3e01      	subs	r6, #1
    321e:	d1de      	bne.n	31de <ticker_job+0x71a>
    3220:	4040      	eors	r0, r0
    3222:	f380 8811 	msr	BASEPRI, r0
    3226:	f04f 0004 	mov.w	r0, #4
    322a:	df02      	svc	2
	instance->job_guard = 0U;
    322c:	2300      	movs	r3, #0
    322e:	f88b 301e 	strb.w	r3, [fp, #30]
    3232:	e4cd      	b.n	2bd0 <ticker_job+0x10c>
	if (!pending) {
    3234:	2b00      	cmp	r3, #0
    3236:	d1f9      	bne.n	322c <ticker_job+0x768>
		flag_compare_update = 1U;
    3238:	2301      	movs	r3, #1
    323a:	9302      	str	r3, [sp, #8]
    323c:	e4b7      	b.n	2bae <ticker_job+0xea>
	while (id_insert !=
    323e:	45b0      	cmp	r8, r6
    3240:	f47f af3c 	bne.w	30bc <ticker_job+0x5f8>
    3244:	e68f      	b.n	2f66 <ticker_job+0x4a2>
}
    3246:	b013      	add	sp, #76	; 0x4c
    3248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    324c:	ff172b5a 	.word	0xff172b5a
    3250:	7f172b59 	.word	0x7f172b59

00003254 <ticker_init>:
{
    3254:	b570      	push	{r4, r5, r6, lr}
    3256:	9e04      	ldr	r6, [sp, #16]
    3258:	f89d 5014 	ldrb.w	r5, [sp, #20]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    325c:	b108      	cbz	r0, 3262 <ticker_init+0xe>
		return TICKER_STATUS_FAILURE;
    325e:	2001      	movs	r0, #1
    3260:	bd70      	pop	{r4, r5, r6, pc}
	instance->count_node = count_node;
    3262:	4c14      	ldr	r4, [pc, #80]	; (32b4 <ticker_init+0x60>)
    3264:	7221      	strb	r1, [r4, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    3266:	9906      	ldr	r1, [sp, #24]
	instance->node = node;
    3268:	6022      	str	r2, [r4, #0]
	instance->count_user = count_user;
    326a:	7263      	strb	r3, [r4, #9]
	instance->user = user;
    326c:	6066      	str	r6, [r4, #4]
    326e:	4622      	mov	r2, r4
	while (count_user--) {
    3270:	3b01      	subs	r3, #1
    3272:	b2db      	uxtb	r3, r3
    3274:	2bff      	cmp	r3, #255	; 0xff
    3276:	d10f      	bne.n	3298 <ticker_init+0x44>
	if (count_op) {
    3278:	2d00      	cmp	r5, #0
    327a:	d1f0      	bne.n	325e <ticker_init+0xa>
	instance->caller_id_get_cb = caller_id_get_cb;
    327c:	9907      	ldr	r1, [sp, #28]
    327e:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    3280:	9908      	ldr	r1, [sp, #32]
    3282:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    3284:	9909      	ldr	r1, [sp, #36]	; 0x24
    3286:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    3288:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    328a:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0U;
    328c:	6195      	str	r5, [r2, #24]
	instance->ticks_current = 0U;
    328e:	6155      	str	r5, [r2, #20]
	instance->ticks_elapsed_first = 0U;
    3290:	7295      	strb	r5, [r2, #10]
	instance->ticks_elapsed_last = 0U;
    3292:	72d5      	strb	r5, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    3294:	4628      	mov	r0, r5
}
    3296:	bd70      	pop	{r4, r5, r6, pc}
		users[count_user].user_op = user_op_;
    3298:	b218      	sxth	r0, r3
    329a:	eb06 04c0 	add.w	r4, r6, r0, lsl #3
    329e:	6061      	str	r1, [r4, #4]
		user_op_ += users[count_user].count_user_op;
    32a0:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    32a4:	eb00 0440 	add.w	r4, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
    32a8:	1a2d      	subs	r5, r5, r0
		user_op_ += users[count_user].count_user_op;
    32aa:	eb01 1104 	add.w	r1, r1, r4, lsl #4
		count_op -= users[count_user].count_user_op;
    32ae:	b2ed      	uxtb	r5, r5
    32b0:	e7de      	b.n	3270 <ticker_init+0x1c>
    32b2:	bf00      	nop
    32b4:	20000184 	.word	0x20000184

000032b8 <ticker_trigger>:
	instance = &_instance[instance_index];
    32b8:	4a07      	ldr	r2, [pc, #28]	; (32d8 <ticker_trigger+0x20>)
    32ba:	212c      	movs	r1, #44	; 0x2c
    32bc:	fb00 2301 	mla	r3, r0, r1, r2
{
    32c0:	b410      	push	{r4}
	if (instance->sched_cb) {
    32c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    32c4:	b12c      	cbz	r4, 32d2 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    32c6:	46a4      	mov	ip, r4
    32c8:	2201      	movs	r2, #1
    32ca:	2103      	movs	r1, #3
    32cc:	2002      	movs	r0, #2
}
    32ce:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    32d0:	4760      	bx	ip
}
    32d2:	bc10      	pop	{r4}
    32d4:	4770      	bx	lr
    32d6:	bf00      	nop
    32d8:	20000184 	.word	0x20000184

000032dc <ticker_start>:
{
    32dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    32e0:	4f25      	ldr	r7, [pc, #148]	; (3378 <ticker_start+0x9c>)
    32e2:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    32e6:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    32e8:	fb08 7000 	mla	r0, r8, r0, r7
    32ec:	fa0f fc81 	sxth.w	ip, r1
    32f0:	f8d0 e004 	ldr.w	lr, [r0, #4]
    32f4:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    32f8:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    32fc:	78f4      	ldrb	r4, [r6, #3]
    32fe:	1c65      	adds	r5, r4, #1
    3300:	b2ed      	uxtb	r5, r5
		last = 0U;
    3302:	45ae      	cmp	lr, r5
    3304:	bf98      	it	ls
    3306:	2500      	movls	r5, #0
	if (last == user->first) {
    3308:	f896 e001 	ldrb.w	lr, [r6, #1]
    330c:	45ae      	cmp	lr, r5
    330e:	d02f      	beq.n	3370 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    3310:	f8d6 c004 	ldr.w	ip, [r6, #4]
    3314:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3318:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    331c:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    3320:	f04f 0a03 	mov.w	sl, #3
    3324:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    3328:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    332a:	9b08      	ldr	r3, [sp, #32]
    332c:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    332e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3330:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    3332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3334:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    3336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3338:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    333a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    333e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    3340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3342:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    3344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3346:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3348:	2302      	movs	r3, #2
    334a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    334c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    334e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3350:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    3352:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3354:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3356:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3358:	6a45      	ldr	r5, [r0, #36]	; 0x24
    335a:	6a03      	ldr	r3, [r0, #32]
    335c:	4608      	mov	r0, r1
    335e:	4798      	blx	r3
    3360:	fb09 7308 	mla	r3, r9, r8, r7
    3364:	2200      	movs	r2, #0
    3366:	2104      	movs	r1, #4
    3368:	47a8      	blx	r5
	return user_op->status;
    336a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    336c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3370:	2001      	movs	r0, #1
}
    3372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3376:	bf00      	nop
    3378:	20000184 	.word	0x20000184

0000337c <ticker_update>:
{
    337c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3380:	4f23      	ldr	r7, [pc, #140]	; (3410 <ticker_update+0x94>)
    3382:	f04f 082c 	mov.w	r8, #44	; 0x2c
    3386:	fb08 7e00 	mla	lr, r8, r0, r7
    338a:	fa0f fc81 	sxth.w	ip, r1
    338e:	f8de 6004 	ldr.w	r6, [lr, #4]
{
    3392:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3394:	eb06 00cc 	add.w	r0, r6, ip, lsl #3
	if (last >= user->count_user_op) {
    3398:	f816 603c 	ldrb.w	r6, [r6, ip, lsl #3]
	last = user->last + 1;
    339c:	78c4      	ldrb	r4, [r0, #3]
    339e:	1c65      	adds	r5, r4, #1
    33a0:	b2ed      	uxtb	r5, r5
		last = 0U;
    33a2:	42ae      	cmp	r6, r5
    33a4:	bf98      	it	ls
    33a6:	2500      	movls	r5, #0
	if (last == user->first) {
    33a8:	7846      	ldrb	r6, [r0, #1]
    33aa:	42ae      	cmp	r6, r5
    33ac:	d02d      	beq.n	340a <ticker_update+0x8e>
	user_op = &user->user_op[user->last];
    33ae:	f8d0 a004 	ldr.w	sl, [r0, #4]
    33b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    33b6:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    33ba:	eb0a 040c 	add.w	r4, sl, ip
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    33be:	2604      	movs	r6, #4
    33c0:	f80a 600c 	strb.w	r6, [sl, ip]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    33c4:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    33c6:	9b08      	ldr	r3, [sp, #32]
    33c8:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    33ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    33cc:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    33ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    33d0:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    33d2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    33d6:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    33d8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    33dc:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
    33de:	2302      	movs	r3, #2
    33e0:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    33e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    33e4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    33e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    33e8:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    33ea:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    33ec:	70c5      	strb	r5, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    33ee:	f8de 3020 	ldr.w	r3, [lr, #32]
    33f2:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    33f6:	4608      	mov	r0, r1
    33f8:	4798      	blx	r3
    33fa:	fb09 7308 	mla	r3, r9, r8, r7
    33fe:	2200      	movs	r2, #0
    3400:	4631      	mov	r1, r6
    3402:	47a8      	blx	r5
	return user_op->status;
    3404:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    340a:	2001      	movs	r0, #1
}
    340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3410:	20000184 	.word	0x20000184

00003414 <ticker_stop>:
{
    3414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3418:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3488 <ticker_stop+0x74>
    341c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3420:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    3424:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    3426:	f8de 0004 	ldr.w	r0, [lr, #4]
    342a:	b20e      	sxth	r6, r1
    342c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    3430:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    3434:	78fc      	ldrb	r4, [r7, #3]
    3436:	1c65      	adds	r5, r4, #1
    3438:	b2ed      	uxtb	r5, r5
		last = 0U;
    343a:	42a8      	cmp	r0, r5
    343c:	bf98      	it	ls
    343e:	2500      	movls	r5, #0
	if (last == user->first) {
    3440:	7878      	ldrb	r0, [r7, #1]
    3442:	42a8      	cmp	r0, r5
    3444:	d01d      	beq.n	3482 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    3446:	6878      	ldr	r0, [r7, #4]
    3448:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    344c:	0124      	lsls	r4, r4, #4
    344e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3450:	f04f 0c05 	mov.w	ip, #5
    3454:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    3458:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    345a:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    345c:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    345e:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3460:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    3462:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3464:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3466:	f8de 3020 	ldr.w	r3, [lr, #32]
    346a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    346e:	4608      	mov	r0, r1
    3470:	4798      	blx	r3
    3472:	fb08 930a 	mla	r3, r8, sl, r9
    3476:	2200      	movs	r2, #0
    3478:	2104      	movs	r1, #4
    347a:	47a0      	blx	r4
	return user_op->status;
    347c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    347e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3482:	2001      	movs	r0, #1
}
    3484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3488:	20000184 	.word	0x20000184

0000348c <ticker_next_slot_get>:
{
    348c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3490:	f8df 8078 	ldr.w	r8, [pc, #120]	; 350c <ticker_next_slot_get+0x80>
    3494:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    3498:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    349a:	fb0a 8000 	mla	r0, sl, r0, r8
    349e:	fa0f fe81 	sxth.w	lr, r1
    34a2:	6845      	ldr	r5, [r0, #4]
    34a4:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    34a8:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    34ac:	78fc      	ldrb	r4, [r7, #3]
    34ae:	1c66      	adds	r6, r4, #1
    34b0:	b2f6      	uxtb	r6, r6
		last = 0U;
    34b2:	42b5      	cmp	r5, r6
    34b4:	bf98      	it	ls
    34b6:	2600      	movls	r6, #0
	if (last == user->first) {
    34b8:	787d      	ldrb	r5, [r7, #1]
    34ba:	42b5      	cmp	r5, r6
    34bc:	d023      	beq.n	3506 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    34be:	f8d7 c004 	ldr.w	ip, [r7, #4]
    34c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    34c6:	0125      	lsls	r5, r4, #4
    34c8:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    34cc:	f04f 0e02 	mov.w	lr, #2
    34d0:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    34d4:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    34d6:	9b08      	ldr	r3, [sp, #32]
    34d8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    34da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    34dc:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    34de:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    34e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    34e2:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    34e4:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    34e6:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    34ea:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    34ec:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    34ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
    34f0:	6a03      	ldr	r3, [r0, #32]
    34f2:	4608      	mov	r0, r1
    34f4:	4798      	blx	r3
    34f6:	fb09 830a 	mla	r3, r9, sl, r8
    34fa:	2200      	movs	r2, #0
    34fc:	2104      	movs	r1, #4
    34fe:	47a8      	blx	r5
	return user_op->status;
    3500:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3506:	2001      	movs	r0, #1
}
    3508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    350c:	20000184 	.word	0x20000184

00003510 <ticker_job_idle_get>:
{
    3510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3514:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3584 <ticker_job_idle_get+0x74>
    3518:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    351c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    3520:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    3522:	f8de 0004 	ldr.w	r0, [lr, #4]
    3526:	b20e      	sxth	r6, r1
    3528:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    352c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    3530:	78fc      	ldrb	r4, [r7, #3]
    3532:	1c65      	adds	r5, r4, #1
    3534:	b2ed      	uxtb	r5, r5
		last = 0U;
    3536:	42a8      	cmp	r0, r5
    3538:	bf98      	it	ls
    353a:	2500      	movls	r5, #0
	if (last == user->first) {
    353c:	7878      	ldrb	r0, [r7, #1]
    353e:	42a8      	cmp	r0, r5
    3540:	d01d      	beq.n	357e <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    3542:	6878      	ldr	r0, [r7, #4]
    3544:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3548:	0124      	lsls	r4, r4, #4
    354a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    354c:	f04f 0c01 	mov.w	ip, #1
    3550:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    3554:	20ff      	movs	r0, #255	; 0xff
    3556:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3558:	2002      	movs	r0, #2
    355a:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    355c:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    355e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3560:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3562:	f8de 3020 	ldr.w	r3, [lr, #32]
    3566:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    356a:	4608      	mov	r0, r1
    356c:	4798      	blx	r3
    356e:	fb08 930a 	mla	r3, r8, sl, r9
    3572:	2200      	movs	r2, #0
    3574:	2104      	movs	r1, #4
    3576:	47a0      	blx	r4
	return user_op->status;
    3578:	6a70      	ldr	r0, [r6, #36]	; 0x24
    357a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    357e:	2001      	movs	r0, #1
}
    3580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3584:	20000184 	.word	0x20000184

00003588 <ticker_job_sched>:
{
    3588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    358c:	4c08      	ldr	r4, [pc, #32]	; (35b0 <ticker_job_sched+0x28>)
    358e:	252c      	movs	r5, #44	; 0x2c
    3590:	fb05 4300 	mla	r3, r5, r0, r4
{
    3594:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3596:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    3598:	6a1b      	ldr	r3, [r3, #32]
    359a:	4608      	mov	r0, r1
    359c:	4798      	blx	r3
    359e:	fb06 4305 	mla	r3, r6, r5, r4
    35a2:	46bc      	mov	ip, r7
    35a4:	2200      	movs	r2, #0
    35a6:	2104      	movs	r1, #4
}
    35a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    35ac:	4760      	bx	ip
    35ae:	bf00      	nop
    35b0:	20000184 	.word	0x20000184

000035b4 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    35b4:	f002 bcde 	b.w	5f74 <cntr_cnt_get>

000035b8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    35b8:	1a40      	subs	r0, r0, r1
}
    35ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35be:	4770      	bx	lr

000035c0 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    35c0:	b508      	push	{r3, lr}
    35c2:	4603      	mov	r3, r0
	if (addr_type > 1) {
    35c4:	2b01      	cmp	r3, #1
{
    35c6:	4608      	mov	r0, r1
	if (addr_type > 1) {
    35c8:	d80e      	bhi.n	35e8 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    35ca:	b133      	cbz	r3, 35da <ll_addr_get+0x1a>
		if (bdaddr) {
    35cc:	b119      	cbz	r1, 35d6 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    35ce:	2206      	movs	r2, #6
    35d0:	4906      	ldr	r1, [pc, #24]	; (35ec <ll_addr_get+0x2c>)
    35d2:	f7fe fb7b 	bl	1ccc <memcpy>
		}

		return rnd_addr;
    35d6:	4805      	ldr	r0, [pc, #20]	; (35ec <ll_addr_get+0x2c>)
    35d8:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    35da:	b119      	cbz	r1, 35e4 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    35dc:	2206      	movs	r2, #6
    35de:	4904      	ldr	r1, [pc, #16]	; (35f0 <ll_addr_get+0x30>)
    35e0:	f7fe fb74 	bl	1ccc <memcpy>
	}

	return pub_addr;
    35e4:	4802      	ldr	r0, [pc, #8]	; (35f0 <ll_addr_get+0x30>)
}
    35e6:	bd08      	pop	{r3, pc}
		return NULL;
    35e8:	2000      	movs	r0, #0
    35ea:	bd08      	pop	{r3, pc}
    35ec:	200001b6 	.word	0x200001b6
    35f0:	200001b0 	.word	0x200001b0

000035f4 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    35f4:	b570      	push	{r4, r5, r6, lr}
    35f6:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
    35f8:	2000      	movs	r0, #0
{
    35fa:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
    35fc:	f001 fe76 	bl	52ec <ll_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
    3600:	4604      	mov	r4, r0
    3602:	b948      	cbnz	r0, 3618 <ll_addr_set+0x24>
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    3604:	2206      	movs	r2, #6
    3606:	4629      	mov	r1, r5
	if (addr_type) {
    3608:	b126      	cbz	r6, 3614 <ll_addr_set+0x20>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    360a:	4804      	ldr	r0, [pc, #16]	; (361c <ll_addr_set+0x28>)
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    360c:	f7fe fb5e 	bl	1ccc <memcpy>
	}

	return 0;
}
    3610:	4620      	mov	r0, r4
    3612:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    3614:	4802      	ldr	r0, [pc, #8]	; (3620 <ll_addr_set+0x2c>)
    3616:	e7f9      	b.n	360c <ll_addr_set+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    3618:	240c      	movs	r4, #12
    361a:	e7f9      	b.n	3610 <ll_addr_set+0x1c>
    361c:	200001b6 	.word	0x200001b6
    3620:	200001b0 	.word	0x200001b0

00003624 <ll_tx_pwr_lvl_get>:
	/* TODO: check for active connection */

	/* TODO: check type here for current or maximum */

	/* TODO: Support TX Power Level other than 0dBm */
	*tx_pwr_lvl = 0;
    3624:	2000      	movs	r0, #0
    3626:	7010      	strb	r0, [r2, #0]

	return 0;
}
    3628:	4770      	bx	lr

0000362a <ll_tx_pwr_get>:

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    362a:	2300      	movs	r3, #0
    362c:	7003      	strb	r3, [r0, #0]
	*max = 0;
    362e:	700b      	strb	r3, [r1, #0]
    3630:	4770      	bx	lr
	...

00003634 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    3634:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    3636:	4802      	ldr	r0, [pc, #8]	; (3640 <_hci_driver_init+0xc>)
    3638:	f7fe fd46 	bl	20c8 <bt_hci_driver_register>

	return 0;
}
    363c:	2000      	movs	r0, #0
    363e:	bd08      	pop	{r3, pc}
    3640:	000089d4 	.word	0x000089d4

00003644 <hci_driver_send>:
{
    3644:	b513      	push	{r0, r1, r4, lr}
	if (!buf->len) {
    3646:	8983      	ldrh	r3, [r0, #12]
{
    3648:	4604      	mov	r4, r0
	if (!buf->len) {
    364a:	b1a3      	cbz	r3, 3676 <hci_driver_send+0x32>
	switch (type) {
    364c:	7d03      	ldrb	r3, [r0, #20]
    364e:	b993      	cbnz	r3, 3676 <hci_driver_send+0x32>
	void *node_rx = NULL;
    3650:	a902      	add	r1, sp, #8
    3652:	f841 3d04 	str.w	r3, [r1, #-4]!
	evt = hci_cmd_handle(buf, &node_rx);
    3656:	f000 f929 	bl	38ac <hci_cmd_handle>
	if (evt) {
    365a:	b130      	cbz	r0, 366a <hci_driver_send+0x26>
		bt_recv_prio(evt);
    365c:	f7fe fcee 	bl	203c <bt_recv_prio>
		if (node_rx) {
    3660:	9901      	ldr	r1, [sp, #4]
    3662:	b111      	cbz	r1, 366a <hci_driver_send+0x26>
			k_fifo_put(&recv_fifo, node_rx);
    3664:	4805      	ldr	r0, [pc, #20]	; (367c <hci_driver_send+0x38>)
    3666:	f003 ff4d 	bl	7504 <k_queue_append>
		net_buf_unref(buf);
    366a:	4620      	mov	r0, r4
    366c:	f003 fa4c 	bl	6b08 <net_buf_unref>
	return err;
    3670:	2000      	movs	r0, #0
}
    3672:	b002      	add	sp, #8
    3674:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3676:	f06f 0015 	mvn.w	r0, #21
    367a:	e7fa      	b.n	3672 <hci_driver_send+0x2e>
    367c:	20002a38 	.word	0x20002a38

00003680 <recv_thread>:
{
    3680:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    3682:	4d1c      	ldr	r5, [pc, #112]	; (36f4 <recv_thread+0x74>)
		radio_rx_fc_set(node_rx->hdr.handle, 0);
    3684:	2600      	movs	r6, #0
    3686:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    368a:	4628      	mov	r0, r5
    368c:	f003 ff5e 	bl	754c <_impl_k_queue_get>
		if (node_rx && !buf) {
    3690:	4604      	mov	r4, r0
    3692:	b318      	cbz	r0, 36dc <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    3694:	f000 fca8 	bl	3fe8 <hci_get_class>
	switch (class) {
    3698:	2802      	cmp	r0, #2
    369a:	9401      	str	r4, [sp, #4]
    369c:	d821      	bhi.n	36e2 <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    369e:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    36a0:	bf0e      	itee	eq
    36a2:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    36a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    36a8:	2001      	movne	r0, #1
    36aa:	f7fe ff45 	bl	2538 <bt_buf_get_rx>
    36ae:	4604      	mov	r4, r0
		if (buf) {
    36b0:	b118      	cbz	r0, 36ba <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    36b2:	4601      	mov	r1, r0
    36b4:	9801      	ldr	r0, [sp, #4]
    36b6:	f000 fbdb 	bl	3e70 <hci_evt_encode>
		radio_rx_fc_set(node_rx->hdr.handle, 0);
    36ba:	9b01      	ldr	r3, [sp, #4]
    36bc:	2100      	movs	r1, #0
    36be:	88d8      	ldrh	r0, [r3, #6]
    36c0:	f001 feb8 	bl	5434 <radio_rx_fc_set>
	node_rx->hdr.next = NULL;
    36c4:	a802      	add	r0, sp, #8
    36c6:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    36ca:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    36cc:	f001 fe96 	bl	53fc <ll_rx_mem_release>
		if (buf) {
    36d0:	b124      	cbz	r4, 36dc <recv_thread+0x5c>
			if (buf->len) {
    36d2:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    36d4:	4620      	mov	r0, r4
			if (buf->len) {
    36d6:	b153      	cbz	r3, 36ee <recv_thread+0x6e>
				bt_recv(buf);
    36d8:	f7fe fc88 	bl	1fec <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    36dc:	f004 f994 	bl	7a08 <_impl_k_yield>
    36e0:	e7d1      	b.n	3686 <recv_thread+0x6>
		LL_ASSERT(0);
    36e2:	4040      	eors	r0, r0
    36e4:	f380 8811 	msr	BASEPRI, r0
    36e8:	f04f 0004 	mov.w	r0, #4
    36ec:	df02      	svc	2
				net_buf_unref(buf);
    36ee:	f003 fa0b 	bl	6b08 <net_buf_unref>
    36f2:	e7f3      	b.n	36dc <recv_thread+0x5c>
    36f4:	20002a38 	.word	0x20002a38

000036f8 <prio_recv_thread>:
{
    36f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    36fa:	4c0c      	ldr	r4, [pc, #48]	; (372c <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    36fc:	4d0c      	ldr	r5, [pc, #48]	; (3730 <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    36fe:	f10d 0102 	add.w	r1, sp, #2
    3702:	a801      	add	r0, sp, #4
    3704:	f001 fe14 	bl	5330 <ll_rx_get>
    3708:	2800      	cmp	r0, #0
    370a:	d1f8      	bne.n	36fe <prio_recv_thread+0x6>
		if (node_rx) {
    370c:	9b01      	ldr	r3, [sp, #4]
    370e:	b133      	cbz	r3, 371e <prio_recv_thread+0x26>
			ll_rx_dequeue();
    3710:	f001 fe46 	bl	53a0 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    3714:	9901      	ldr	r1, [sp, #4]
    3716:	4628      	mov	r0, r5
    3718:	f003 fef4 	bl	7504 <k_queue_append>
    371c:	e7ef      	b.n	36fe <prio_recv_thread+0x6>
    371e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3722:	4620      	mov	r0, r4
    3724:	f004 fa0f 	bl	7b46 <_impl_k_sem_take>
    3728:	e7e9      	b.n	36fe <prio_recv_thread+0x6>
    372a:	bf00      	nop
    372c:	20002a0c 	.word	0x20002a0c
    3730:	20002a38 	.word	0x20002a38

00003734 <hci_driver_open>:
{
    3734:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    3736:	4818      	ldr	r0, [pc, #96]	; (3798 <hci_driver_open+0x64>)
{
    3738:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    373a:	f002 f869 	bl	5810 <ll_init>
	if (err) {
    373e:	4604      	mov	r4, r0
    3740:	bb38      	cbnz	r0, 3792 <hci_driver_open+0x5e>
	hci_init(NULL);
    3742:	f000 fc63 	bl	400c <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    3746:	f06f 0309 	mvn.w	r3, #9
    374a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    374e:	9303      	str	r3, [sp, #12]
    3750:	4912      	ldr	r1, [pc, #72]	; (379c <hci_driver_open+0x68>)
    3752:	4b13      	ldr	r3, [pc, #76]	; (37a0 <hci_driver_open+0x6c>)
    3754:	9405      	str	r4, [sp, #20]
    3756:	9404      	str	r4, [sp, #16]
    3758:	9402      	str	r4, [sp, #8]
    375a:	9401      	str	r4, [sp, #4]
    375c:	9400      	str	r4, [sp, #0]
    375e:	4811      	ldr	r0, [pc, #68]	; (37a4 <hci_driver_open+0x70>)
    3760:	f004 fa9a 	bl	7c98 <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    3764:	4910      	ldr	r1, [pc, #64]	; (37a8 <hci_driver_open+0x74>)
    3766:	480f      	ldr	r0, [pc, #60]	; (37a4 <hci_driver_open+0x70>)
    3768:	f004 fa64 	bl	7c34 <_impl_k_thread_name_set>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    376c:	f06f 0307 	mvn.w	r3, #7
    3770:	9303      	str	r3, [sp, #12]
    3772:	490e      	ldr	r1, [pc, #56]	; (37ac <hci_driver_open+0x78>)
    3774:	9405      	str	r4, [sp, #20]
    3776:	9404      	str	r4, [sp, #16]
    3778:	9402      	str	r4, [sp, #8]
    377a:	9401      	str	r4, [sp, #4]
    377c:	9400      	str	r4, [sp, #0]
    377e:	4b0c      	ldr	r3, [pc, #48]	; (37b0 <hci_driver_open+0x7c>)
    3780:	480c      	ldr	r0, [pc, #48]	; (37b4 <hci_driver_open+0x80>)
    3782:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3786:	f004 fa87 	bl	7c98 <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    378a:	490b      	ldr	r1, [pc, #44]	; (37b8 <hci_driver_open+0x84>)
    378c:	4809      	ldr	r0, [pc, #36]	; (37b4 <hci_driver_open+0x80>)
    378e:	f004 fa51 	bl	7c34 <_impl_k_thread_name_set>
}
    3792:	4620      	mov	r0, r4
    3794:	b006      	add	sp, #24
    3796:	bd10      	pop	{r4, pc}
    3798:	20002a0c 	.word	0x20002a0c
    379c:	200010b8 	.word	0x200010b8
    37a0:	000036f9 	.word	0x000036f9
    37a4:	200001bc 	.word	0x200001bc
    37a8:	000089e8 	.word	0x000089e8
    37ac:	20001278 	.word	0x20001278
    37b0:	00003681 	.word	0x00003681
    37b4:	20000228 	.word	0x20000228
    37b8:	000089f2 	.word	0x000089f2

000037bc <sys_put_le32>:
	dst[1] = val >> 8;
    37bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    37c0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    37c2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    37c4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    37c6:	0a00      	lsrs	r0, r0, #8
    37c8:	704b      	strb	r3, [r1, #1]
    37ca:	70c8      	strb	r0, [r1, #3]
    37cc:	4770      	bx	lr

000037ce <sys_get_le64>:
{
    37ce:	4603      	mov	r3, r0
}
    37d0:	6800      	ldr	r0, [r0, #0]
    37d2:	6859      	ldr	r1, [r3, #4]
    37d4:	4770      	bx	lr

000037d6 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    37d6:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    37d8:	f100 0408 	add.w	r4, r0, #8
{
    37dc:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    37de:	4620      	mov	r0, r4
    37e0:	2102      	movs	r1, #2
{
    37e2:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    37e4:	f003 f9c2 	bl	6b6c <net_buf_simple_add>
	hdr->evt = evt;
    37e8:	233e      	movs	r3, #62	; 0x3e
    37ea:	7003      	strb	r3, [r0, #0]
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    37ec:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
    37ee:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
    37f0:	2101      	movs	r1, #1
    37f2:	4620      	mov	r0, r4
    37f4:	f003 f9ba 	bl	6b6c <net_buf_simple_add>
	me->subevent = subevt;
    37f8:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    37fa:	4629      	mov	r1, r5
    37fc:	4620      	mov	r0, r4
}
    37fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    3802:	f003 b9b3 	b.w	6b6c <net_buf_simple_add>
	...

00003808 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    3808:	b570      	push	{r4, r5, r6, lr}
    380a:	4604      	mov	r4, r0
    380c:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    380e:	4b13      	ldr	r3, [pc, #76]	; (385c <le_remote_feat_complete+0x54>)
{
    3810:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3812:	e9d3 2300 	ldrd	r2, r3, [r3]
    3816:	2200      	movs	r2, #0
    3818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    381c:	4313      	orrs	r3, r2
{
    381e:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3820:	d01b      	beq.n	385a <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    3822:	4b0f      	ldr	r3, [pc, #60]	; (3860 <le_remote_feat_complete+0x58>)
    3824:	e9d3 2300 	ldrd	r2, r3, [r3]
    3828:	2300      	movs	r3, #0
    382a:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    382e:	4313      	orrs	r3, r2
    3830:	d013      	beq.n	385a <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    3832:	220b      	movs	r2, #11
    3834:	2104      	movs	r1, #4
    3836:	f7ff ffce 	bl	37d6 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    383a:	2208      	movs	r2, #8
	sep->status = status;
    383c:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    383e:	f8a0 6001 	strh.w	r6, [r0, #1]
    3842:	3003      	adds	r0, #3
	if (!status) {
    3844:	b924      	cbnz	r4, 3850 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    3846:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    3848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    384c:	f7fe ba3e 	b.w	1ccc <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    3850:	2100      	movs	r1, #0
}
    3852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    3856:	f7fe ba65 	b.w	1d24 <memset>
    385a:	bd70      	pop	{r4, r5, r6, pc}
    385c:	20002878 	.word	0x20002878
    3860:	20002880 	.word	0x20002880

00003864 <cmd_complete>:
{
    3864:	b538      	push	{r3, r4, r5, lr}
    3866:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    386c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    386e:	f7fe fe73 	bl	2558 <bt_buf_get_cmd_complete>
	hdr = net_buf_add(buf, sizeof(*hdr));
    3872:	2102      	movs	r1, #2
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3874:	6020      	str	r0, [r4, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
    3876:	3008      	adds	r0, #8
    3878:	f003 f978 	bl	6b6c <net_buf_simple_add>
	hdr->evt = evt;
    387c:	230e      	movs	r3, #14
    387e:	7003      	strb	r3, [r0, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3880:	1ceb      	adds	r3, r5, #3
	hdr->len = len;
    3882:	7043      	strb	r3, [r0, #1]
	cc = net_buf_add(*buf, sizeof(*cc));
    3884:	6820      	ldr	r0, [r4, #0]
    3886:	2103      	movs	r1, #3
    3888:	3008      	adds	r0, #8
    388a:	f003 f96f 	bl	6b6c <net_buf_simple_add>
	cc->ncmd = 1;
    388e:	2301      	movs	r3, #1
    3890:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    3892:	4b05      	ldr	r3, [pc, #20]	; (38a8 <cmd_complete+0x44>)
    3894:	881b      	ldrh	r3, [r3, #0]
    3896:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    389a:	6820      	ldr	r0, [r4, #0]
    389c:	4629      	mov	r1, r5
    389e:	3008      	adds	r0, #8
}
    38a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    38a4:	f003 b962 	b.w	6b6c <net_buf_simple_add>
    38a8:	20000294 	.word	0x20000294

000038ac <hci_cmd_handle>:
{
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    38ae:	8981      	ldrh	r1, [r0, #12]
{
    38b0:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    38b2:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    38b4:	2902      	cmp	r1, #2
{
    38b6:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    38b8:	950c      	str	r5, [sp, #48]	; 0x30
	if (cmd->len < sizeof(*chdr)) {
    38ba:	d802      	bhi.n	38c2 <hci_cmd_handle+0x16>
		return NULL;
    38bc:	2000      	movs	r0, #0
}
    38be:	b013      	add	sp, #76	; 0x4c
    38c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    38c2:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    38c4:	4ec9      	ldr	r6, [pc, #804]	; (3bec <hci_cmd_handle+0x340>)
    38c6:	781a      	ldrb	r2, [r3, #0]
    38c8:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    38ca:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    38cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    38d0:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    38d2:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    38d4:	d8f2      	bhi.n	38bc <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    38d6:	2103      	movs	r1, #3
    38d8:	f104 0008 	add.w	r0, r4, #8
    38dc:	f003 f955 	bl	6b8a <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    38e0:	8833      	ldrh	r3, [r6, #0]
    38e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    38e6:	0a9b      	lsrs	r3, r3, #10
    38e8:	2b04      	cmp	r3, #4
    38ea:	d05f      	beq.n	39ac <hci_cmd_handle+0x100>
    38ec:	d807      	bhi.n	38fe <hci_cmd_handle+0x52>
    38ee:	2b03      	cmp	r3, #3
    38f0:	d024      	beq.n	393c <hci_cmd_handle+0x90>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    38f2:	2101      	movs	r1, #1
    38f4:	a80c      	add	r0, sp, #48	; 0x30
    38f6:	f7ff ffb5 	bl	3864 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    38fa:	2301      	movs	r3, #1
    38fc:	e0f1      	b.n	3ae2 <hci_cmd_handle+0x236>
	switch (BT_OGF(_opcode)) {
    38fe:	2b08      	cmp	r3, #8
    3900:	f000 80d5 	beq.w	3aae <hci_cmd_handle+0x202>
    3904:	2b3f      	cmp	r3, #63	; 0x3f
    3906:	d1f4      	bne.n	38f2 <hci_cmd_handle+0x46>
	switch (ocf) {
    3908:	3a01      	subs	r2, #1
    390a:	2a09      	cmp	r2, #9
    390c:	d8f1      	bhi.n	38f2 <hci_cmd_handle+0x46>
    390e:	a301      	add	r3, pc, #4	; (adr r3, 3914 <hci_cmd_handle+0x68>)
    3910:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    3914:	00003c8b 	.word	0x00003c8b
    3918:	00003cb9 	.word	0x00003cb9
    391c:	00003ce1 	.word	0x00003ce1
    3920:	000038f3 	.word	0x000038f3
    3924:	000038f3 	.word	0x000038f3
    3928:	00003d2d 	.word	0x00003d2d
    392c:	000038f3 	.word	0x000038f3
    3930:	00003cf7 	.word	0x00003cf7
    3934:	00003d37 	.word	0x00003d37
    3938:	00003da3 	.word	0x00003da3
	switch (ocf) {
    393c:	2a03      	cmp	r2, #3
    393e:	d014      	beq.n	396a <hci_cmd_handle+0xbe>
    3940:	d808      	bhi.n	3954 <hci_cmd_handle+0xa8>
    3942:	2a01      	cmp	r2, #1
    3944:	d1d5      	bne.n	38f2 <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    3946:	68a0      	ldr	r0, [r4, #8]
    3948:	f7ff ff41 	bl	37ce <sys_get_le64>
    394c:	4ba8      	ldr	r3, [pc, #672]	; (3bf0 <hci_cmd_handle+0x344>)
    394e:	e9c3 0100 	strd	r0, r1, [r3]
    3952:	e003      	b.n	395c <hci_cmd_handle+0xb0>
	switch (ocf) {
    3954:	2a2d      	cmp	r2, #45	; 0x2d
    3956:	d017      	beq.n	3988 <hci_cmd_handle+0xdc>
    3958:	2a63      	cmp	r2, #99	; 0x63
    395a:	d1ca      	bne.n	38f2 <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    395c:	2101      	movs	r1, #1
    395e:	a80c      	add	r0, sp, #48	; 0x30
    3960:	f7ff ff80 	bl	3864 <cmd_complete>
	ccst->status = 0x00;
    3964:	7005      	strb	r5, [r0, #0]
	return evt;
    3966:	980c      	ldr	r0, [sp, #48]	; 0x30
    3968:	e7a9      	b.n	38be <hci_cmd_handle+0x12>
	event_mask = DEFAULT_EVENT_MASK;
    396a:	4ba1      	ldr	r3, [pc, #644]	; (3bf0 <hci_cmd_handle+0x344>)
    396c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3970:	f641 71ff 	movw	r1, #8191	; 0x1fff
    3974:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    3978:	4b9e      	ldr	r3, [pc, #632]	; (3bf4 <hci_cmd_handle+0x348>)
    397a:	201f      	movs	r0, #31
    397c:	2100      	movs	r1, #0
    397e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    3982:	f001 fc5b 	bl	523c <ll_reset>
    3986:	e7e9      	b.n	395c <hci_cmd_handle+0xb0>
    3988:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    398a:	2104      	movs	r1, #4
    398c:	a80c      	add	r0, sp, #48	; 0x30
	handle = sys_le16_to_cpu(cmd->handle);
    398e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    3990:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    3992:	f7ff ff67 	bl	3864 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    3996:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    3998:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    399a:	1cc2      	adds	r2, r0, #3
    399c:	4639      	mov	r1, r7
    399e:	4630      	mov	r0, r6
    39a0:	f7ff fe40 	bl	3624 <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
    39a4:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = status;
    39a8:	7020      	strb	r0, [r4, #0]
    39aa:	e7dc      	b.n	3966 <hci_cmd_handle+0xba>
	switch (ocf) {
    39ac:	3a01      	subs	r2, #1
    39ae:	2a08      	cmp	r2, #8
    39b0:	d89f      	bhi.n	38f2 <hci_cmd_handle+0x46>
    39b2:	a301      	add	r3, pc, #4	; (adr r3, 39b8 <hci_cmd_handle+0x10c>)
    39b4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    39b8:	000039dd 	.word	0x000039dd
    39bc:	00003a07 	.word	0x00003a07
    39c0:	00003a7b 	.word	0x00003a7b
    39c4:	000038f3 	.word	0x000038f3
    39c8:	000038f3 	.word	0x000038f3
    39cc:	000038f3 	.word	0x000038f3
    39d0:	000038f3 	.word	0x000038f3
    39d4:	000038f3 	.word	0x000038f3
    39d8:	00003a97 	.word	0x00003a97
	rp = cmd_complete(evt, sizeof(*rp));
    39dc:	2109      	movs	r1, #9
    39de:	a80c      	add	r0, sp, #48	; 0x30
    39e0:	f7ff ff40 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    39e4:	2300      	movs	r3, #0
    39e6:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    39e8:	7083      	strb	r3, [r0, #2]
    39ea:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
    39ec:	f06f 030e 	mvn.w	r3, #14
    39f0:	7143      	strb	r3, [r0, #5]
    39f2:	2305      	movs	r3, #5
	rp->hci_version = LL_VERSION_NUMBER;
    39f4:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
    39f6:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
    39f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = LL_VERSION_NUMBER;
    39fc:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    39fe:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
    3a00:	71c3      	strb	r3, [r0, #7]
    3a02:	7203      	strb	r3, [r0, #8]
    3a04:	e7af      	b.n	3966 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3a06:	2141      	movs	r1, #65	; 0x41
    3a08:	a80c      	add	r0, sp, #48	; 0x30
    3a0a:	f7ff ff2b 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3a0e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3a10:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    3a12:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    3a14:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    3a18:	f7fe f984 	bl	1d24 <memset>
	rp->commands[2] |= BIT(7);
    3a1c:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    3a1e:	7f21      	ldrb	r1, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    3a20:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
    3a22:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a26:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    3a28:	79a3      	ldrb	r3, [r4, #6]
    3a2a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3a2e:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    3a30:	7ae3      	ldrb	r3, [r4, #11]
    3a32:	f043 0304 	orr.w	r3, r3, #4
    3a36:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    3a38:	7be3      	ldrb	r3, [r4, #15]
    3a3a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    3a3e:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    3a40:	7c23      	ldrb	r3, [r4, #16]
    3a42:	f043 0302 	orr.w	r3, r3, #2
    3a46:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    3a48:	7de3      	ldrb	r3, [r4, #23]
    3a4a:	f043 0304 	orr.w	r3, r3, #4
    3a4e:	75e3      	strb	r3, [r4, #23]
	rp->commands[26] |= BIT(6) | BIT(7);
    3a50:	7ee3      	ldrb	r3, [r4, #27]
	rp->commands[27] |= BIT(6) | BIT(7);
    3a52:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[26] |= BIT(0) | BIT(1);
    3a56:	f063 033c 	orn	r3, r3, #60	; 0x3c
	rp->commands[27] |= BIT(6) | BIT(7);
    3a5a:	7721      	strb	r1, [r4, #28]
	rp->commands[26] |= BIT(0) | BIT(1);
    3a5c:	76e3      	strb	r3, [r4, #27]
	rp->commands[28] |= BIT(3);
    3a5e:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[38] |= BIT(7);
    3a60:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    3a64:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3a68:	f062 0208 	orn	r2, r2, #8
	rp->commands[38] |= BIT(7);
    3a6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    3a70:	7761      	strb	r1, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3a72:	76a2      	strb	r2, [r4, #26]
	rp->commands[38] |= BIT(7);
    3a74:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    3a78:	e775      	b.n	3966 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3a7a:	2109      	movs	r1, #9
    3a7c:	a80c      	add	r0, sp, #48	; 0x30
    3a7e:	f7ff fef1 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3a82:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3a84:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3a86:	2208      	movs	r2, #8
	rp->status = 0x00;
    3a88:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3a8c:	f7fe f94a 	bl	1d24 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    3a90:	2360      	movs	r3, #96	; 0x60
    3a92:	7163      	strb	r3, [r4, #5]
    3a94:	e767      	b.n	3966 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3a96:	2107      	movs	r1, #7
    3a98:	a80c      	add	r0, sp, #48	; 0x30
    3a9a:	f7ff fee3 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3a9e:	4601      	mov	r1, r0
    3aa0:	2300      	movs	r3, #0
    3aa2:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    3aa6:	4618      	mov	r0, r3
    3aa8:	f7ff fd8a 	bl	35c0 <ll_addr_get>
    3aac:	e75b      	b.n	3966 <hci_cmd_handle+0xba>
	switch (ocf) {
    3aae:	2a0a      	cmp	r2, #10
    3ab0:	f000 80e5 	beq.w	3c7e <hci_cmd_handle+0x3d2>
    3ab4:	d829      	bhi.n	3b0a <hci_cmd_handle+0x25e>
    3ab6:	2a05      	cmp	r2, #5
    3ab8:	f000 8083 	beq.w	3bc2 <hci_cmd_handle+0x316>
    3abc:	d813      	bhi.n	3ae6 <hci_cmd_handle+0x23a>
    3abe:	2a02      	cmp	r2, #2
    3ac0:	d061      	beq.n	3b86 <hci_cmd_handle+0x2da>
    3ac2:	2a03      	cmp	r2, #3
    3ac4:	d06b      	beq.n	3b9e <hci_cmd_handle+0x2f2>
    3ac6:	2a01      	cmp	r2, #1
    3ac8:	f47f af13 	bne.w	38f2 <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    3acc:	68a0      	ldr	r0, [r4, #8]
    3ace:	f7ff fe7e 	bl	37ce <sys_get_le64>
    3ad2:	4b48      	ldr	r3, [pc, #288]	; (3bf4 <hci_cmd_handle+0x348>)
    3ad4:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    3ad8:	2101      	movs	r1, #1
    3ada:	a80c      	add	r0, sp, #48	; 0x30
    3adc:	f7ff fec2 	bl	3864 <cmd_complete>
	ccst->status = 0x00;
    3ae0:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    3ae2:	7003      	strb	r3, [r0, #0]
    3ae4:	e73f      	b.n	3966 <hci_cmd_handle+0xba>
	switch (ocf) {
    3ae6:	2a07      	cmp	r2, #7
    3ae8:	f000 8153 	beq.w	3d92 <hci_cmd_handle+0x4e6>
    3aec:	f0c0 80a8 	bcc.w	3c40 <hci_cmd_handle+0x394>
    3af0:	2a08      	cmp	r2, #8
    3af2:	f000 80bd 	beq.w	3c70 <hci_cmd_handle+0x3c4>
    3af6:	2a09      	cmp	r2, #9
    3af8:	f47f aefb 	bne.w	38f2 <hci_cmd_handle+0x46>
    3afc:	68a3      	ldr	r3, [r4, #8]
	status = ll_adv_scan_rsp_set(0, cmd->len, &cmd->data[0]);
    3afe:	2000      	movs	r0, #0
    3b00:	1c5a      	adds	r2, r3, #1
    3b02:	7819      	ldrb	r1, [r3, #0]
    3b04:	f002 f8a9 	bl	5c5a <ll_adv_scan_rsp_set>
    3b08:	e05f      	b.n	3bca <hci_cmd_handle+0x31e>
	switch (ocf) {
    3b0a:	2a12      	cmp	r2, #18
    3b0c:	d078      	beq.n	3c00 <hci_cmd_handle+0x354>
    3b0e:	d810      	bhi.n	3b32 <hci_cmd_handle+0x286>
    3b10:	2a10      	cmp	r2, #16
    3b12:	d061      	beq.n	3bd8 <hci_cmd_handle+0x32c>
    3b14:	d870      	bhi.n	3bf8 <hci_cmd_handle+0x34c>
    3b16:	2a0f      	cmp	r2, #15
    3b18:	f47f aeeb 	bne.w	38f2 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3b1c:	2102      	movs	r1, #2
    3b1e:	a80c      	add	r0, sp, #48	; 0x30
    3b20:	f7ff fea0 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3b24:	2300      	movs	r3, #0
    3b26:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3b28:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    3b2a:	f002 f94b 	bl	5dc4 <ll_wl_size_get>
    3b2e:	7060      	strb	r0, [r4, #1]
    3b30:	e719      	b.n	3966 <hci_cmd_handle+0xba>
	switch (ocf) {
    3b32:	2a18      	cmp	r2, #24
    3b34:	d068      	beq.n	3c08 <hci_cmd_handle+0x35c>
    3b36:	d815      	bhi.n	3b64 <hci_cmd_handle+0x2b8>
    3b38:	2a17      	cmp	r2, #23
    3b3a:	f47f aeda 	bne.w	38f2 <hci_cmd_handle+0x46>
    3b3e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    3b40:	2300      	movs	r3, #0
    3b42:	aa0d      	add	r2, sp, #52	; 0x34
    3b44:	f100 0110 	add.w	r1, r0, #16
    3b48:	f002 fa4c 	bl	5fe4 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    3b4c:	2111      	movs	r1, #17
    3b4e:	a80c      	add	r0, sp, #48	; 0x30
    3b50:	f7ff fe88 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3b54:	2300      	movs	r3, #0
    3b56:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    3b5a:	2210      	movs	r2, #16
    3b5c:	a90d      	add	r1, sp, #52	; 0x34
	memcpy(rp->info, build_info, sizeof(build_info));
    3b5e:	f7fe f8b5 	bl	1ccc <memcpy>
    3b62:	e700      	b.n	3966 <hci_cmd_handle+0xba>
	switch (ocf) {
    3b64:	2a1c      	cmp	r2, #28
    3b66:	d05a      	beq.n	3c1e <hci_cmd_handle+0x372>
    3b68:	2a4b      	cmp	r2, #75	; 0x4b
    3b6a:	f47f aec2 	bne.w	38f2 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3b6e:	2103      	movs	r1, #3
    3b70:	a80c      	add	r0, sp, #48	; 0x30
    3b72:	f7ff fe77 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3b76:	4601      	mov	r1, r0
    3b78:	2300      	movs	r3, #0
    3b7a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    3b7e:	3001      	adds	r0, #1
    3b80:	f7ff fd53 	bl	362a <ll_tx_pwr_get>
    3b84:	e6ef      	b.n	3966 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3b86:	2104      	movs	r1, #4
    3b88:	a80c      	add	r0, sp, #48	; 0x30
    3b8a:	f7ff fe6b 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3b8e:	2300      	movs	r3, #0
    3b90:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    3b92:	221b      	movs	r2, #27
    3b94:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    3b96:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    3b98:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    3b9a:	70c3      	strb	r3, [r0, #3]
    3b9c:	e6e3      	b.n	3966 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3b9e:	2109      	movs	r1, #9
    3ba0:	a80c      	add	r0, sp, #48	; 0x30
    3ba2:	f7ff fe5f 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3ba6:	2500      	movs	r5, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3ba8:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3baa:	2208      	movs	r2, #8
	rp->status = 0x00;
    3bac:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3bb0:	4629      	mov	r1, r5
    3bb2:	f7fe f8b7 	bl	1d24 <memset>
	rp->features[1] = (LL_FEAT >> 8)  & 0xFF;
    3bb6:	2348      	movs	r3, #72	; 0x48
    3bb8:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (LL_FEAT >> 16)  & 0xFF;
    3bba:	2301      	movs	r3, #1
	rp->features[0] = LL_FEAT & 0xFF;
    3bbc:	7065      	strb	r5, [r4, #1]
	rp->features[2] = (LL_FEAT >> 16)  & 0xFF;
    3bbe:	70e3      	strb	r3, [r4, #3]
    3bc0:	e6d1      	b.n	3966 <hci_cmd_handle+0xba>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    3bc2:	68a1      	ldr	r1, [r4, #8]
    3bc4:	2001      	movs	r0, #1
    3bc6:	f7ff fd15 	bl	35f4 <ll_addr_set>
	status = ll_adv_enable(0, cmd->enable);
    3bca:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3bcc:	2101      	movs	r1, #1
    3bce:	a80c      	add	r0, sp, #48	; 0x30
    3bd0:	f7ff fe48 	bl	3864 <cmd_complete>
	ccst->status = status;
    3bd4:	7004      	strb	r4, [r0, #0]
    3bd6:	e6c6      	b.n	3966 <hci_cmd_handle+0xba>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3bd8:	2101      	movs	r1, #1
    3bda:	a80c      	add	r0, sp, #48	; 0x30
    3bdc:	f7ff fe42 	bl	3864 <cmd_complete>
    3be0:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    3be2:	f002 f8f1 	bl	5dc8 <ll_wl_clear>
    3be6:	7020      	strb	r0, [r4, #0]
    3be8:	e6bd      	b.n	3966 <hci_cmd_handle+0xba>
    3bea:	bf00      	nop
    3bec:	20000294 	.word	0x20000294
    3bf0:	20002878 	.word	0x20002878
    3bf4:	20002880 	.word	0x20002880
	status = ll_wl_add(&cmd->addr);
    3bf8:	68a0      	ldr	r0, [r4, #8]
    3bfa:	f002 f8fb 	bl	5df4 <ll_wl_add>
    3bfe:	e7e4      	b.n	3bca <hci_cmd_handle+0x31e>
	status = ll_wl_remove(&cmd->addr);
    3c00:	68a0      	ldr	r0, [r4, #8]
    3c02:	f002 f92f 	bl	5e64 <ll_wl_remove>
    3c06:	e7e0      	b.n	3bca <hci_cmd_handle+0x31e>
	rp = cmd_complete(evt, sizeof(*rp));
    3c08:	2109      	movs	r1, #9
    3c0a:	a80c      	add	r0, sp, #48	; 0x30
    3c0c:	f7ff fe2a 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3c10:	2300      	movs	r3, #0
    3c12:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    3c16:	2108      	movs	r1, #8
    3c18:	f000 fa0a 	bl	4030 <bt_rand>
    3c1c:	e6a3      	b.n	3966 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3c1e:	2109      	movs	r1, #9
    3c20:	a80c      	add	r0, sp, #48	; 0x30
    3c22:	f7ff fe1f 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3c26:	4601      	mov	r1, r0
    3c28:	2200      	movs	r2, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3c2a:	4604      	mov	r4, r0
	rp->status = 0x00;
    3c2c:	f801 2b01 	strb.w	r2, [r1], #1
	sys_put_le32(val, dst);
    3c30:	2003      	movs	r0, #3
    3c32:	f7ff fdc3 	bl	37bc <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    3c36:	1d61      	adds	r1, r4, #5
    3c38:	4610      	mov	r0, r2
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3c3a:	f7ff fdbf 	bl	37bc <sys_put_le32>
    3c3e:	e692      	b.n	3966 <hci_cmd_handle+0xba>
    3c40:	68a0      	ldr	r0, [r4, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3c42:	2100      	movs	r1, #0
    3c44:	7903      	ldrb	r3, [r0, #4]
    3c46:	8802      	ldrh	r2, [r0, #0]
    3c48:	910a      	str	r1, [sp, #40]	; 0x28
    3c4a:	9109      	str	r1, [sp, #36]	; 0x24
    3c4c:	9108      	str	r1, [sp, #32]
    3c4e:	9107      	str	r1, [sp, #28]
    3c50:	9106      	str	r1, [sp, #24]
    3c52:	9105      	str	r1, [sp, #20]
    3c54:	7b84      	ldrb	r4, [r0, #14]
    3c56:	9404      	str	r4, [sp, #16]
    3c58:	7b44      	ldrb	r4, [r0, #13]
    3c5a:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    3c5c:	1dc4      	adds	r4, r0, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3c5e:	9402      	str	r4, [sp, #8]
    3c60:	7984      	ldrb	r4, [r0, #6]
    3c62:	9401      	str	r4, [sp, #4]
    3c64:	7940      	ldrb	r0, [r0, #5]
    3c66:	9000      	str	r0, [sp, #0]
    3c68:	4608      	mov	r0, r1
    3c6a:	f001 fe59 	bl	5920 <ll_adv_params_set>
    3c6e:	e7ac      	b.n	3bca <hci_cmd_handle+0x31e>
    3c70:	68a3      	ldr	r3, [r4, #8]
	status = ll_adv_data_set(0, cmd->len, &cmd->data[0]);
    3c72:	2000      	movs	r0, #0
    3c74:	1c5a      	adds	r2, r3, #1
    3c76:	7819      	ldrb	r1, [r3, #0]
    3c78:	f001 ff96 	bl	5ba8 <ll_adv_data_set>
    3c7c:	e7a5      	b.n	3bca <hci_cmd_handle+0x31e>
	status = ll_adv_enable(0, cmd->enable);
    3c7e:	68a3      	ldr	r3, [r4, #8]
    3c80:	4628      	mov	r0, r5
    3c82:	7819      	ldrb	r1, [r3, #0]
    3c84:	f002 f830 	bl	5ce8 <ll_adv_enable>
    3c88:	e79f      	b.n	3bca <hci_cmd_handle+0x31e>
	rp = cmd_complete(evt, sizeof(*rp));
    3c8a:	210d      	movs	r1, #13
    3c8c:	a80c      	add	r0, sp, #48	; 0x30
    3c8e:	f7ff fde9 	bl	3864 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3c92:	2202      	movs	r2, #2
    3c94:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3c96:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    3c98:	2201      	movs	r2, #1
    3c9a:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3c9c:	220d      	movs	r2, #13
	rp->status = 0x00;
    3c9e:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3ca0:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3ca2:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    3ca4:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3ca6:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3ca8:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    3caa:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3cac:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3cae:	7242      	strb	r2, [r0, #9]
    3cb0:	7283      	strb	r3, [r0, #10]
    3cb2:	72c3      	strb	r3, [r0, #11]
    3cb4:	7303      	strb	r3, [r0, #12]
    3cb6:	e656      	b.n	3966 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3cb8:	2141      	movs	r1, #65	; 0x41
    3cba:	a80c      	add	r0, sp, #48	; 0x30
    3cbc:	f7ff fdd2 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3cc0:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3cc2:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    3cc4:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    3cc6:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    3cca:	f7fe f82b 	bl	1d24 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    3cce:	7863      	ldrb	r3, [r4, #1]
    3cd0:	f063 0358 	orn	r3, r3, #88	; 0x58
    3cd4:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    3cd6:	78a3      	ldrb	r3, [r4, #2]
    3cd8:	f043 0303 	orr.w	r3, r3, #3
    3cdc:	70a3      	strb	r3, [r4, #2]
    3cde:	e642      	b.n	3966 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3ce0:	2109      	movs	r1, #9
    3ce2:	a80c      	add	r0, sp, #48	; 0x30
    3ce4:	f7ff fdbe 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3ce8:	2100      	movs	r1, #0
    3cea:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3cee:	2208      	movs	r2, #8
		(void)memset(rp->er, 0x00, sizeof(rp->er));
    3cf0:	f7fe f818 	bl	1d24 <memset>
    3cf4:	e637      	b.n	3966 <hci_cmd_handle+0xba>
	const char build_info[] = HCI_VS_BUILD_INFO;
    3cf6:	4b5d      	ldr	r3, [pc, #372]	; (3e6c <hci_cmd_handle+0x5c0>)
    3cf8:	aa0d      	add	r2, sp, #52	; 0x34
    3cfa:	f103 0610 	add.w	r6, r3, #16
    3cfe:	4615      	mov	r5, r2
    3d00:	6818      	ldr	r0, [r3, #0]
    3d02:	6859      	ldr	r1, [r3, #4]
    3d04:	4614      	mov	r4, r2
    3d06:	c403      	stmia	r4!, {r0, r1}
    3d08:	3308      	adds	r3, #8
    3d0a:	42b3      	cmp	r3, r6
    3d0c:	4622      	mov	r2, r4
    3d0e:	d1f7      	bne.n	3d00 <hci_cmd_handle+0x454>
    3d10:	8819      	ldrh	r1, [r3, #0]
    3d12:	789b      	ldrb	r3, [r3, #2]
    3d14:	8021      	strh	r1, [r4, #0]
    3d16:	70a3      	strb	r3, [r4, #2]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    3d18:	2114      	movs	r1, #20
    3d1a:	a80c      	add	r0, sp, #48	; 0x30
    3d1c:	f7ff fda2 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3d20:	2300      	movs	r3, #0
    3d22:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    3d26:	2213      	movs	r2, #19
    3d28:	4629      	mov	r1, r5
    3d2a:	e718      	b.n	3b5e <hci_cmd_handle+0x2b2>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    3d2c:	68a1      	ldr	r1, [r4, #8]
    3d2e:	2000      	movs	r0, #0
    3d30:	f7ff fc60 	bl	35f4 <ll_addr_set>
    3d34:	e6d0      	b.n	3ad8 <hci_cmd_handle+0x22c>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3d36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3d3a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    3d3e:	3201      	adds	r2, #1
    3d40:	d106      	bne.n	3d50 <hci_cmd_handle+0x4a4>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3d4a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3d4c:	4293      	cmp	r3, r2
    3d4e:	d020      	beq.n	3d92 <hci_cmd_handle+0x4e6>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    3d50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3d54:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3d58:	07db      	lsls	r3, r3, #31
    3d5a:	d51a      	bpl.n	3d92 <hci_cmd_handle+0x4e6>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3d5c:	2118      	movs	r1, #24
    3d5e:	a80c      	add	r0, sp, #48	; 0x30
    3d60:	f7ff fd80 	bl	3864 <cmd_complete>
		rp->status = 0x00;
    3d64:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    3d66:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3d68:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    3d6a:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    3d6c:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    3d6e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    3d72:	1ca1      	adds	r1, r4, #2
    3d74:	f7ff fd22 	bl	37bc <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    3d78:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    3d7c:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    3d7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3d82:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3d86:	71e3      	strb	r3, [r4, #7]
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
    3d88:	2210      	movs	r2, #16
    3d8a:	4631      	mov	r1, r6
    3d8c:	f104 0008 	add.w	r0, r4, #8
    3d90:	e7ae      	b.n	3cf0 <hci_cmd_handle+0x444>
	rp = cmd_complete(evt, sizeof(*rp));
    3d92:	2102      	movs	r1, #2
    3d94:	a80c      	add	r0, sp, #48	; 0x30
    3d96:	f7ff fd65 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3d9a:	2300      	movs	r3, #0
    3d9c:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    3d9e:	7043      	strb	r3, [r0, #1]
    3da0:	e5e1      	b.n	3966 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3da2:	2121      	movs	r1, #33	; 0x21
    3da4:	a80c      	add	r0, sp, #48	; 0x30
    3da6:	f7ff fd5d 	bl	3864 <cmd_complete>
	rp->status = 0x00;
    3daa:	4603      	mov	r3, r0
    3dac:	2200      	movs	r2, #0
    3dae:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    3db6:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3db8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    3dbc:	3101      	adds	r1, #1
    3dbe:	d04b      	beq.n	3e58 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3dc0:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3dc4:	3101      	adds	r1, #1
    3dc6:	d047      	beq.n	3e58 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3dc8:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3dcc:	3101      	adds	r1, #1
    3dce:	d043      	beq.n	3e58 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    3dd0:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3dd4:	3101      	adds	r1, #1
    3dd6:	d03f      	beq.n	3e58 <hci_cmd_handle+0x5ac>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    3dd8:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    3ddc:	4619      	mov	r1, r3
    3dde:	f7ff fced 	bl	37bc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    3de2:	1d61      	adds	r1, r4, #5
    3de4:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    3de8:	f7ff fce8 	bl	37bc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    3dec:	f104 0109 	add.w	r1, r4, #9
    3df0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3df4:	f7ff fce2 	bl	37bc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    3df8:	f104 010d 	add.w	r1, r4, #13
    3dfc:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    3e00:	f7ff fcdc 	bl	37bc <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    3e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3e08:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    3e0c:	3301      	adds	r3, #1
    3e0e:	f104 0311 	add.w	r3, r4, #17
    3e12:	d027      	beq.n	3e64 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    3e14:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    3e18:	3101      	adds	r1, #1
    3e1a:	d023      	beq.n	3e64 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    3e1c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    3e20:	3101      	adds	r1, #1
    3e22:	d01f      	beq.n	3e64 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    3e24:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    3e28:	3101      	adds	r1, #1
    3e2a:	d01b      	beq.n	3e64 <hci_cmd_handle+0x5b8>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    3e2c:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    3e30:	4619      	mov	r1, r3
    3e32:	f7ff fcc3 	bl	37bc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    3e36:	f104 0115 	add.w	r1, r4, #21
    3e3a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    3e3e:	f7ff fcbd 	bl	37bc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    3e42:	f104 0119 	add.w	r1, r4, #25
    3e46:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    3e4a:	f7ff fcb7 	bl	37bc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3e4e:	f104 011d 	add.w	r1, r4, #29
    3e52:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    3e56:	e6f0      	b.n	3c3a <hci_cmd_handle+0x38e>
		(void)memset(rp->ir, 0x00, sizeof(rp->ir));
    3e58:	2210      	movs	r2, #16
    3e5a:	2100      	movs	r1, #0
    3e5c:	4618      	mov	r0, r3
    3e5e:	f7fd ff61 	bl	1d24 <memset>
    3e62:	e7cf      	b.n	3e04 <hci_cmd_handle+0x558>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
    3e64:	2210      	movs	r2, #16
    3e66:	2100      	movs	r1, #0
    3e68:	4618      	mov	r0, r3
    3e6a:	e741      	b.n	3cf0 <hci_cmd_handle+0x444>
    3e6c:	00008a03 	.word	0x00008a03

00003e70 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    3e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e74:	460b      	mov	r3, r1
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    3e76:	7901      	ldrb	r1, [r0, #4]
    3e78:	2902      	cmp	r1, #2
{
    3e7a:	b093      	sub	sp, #76	; 0x4c
    3e7c:	4604      	mov	r4, r0
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    3e7e:	d065      	beq.n	3f4c <hci_evt_encode+0xdc>
	switch (node_rx->hdr.type) {
    3e80:	2907      	cmp	r1, #7
    3e82:	f040 809b 	bne.w	3fbc <hci_evt_encode+0x14c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3e86:	4a50      	ldr	r2, [pc, #320]	; (3fc8 <hci_evt_encode+0x158>)
    3e88:	e9d2 0100 	ldrd	r0, r1, [r2]
    3e8c:	2000      	movs	r0, #0
    3e8e:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    3e92:	ea50 0201 	orrs.w	r2, r0, r1
    3e96:	f104 050a 	add.w	r5, r4, #10
    3e9a:	d008      	beq.n	3eae <hci_evt_encode+0x3e>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    3e9c:	4a4b      	ldr	r2, [pc, #300]	; (3fcc <hci_evt_encode+0x15c>)
    3e9e:	e9d2 0100 	ldrd	r0, r1, [r2]
    3ea2:	2100      	movs	r1, #0
    3ea4:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3ea8:	ea50 0201 	orrs.w	r2, r0, r1
    3eac:	d13d      	bne.n	3f2a <hci_evt_encode+0xba>
		addr.type = adv->tx_addr;
    3eae:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    3eb0:	2206      	movs	r2, #6
		addr.type = adv->tx_addr;
    3eb2:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    3eb6:	4629      	mov	r1, r5
    3eb8:	f10d 0019 	add.w	r0, sp, #25
		addr.type = adv->tx_addr;
    3ebc:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    3ec0:	f7fd ff04 	bl	1ccc <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3ec4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3ec8:	ac08      	add	r4, sp, #32
    3eca:	2b03      	cmp	r3, #3
    3ecc:	d827      	bhi.n	3f1e <hci_evt_encode+0xae>
    3ece:	e8df f003 	tbb	[pc, r3]
    3ed2:	2002      	.short	0x2002
    3ed4:	2422      	.short	0x2422
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    3ed6:	493e      	ldr	r1, [pc, #248]	; (3fd0 <hci_evt_encode+0x160>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    3ed8:	4620      	mov	r0, r4
    3eda:	f7fd feb2 	bl	1c42 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3ede:	f89d 2019 	ldrb.w	r2, [sp, #25]
    3ee2:	9204      	str	r2, [sp, #16]
    3ee4:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3ee8:	9203      	str	r2, [sp, #12]
    3eea:	f89d 201b 	ldrb.w	r2, [sp, #27]
    3eee:	9202      	str	r2, [sp, #8]
    3ef0:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3ef4:	9201      	str	r2, [sp, #4]
    3ef6:	f89d 201d 	ldrb.w	r2, [sp, #29]
    3efa:	9200      	str	r2, [sp, #0]
    3efc:	f89d 301e 	ldrb.w	r3, [sp, #30]
    3f00:	9405      	str	r4, [sp, #20]
    3f02:	4a34      	ldr	r2, [pc, #208]	; (3fd4 <hci_evt_encode+0x164>)
    3f04:	211b      	movs	r1, #27
    3f06:	a80b      	add	r0, sp, #44	; 0x2c
    3f08:	f7fc ff5a 	bl	dc0 <snprintk>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    3f0c:	b013      	add	sp, #76	; 0x4c
    3f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		strcpy(type, "random");
    3f12:	4931      	ldr	r1, [pc, #196]	; (3fd8 <hci_evt_encode+0x168>)
    3f14:	e7e0      	b.n	3ed8 <hci_evt_encode+0x68>
		strcpy(type, "public id");
    3f16:	4931      	ldr	r1, [pc, #196]	; (3fdc <hci_evt_encode+0x16c>)
    3f18:	e7de      	b.n	3ed8 <hci_evt_encode+0x68>
		strcpy(type, "random id");
    3f1a:	4931      	ldr	r1, [pc, #196]	; (3fe0 <hci_evt_encode+0x170>)
    3f1c:	e7dc      	b.n	3ed8 <hci_evt_encode+0x68>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3f1e:	4a31      	ldr	r2, [pc, #196]	; (3fe4 <hci_evt_encode+0x174>)
    3f20:	210a      	movs	r1, #10
    3f22:	4620      	mov	r0, r4
    3f24:	f7fc ff4c 	bl	dc0 <snprintk>
    3f28:	e7d9      	b.n	3ede <hci_evt_encode+0x6e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    3f2a:	2208      	movs	r2, #8
    3f2c:	2113      	movs	r1, #19
    3f2e:	4618      	mov	r0, r3
    3f30:	f7ff fc51 	bl	37d6 <meta_evt>
	sep->handle = 0;
    3f34:	2300      	movs	r3, #0
    3f36:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    3f38:	7a23      	ldrb	r3, [r4, #8]
    3f3a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3f3e:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    3f40:	2206      	movs	r2, #6
    3f42:	4629      	mov	r1, r5
    3f44:	3002      	adds	r0, #2
    3f46:	f7fd fec1 	bl	1ccc <memcpy>
    3f4a:	e7df      	b.n	3f0c <hci_evt_encode+0x9c>
	switch (pdu_data->llctrl.opcode) {
    3f4c:	7ac5      	ldrb	r5, [r0, #11]
    3f4e:	88c6      	ldrh	r6, [r0, #6]
    3f50:	2d09      	cmp	r5, #9
    3f52:	d00a      	beq.n	3f6a <hci_evt_encode+0xfa>
    3f54:	2d0c      	cmp	r5, #12
    3f56:	d00f      	beq.n	3f78 <hci_evt_encode+0x108>
    3f58:	2d07      	cmp	r5, #7
    3f5a:	d12f      	bne.n	3fbc <hci_evt_encode+0x14c>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    3f5c:	7b02      	ldrb	r2, [r0, #12]
    3f5e:	2a0e      	cmp	r2, #14
    3f60:	d1d4      	bne.n	3f0c <hci_evt_encode+0x9c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    3f62:	4632      	mov	r2, r6
    3f64:	2100      	movs	r1, #0
    3f66:	201a      	movs	r0, #26
    3f68:	e003      	b.n	3f72 <hci_evt_encode+0x102>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    3f6a:	f100 0108 	add.w	r1, r0, #8
    3f6e:	4632      	mov	r2, r6
    3f70:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    3f72:	f7ff fc49 	bl	3808 <le_remote_feat_complete>
    3f76:	e7c9      	b.n	3f0c <hci_evt_encode+0x9c>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    3f78:	4a13      	ldr	r2, [pc, #76]	; (3fc8 <hci_evt_encode+0x158>)
    3f7a:	e9d2 8900 	ldrd	r8, r9, [r2]
    3f7e:	f04f 0900 	mov.w	r9, #0
    3f82:	f408 6800 	and.w	r8, r8, #2048	; 0x800
    3f86:	ea58 0209 	orrs.w	r2, r8, r9
    3f8a:	d0bf      	beq.n	3f0c <hci_evt_encode+0x9c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    3f8c:	f103 0708 	add.w	r7, r3, #8
    3f90:	4638      	mov	r0, r7
    3f92:	f002 fdeb 	bl	6b6c <net_buf_simple_add>
	hdr->len = len;
    3f96:	2108      	movs	r1, #8
	hdr->evt = evt;
    3f98:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    3f9a:	7041      	strb	r1, [r0, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    3f9c:	4638      	mov	r0, r7
    3f9e:	f002 fde5 	bl	6b6c <net_buf_simple_add>
	ep->status = 0x00;
    3fa2:	2300      	movs	r3, #0
    3fa4:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    3fa6:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    3faa:	7b23      	ldrb	r3, [r4, #12]
    3fac:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    3fae:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    3fb2:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    3fb4:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    3fb8:	80c3      	strh	r3, [r0, #6]
    3fba:	e7a7      	b.n	3f0c <hci_evt_encode+0x9c>
		LL_ASSERT(0);
    3fbc:	4040      	eors	r0, r0
    3fbe:	f380 8811 	msr	BASEPRI, r0
    3fc2:	f04f 0004 	mov.w	r0, #4
    3fc6:	df02      	svc	2
    3fc8:	20002878 	.word	0x20002878
    3fcc:	20002880 	.word	0x20002880
    3fd0:	00008a16 	.word	0x00008a16
    3fd4:	00008a3f 	.word	0x00008a3f
    3fd8:	00008a1d 	.word	0x00008a1d
    3fdc:	00008a24 	.word	0x00008a24
    3fe0:	00008a2e 	.word	0x00008a2e
    3fe4:	00008a38 	.word	0x00008a38

00003fe8 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    3fe8:	7903      	ldrb	r3, [r0, #4]
    3fea:	2b02      	cmp	r3, #2
    3fec:	d005      	beq.n	3ffa <hci_get_class+0x12>

		switch (node_rx->hdr.type) {
    3fee:	2b07      	cmp	r3, #7
#endif /* CONFIG_BT_CTLR_PHY */
			return HCI_CLASS_EVT_CONNECTION;
#endif /* CONFIG_BT_CONN */

		default:
			return -1;
    3ff0:	bf0c      	ite	eq
    3ff2:	2001      	moveq	r0, #1
    3ff4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3ff8:	4770      	bx	lr
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    3ffa:	7a03      	ldrb	r3, [r0, #8]
    3ffc:	f003 0303 	and.w	r3, r3, #3
    4000:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    4002:	bf0c      	ite	eq
    4004:	2002      	moveq	r0, #2
    4006:	2003      	movne	r0, #3
	}
}
    4008:	4770      	bx	lr
	...

0000400c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    400c:	4b06      	ldr	r3, [pc, #24]	; (4028 <hci_init+0x1c>)
    400e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4012:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4016:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    401a:	4b04      	ldr	r3, [pc, #16]	; (402c <hci_init+0x20>)
    401c:	201f      	movs	r0, #31
    401e:	2100      	movs	r1, #0
    4020:	e9c3 0100 	strd	r0, r1, [r3]
    4024:	4770      	bx	lr
    4026:	bf00      	nop
    4028:	20002878 	.word	0x20002878
    402c:	20002880 	.word	0x20002880

00004030 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    4030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4032:	4607      	mov	r7, r0
    4034:	460e      	mov	r6, r1
	u8_t *buf8 = buf;

	while (len) {
    4036:	460c      	mov	r4, r1
    4038:	1b35      	subs	r5, r6, r4
    403a:	443d      	add	r5, r7
    403c:	b18c      	cbz	r4, 4062 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    403e:	f7fc fffb 	bl	1038 <sys_rand32_get>

		if (len >= sizeof(v)) {
    4042:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    4044:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    4046:	d907      	bls.n	4058 <bt_rand+0x28>
			memcpy(buf8, &v, sizeof(v));
    4048:	2204      	movs	r2, #4
    404a:	eb0d 0102 	add.w	r1, sp, r2
    404e:	4628      	mov	r0, r5
    4050:	f7fd fe3c 	bl	1ccc <memcpy>

			buf8 += sizeof(v);
			len -= sizeof(v);
    4054:	3c04      	subs	r4, #4
    4056:	e7ef      	b.n	4038 <bt_rand+0x8>
		} else {
			memcpy(buf8, &v, len);
    4058:	4622      	mov	r2, r4
    405a:	a901      	add	r1, sp, #4
    405c:	4628      	mov	r0, r5
    405e:	f7fd fe35 	bl	1ccc <memcpy>
			break;
		}
	}

	return 0;
}
    4062:	2000      	movs	r0, #0
    4064:	b003      	add	sp, #12
    4066:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004068 <cpu_sleep>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline void cpu_sleep(void)
{
	__WFE();
    4068:	bf20      	wfe
	__SEV();
    406a:	bf40      	sev
	__WFE();
    406c:	bf20      	wfe
    406e:	4770      	bx	lr

00004070 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    4070:	6008      	str	r0, [r1, #0]
    4072:	4770      	bx	lr

00004074 <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    4074:	4b02      	ldr	r3, [pc, #8]	; (4080 <mayfly_xtal_start+0xc>)
    4076:	6818      	ldr	r0, [r3, #0]
    4078:	6843      	ldr	r3, [r0, #4]
    407a:	2100      	movs	r1, #0
    407c:	681b      	ldr	r3, [r3, #0]
    407e:	4718      	bx	r3
    4080:	20000298 	.word	0x20000298

00004084 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4084:	b918      	cbnz	r0, 408e <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    4086:	680b      	ldr	r3, [r1, #0]
    4088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    408c:	600b      	str	r3, [r1, #0]
    408e:	4770      	bx	lr

00004090 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_PHY */
#endif /* CONFIG_BT_CONN */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    4090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    4094:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    4096:	4294      	cmp	r4, r2
{
    4098:	4681      	mov	r9, r0
    409a:	460f      	mov	r7, r1
    409c:	4690      	mov	r8, r2
	if (_first == last) {
    409e:	d03d      	beq.n	411c <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0U;
	*handle = _radio.pkt_release[_first].handle;
    40a0:	4e1f      	ldr	r6, [pc, #124]	; (4120 <tx_cmplt_get+0x90>)
    40a2:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
    40a6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    40aa:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    40ac:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    40ae:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    40b2:	f506 7aae 	add.w	sl, r6, #348	; 0x15c
		if (*handle != _radio.pkt_release[_first].handle) {
    40b6:	b222      	sxth	r2, r4
    40b8:	f8d6 0168 	ldr.w	r0, [r6, #360]	; 0x168
    40bc:	f8b9 e000 	ldrh.w	lr, [r9]
    40c0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    40c4:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    40c8:	4596      	cmp	lr, r2
    40ca:	d120      	bne.n	410e <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    40cc:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    40ce:	2801      	cmp	r0, #1
    40d0:	f020 0303 	bic.w	r3, r0, #3
    40d4:	d90a      	bls.n	40ec <tx_cmplt_get+0x5c>
    40d6:	b1f3      	cbz	r3, 4116 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    40d8:	1d02      	adds	r2, r0, #4
    40da:	d01c      	beq.n	4116 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    40dc:	7942      	ldrb	r2, [r0, #5]
    40de:	b1d2      	cbz	r2, 4116 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    40e0:	7902      	ldrb	r2, [r0, #4]
    40e2:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    40e6:	3a01      	subs	r2, #1
    40e8:	2a01      	cmp	r2, #1
    40ea:	d814      	bhi.n	4116 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    40ec:	2201      	movs	r2, #1
			cmplt++;
    40ee:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    40f0:	604a      	str	r2, [r1, #4]
			cmplt++;
    40f2:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    40f4:	b113      	cbz	r3, 40fc <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    40f6:	4651      	mov	r1, sl
    40f8:	f7fe fa91 	bl	261e <mem_release>
		}

		_first = _first + 1;
    40fc:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    40fe:	f896 216c 	ldrb.w	r2, [r6, #364]	; 0x16c
		_first = _first + 1;
    4102:	b2e4      	uxtb	r4, r4
			_first = 0U;
    4104:	42a2      	cmp	r2, r4
    4106:	bf08      	it	eq
    4108:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    410a:	4544      	cmp	r4, r8
    410c:	d1d3      	bne.n	40b6 <tx_cmplt_get+0x26>

	*first = _first;
    410e:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    4110:	4628      	mov	r0, r5
    4112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    4116:	f8c1 b004 	str.w	fp, [r1, #4]
    411a:	e7eb      	b.n	40f4 <tx_cmplt_get+0x64>
		return 0;
    411c:	2500      	movs	r5, #0
    411e:	e7f7      	b.n	4110 <tx_cmplt_get+0x80>
    4120:	20000298 	.word	0x20000298

00004124 <connection_get>:
{
    4124:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    4126:	4b09      	ldr	r3, [pc, #36]	; (414c <connection_get+0x28>)
    4128:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    412c:	4282      	cmp	r2, r0
{
    412e:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    4130:	d90a      	bls.n	4148 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    4132:	4602      	mov	r2, r0
    4134:	f44f 7182 	mov.w	r1, #260	; 0x104
    4138:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    413c:	f7fe fa84 	bl	2648 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    4140:	b110      	cbz	r0, 4148 <connection_get+0x24>
    4142:	8c03      	ldrh	r3, [r0, #32]
    4144:	42a3      	cmp	r3, r4
    4146:	d000      	beq.n	414a <connection_get+0x26>
	return 0;
    4148:	2000      	movs	r0, #0
}
    414a:	bd10      	pop	{r4, pc}
    414c:	20000298 	.word	0x20000298

00004150 <role_disable>:
{
    4150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4154:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4156:	2402      	movs	r4, #2
	switch (ticker_id_primary) {
    4158:	2805      	cmp	r0, #5
{
    415a:	4605      	mov	r5, r0
    415c:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    415e:	9402      	str	r4, [sp, #8]
	switch (ticker_id_primary) {
    4160:	d00e      	beq.n	4180 <role_disable+0x30>
    4162:	2806      	cmp	r0, #6
    4164:	f000 8092 	beq.w	428c <role_disable+0x13c>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4168:	f240 808a 	bls.w	4280 <role_disable+0x130>
			conn_handle = ticker_id_primary -
    416c:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    416e:	b280      	uxth	r0, r0
    4170:	f7ff ffd8 	bl	4124 <connection_get>
			if (!conn) {
    4174:	2800      	cmp	r0, #0
    4176:	f000 80dd 	beq.w	4334 <role_disable+0x1e4>
			ticks_active_to_start =
    417a:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    417e:	e010      	b.n	41a2 <role_disable+0x52>
		ticks_xtal_to_start =
    4180:	4b6d      	ldr	r3, [pc, #436]	; (4338 <role_disable+0x1e8>)
    4182:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    4184:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4188:	ab02      	add	r3, sp, #8
    418a:	9300      	str	r3, [sp, #0]
    418c:	460a      	mov	r2, r1
    418e:	4b6b      	ldr	r3, [pc, #428]	; (433c <role_disable+0x1ec>)
    4190:	2103      	movs	r1, #3
    4192:	2000      	movs	r0, #0
    4194:	f7ff f93e 	bl	3414 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4198:	2802      	cmp	r0, #2
    419a:	d06a      	beq.n	4272 <role_disable+0x122>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    419c:	9b02      	ldr	r3, [sp, #8]
    419e:	2b00      	cmp	r3, #0
    41a0:	d16b      	bne.n	427a <role_disable+0x12a>
	LL_ASSERT(!_radio.ticker_id_stop);
    41a2:	4c65      	ldr	r4, [pc, #404]	; (4338 <role_disable+0x1e8>)
    41a4:	7ca3      	ldrb	r3, [r4, #18]
    41a6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    41aa:	2b00      	cmp	r3, #0
    41ac:	d168      	bne.n	4280 <role_disable+0x130>
	ret_cb = TICKER_STATUS_BUSY;
    41ae:	ab06      	add	r3, sp, #24
    41b0:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    41b2:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    41b4:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    41b8:	2103      	movs	r1, #3
    41ba:	9300      	str	r3, [sp, #0]
    41bc:	462a      	mov	r2, r5
    41be:	4b5f      	ldr	r3, [pc, #380]	; (433c <role_disable+0x1ec>)
    41c0:	f7ff f928 	bl	3414 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    41c4:	2802      	cmp	r0, #2
    41c6:	d067      	beq.n	4298 <role_disable+0x148>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    41c8:	9b02      	ldr	r3, [sp, #8]
    41ca:	2b00      	cmp	r3, #0
    41cc:	d145      	bne.n	425a <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    41ce:	7c23      	ldrb	r3, [r4, #16]
    41d0:	429d      	cmp	r5, r3
    41d2:	d002      	beq.n	41da <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    41d4:	7c63      	ldrb	r3, [r4, #17]
    41d6:	429d      	cmp	r5, r3
    41d8:	d13b      	bne.n	4252 <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    41da:	ab06      	add	r3, sp, #24
    41dc:	2202      	movs	r2, #2
    41de:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    41e2:	2200      	movs	r2, #0
    41e4:	9300      	str	r3, [sp, #0]
    41e6:	2103      	movs	r1, #3
    41e8:	4b54      	ldr	r3, [pc, #336]	; (433c <role_disable+0x1ec>)
    41ea:	4610      	mov	r0, r2
    41ec:	f7ff f912 	bl	3414 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    41f0:	2802      	cmp	r0, #2
    41f2:	d107      	bne.n	4204 <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    41f4:	2201      	movs	r2, #1
    41f6:	4611      	mov	r1, r2
    41f8:	2003      	movs	r0, #3
    41fa:	f7fe fa83 	bl	2704 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    41fe:	9b03      	ldr	r3, [sp, #12]
    4200:	2b02      	cmp	r3, #2
    4202:	d03d      	beq.n	4280 <role_disable+0x130>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4204:	9803      	ldr	r0, [sp, #12]
    4206:	2800      	cmp	r0, #0
    4208:	d162      	bne.n	42d0 <role_disable+0x180>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    420a:	2302      	movs	r3, #2
    420c:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    420e:	7c23      	ldrb	r3, [r4, #16]
    4210:	2b00      	cmp	r3, #0
    4212:	d035      	beq.n	4280 <role_disable+0x130>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4214:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0U;
    4216:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4218:	2201      	movs	r2, #1
    421a:	9300      	str	r3, [sp, #0]
    421c:	2103      	movs	r1, #3
    421e:	4b47      	ldr	r3, [pc, #284]	; (433c <role_disable+0x1ec>)
    4220:	f7ff f8f8 	bl	3414 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4224:	2802      	cmp	r0, #2
    4226:	d107      	bne.n	4238 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4228:	2201      	movs	r2, #1
    422a:	4611      	mov	r1, r2
    422c:	2003      	movs	r0, #3
    422e:	f7fe fa69 	bl	2704 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    4232:	9b04      	ldr	r3, [sp, #16]
    4234:	2b02      	cmp	r3, #2
    4236:	d023      	beq.n	4280 <role_disable+0x130>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4238:	9a04      	ldr	r2, [sp, #16]
    423a:	2a00      	cmp	r2, #0
    423c:	d13a      	bne.n	42b4 <role_disable+0x164>
			ticks_xtal_to_start &= ~XON_BITMASK;
    423e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    4242:	45b0      	cmp	r8, r6
    4244:	d942      	bls.n	42cc <role_disable+0x17c>
				ret = mayfly_enqueue(
    4246:	4b3e      	ldr	r3, [pc, #248]	; (4340 <role_disable+0x1f0>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4248:	4611      	mov	r1, r2
    424a:	2003      	movs	r0, #3
    424c:	f7fe fa82 	bl	2754 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4250:	b9b0      	cbnz	r0, 4280 <role_disable+0x130>
	if (!_radio.ticker_id_stop) {
    4252:	7ca3      	ldrb	r3, [r4, #18]
    4254:	b90b      	cbnz	r3, 425a <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    4256:	2301      	movs	r3, #1
    4258:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0U;
    425a:	2300      	movs	r3, #0
    425c:	74a3      	strb	r3, [r4, #18]
	return ret_cb ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    425e:	9b02      	ldr	r3, [sp, #8]
    4260:	2b00      	cmp	r3, #0
    4262:	bf14      	ite	ne
    4264:	200c      	movne	r0, #12
    4266:	2000      	moveq	r0, #0
}
    4268:	b006      	add	sp, #24
    426a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    426e:	f7ff fefb 	bl	4068 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4272:	9b02      	ldr	r3, [sp, #8]
    4274:	2b02      	cmp	r3, #2
    4276:	d0fa      	beq.n	426e <role_disable+0x11e>
    4278:	e790      	b.n	419c <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    427a:	9b02      	ldr	r3, [sp, #8]
    427c:	2b01      	cmp	r3, #1
    427e:	d090      	beq.n	41a2 <role_disable+0x52>
		LL_ASSERT(0);
    4280:	4040      	eors	r0, r0
    4282:	f380 8811 	msr	BASEPRI, r0
    4286:	f04f 0004 	mov.w	r0, #4
    428a:	df02      	svc	2
		ticks_xtal_to_start =
    428c:	4b2a      	ldr	r3, [pc, #168]	; (4338 <role_disable+0x1e8>)
    428e:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    4292:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    4296:	e784      	b.n	41a2 <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    4298:	7c63      	ldrb	r3, [r4, #17]
    429a:	429d      	cmp	r5, r3
    429c:	d104      	bne.n	42a8 <role_disable+0x158>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    429e:	2201      	movs	r2, #1
    42a0:	4611      	mov	r1, r2
    42a2:	2003      	movs	r0, #3
    42a4:	f7fe fa2e 	bl	2704 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    42a8:	9b02      	ldr	r3, [sp, #8]
    42aa:	2b02      	cmp	r3, #2
    42ac:	d18c      	bne.n	41c8 <role_disable+0x78>
			cpu_sleep();
    42ae:	f7ff fedb 	bl	4068 <cpu_sleep>
    42b2:	e7f9      	b.n	42a8 <role_disable+0x158>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    42b4:	9b04      	ldr	r3, [sp, #16]
    42b6:	2b01      	cmp	r3, #1
    42b8:	d1e2      	bne.n	4280 <role_disable+0x130>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    42ba:	2200      	movs	r2, #0
    42bc:	4611      	mov	r1, r2
    42be:	4b20      	ldr	r3, [pc, #128]	; (4340 <role_disable+0x1f0>)
    42c0:	2003      	movs	r0, #3
    42c2:	f7fe fa47 	bl	2754 <mayfly_enqueue>
			LL_ASSERT(!ret);
    42c6:	4602      	mov	r2, r0
    42c8:	2800      	cmp	r0, #0
    42ca:	d1d9      	bne.n	4280 <role_disable+0x130>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    42cc:	4b1d      	ldr	r3, [pc, #116]	; (4344 <role_disable+0x1f4>)
    42ce:	e7bb      	b.n	4248 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    42d0:	9d03      	ldr	r5, [sp, #12]
    42d2:	2d01      	cmp	r5, #1
    42d4:	d1d4      	bne.n	4280 <role_disable+0x130>
		if (ticker_id_stop != TICKER_NULL) {
    42d6:	2fff      	cmp	r7, #255	; 0xff
    42d8:	d019      	beq.n	430e <role_disable+0x1be>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    42da:	ab06      	add	r3, sp, #24
    42dc:	2202      	movs	r2, #2
    42de:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    42e2:	2103      	movs	r1, #3
    42e4:	9300      	str	r3, [sp, #0]
    42e6:	463a      	mov	r2, r7
    42e8:	4b14      	ldr	r3, [pc, #80]	; (433c <role_disable+0x1ec>)
    42ea:	2000      	movs	r0, #0
    42ec:	f7ff f892 	bl	3414 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    42f0:	2802      	cmp	r0, #2
    42f2:	d107      	bne.n	4304 <role_disable+0x1b4>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    42f4:	462a      	mov	r2, r5
    42f6:	4629      	mov	r1, r5
    42f8:	2003      	movs	r0, #3
    42fa:	f7fe fa03 	bl	2704 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    42fe:	9b05      	ldr	r3, [sp, #20]
    4300:	2b02      	cmp	r3, #2
    4302:	d0bd      	beq.n	4280 <role_disable+0x130>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    4304:	9b05      	ldr	r3, [sp, #20]
    4306:	b113      	cbz	r3, 430e <role_disable+0x1be>
    4308:	9b05      	ldr	r3, [sp, #20]
    430a:	2b01      	cmp	r3, #1
    430c:	d1b8      	bne.n	4280 <role_disable+0x130>
		if (_radio.role != ROLE_NONE) {
    430e:	7d23      	ldrb	r3, [r4, #20]
    4310:	2b00      	cmp	r3, #0
    4312:	d09e      	beq.n	4252 <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4314:	4b0c      	ldr	r3, [pc, #48]	; (4348 <role_disable+0x1f8>)
    4316:	2204      	movs	r2, #4
    4318:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    431a:	2200      	movs	r2, #0
    431c:	4611      	mov	r1, r2
    431e:	2003      	movs	r0, #3
    4320:	f7fe fa18 	bl	2754 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4324:	2800      	cmp	r0, #0
    4326:	d1ab      	bne.n	4280 <role_disable+0x130>
			while (_radio.role != ROLE_NONE) {
    4328:	7d23      	ldrb	r3, [r4, #20]
    432a:	2b00      	cmp	r3, #0
    432c:	d091      	beq.n	4252 <role_disable+0x102>
				cpu_sleep();
    432e:	f7ff fe9b 	bl	4068 <cpu_sleep>
    4332:	e7f9      	b.n	4328 <role_disable+0x1d8>
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    4334:	4620      	mov	r0, r4
    4336:	e797      	b.n	4268 <role_disable+0x118>
    4338:	20000298 	.word	0x20000298
    433c:	00004071 	.word	0x00004071
    4340:	200028a8 	.word	0x200028a8
    4344:	20002908 	.word	0x20002908
    4348:	200028c8 	.word	0x200028c8

0000434c <packet_tx_enqueue>:
{
    434c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    4350:	4c33      	ldr	r4, [pc, #204]	; (4420 <packet_tx_enqueue+0xd4>)
{
    4352:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    4354:	2500      	movs	r5, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    4356:	b12e      	cbz	r6, 4364 <packet_tx_enqueue+0x18>
    4358:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
    435c:	f894 216e 	ldrb.w	r2, [r4, #366]	; 0x16e
    4360:	429a      	cmp	r2, r3
    4362:	d101      	bne.n	4368 <packet_tx_enqueue+0x1c>
    4364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4368:	f894 816d 	ldrb.w	r8, [r4, #365]	; 0x16d
    436c:	f8d4 9164 	ldr.w	r9, [r4, #356]	; 0x164
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4370:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    4374:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4378:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    437c:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    4380:	685f      	ldr	r7, [r3, #4]
		node_tx_new->next = NULL;
    4382:	603d      	str	r5, [r7, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4384:	f7fe f960 	bl	2648 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
    4388:	f839 1038 	ldrh.w	r1, [r9, r8, lsl #3]
    438c:	8c03      	ldrh	r3, [r0, #32]
    438e:	428b      	cmp	r3, r1
    4390:	d11f      	bne.n	43d2 <packet_tx_enqueue+0x86>
			if (conn->pkt_tx_data == 0) {
    4392:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
    4396:	b943      	cbnz	r3, 43aa <packet_tx_enqueue+0x5e>
				if (conn->pkt_tx_head == 0) {
    4398:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    439c:	f8c0 70f8 	str.w	r7, [r0, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    43a0:	b91b      	cbnz	r3, 43aa <packet_tx_enqueue+0x5e>
					conn->pkt_tx_head = node_tx_new;
    43a2:	f8c0 70ec 	str.w	r7, [r0, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    43a6:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    43aa:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
    43ae:	b103      	cbz	r3, 43b2 <packet_tx_enqueue+0x66>
				conn->pkt_tx_last->next = node_tx_new;
    43b0:	601f      	str	r7, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
    43b2:	f8c0 70fc 	str.w	r7, [r0, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    43b6:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
		if (first == _radio.packet_tx_count) {
    43ba:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
		first = _radio.packet_tx_first + 1;
    43be:	3301      	adds	r3, #1
    43c0:	b2db      	uxtb	r3, r3
			first = 0U;
    43c2:	429a      	cmp	r2, r3
    43c4:	bf08      	it	eq
    43c6:	2300      	moveq	r3, #0
    43c8:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    43ca:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
    43ce:	b2f6      	uxtb	r6, r6
    43d0:	e7c1      	b.n	4356 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    43d2:	793b      	ldrb	r3, [r7, #4]
    43d4:	f365 0301 	bfi	r3, r5, #0, #2
    43d8:	713b      	strb	r3, [r7, #4]
	last = _radio.packet_release_last + 1;
    43da:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
	if (last == _radio.packet_tx_count) {
    43de:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	last = _radio.packet_release_last + 1;
    43e2:	3301      	adds	r3, #1
    43e4:	b2db      	uxtb	r3, r3
		last = 0U;
    43e6:	429a      	cmp	r2, r3
    43e8:	bf08      	it	eq
    43ea:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    43ec:	f894 216f 	ldrb.w	r2, [r4, #367]	; 0x16f
    43f0:	429a      	cmp	r2, r3
    43f2:	d105      	bne.n	4400 <packet_tx_enqueue+0xb4>
    43f4:	4040      	eors	r0, r0
    43f6:	f380 8811 	msr	BASEPRI, r0
    43fa:	f04f 0004 	mov.w	r0, #4
    43fe:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    4400:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
    4404:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
    4408:	f822 1030 	strh.w	r1, [r2, r0, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    440c:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    4410:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4414:	6057      	str	r7, [r2, #4]
	_radio.packet_release_last = last;
    4416:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
	radio_event_callback();
    441a:	f001 f9f3 	bl	5804 <radio_event_callback>
    441e:	e7ca      	b.n	43b6 <packet_tx_enqueue+0x6a>
    4420:	20000298 	.word	0x20000298

00004424 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    4424:	4b04      	ldr	r3, [pc, #16]	; (4438 <ticker_job_disable+0x14>)
    4426:	7d5b      	ldrb	r3, [r3, #21]
    4428:	b123      	cbz	r3, 4434 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    442a:	2101      	movs	r1, #1
    442c:	2200      	movs	r2, #0
    442e:	4608      	mov	r0, r1
    4430:	f7fe b968 	b.w	2704 <mayfly_enable>
    4434:	4770      	bx	lr
    4436:	bf00      	nop
    4438:	20000298 	.word	0x20000298

0000443c <mayfly_xtal_retain.part.6>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    443c:	b508      	push	{r3, lr}
			s_xtal_retained = 0U;
    443e:	4b0a      	ldr	r3, [pc, #40]	; (4468 <mayfly_xtal_retain.part.6+0x2c>)
    4440:	2200      	movs	r2, #0
    4442:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    4444:	b168      	cbz	r0, 4462 <mayfly_xtal_retain.part.6+0x26>
    4446:	2801      	cmp	r0, #1
    4448:	d105      	bne.n	4456 <mayfly_xtal_retain.part.6+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    444a:	4b08      	ldr	r3, [pc, #32]	; (446c <mayfly_xtal_retain.part.6+0x30>)
			retval = mayfly_enqueue(caller_id,
    444c:	2200      	movs	r2, #0
    444e:	4611      	mov	r1, r2
    4450:	f7fe f980 	bl	2754 <mayfly_enqueue>
			LL_ASSERT(!retval);
    4454:	b138      	cbz	r0, 4466 <mayfly_xtal_retain.part.6+0x2a>
    4456:	4040      	eors	r0, r0
    4458:	f380 8811 	msr	BASEPRI, r0
    445c:	f04f 0004 	mov.w	r0, #4
    4460:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    4462:	4b03      	ldr	r3, [pc, #12]	; (4470 <mayfly_xtal_retain.part.6+0x34>)
    4464:	e7f2      	b.n	444c <mayfly_xtal_retain.part.6+0x10>
    4466:	bd08      	pop	{r3, pc}
    4468:	20000474 	.word	0x20000474
    446c:	200028f8 	.word	0x200028f8
    4470:	200028e8 	.word	0x200028e8

00004474 <isr.part.20>:
		LL_ASSERT(0);
    4474:	4040      	eors	r0, r0
    4476:	f380 8811 	msr	BASEPRI, r0
    447a:	f04f 0004 	mov.w	r0, #4
    447e:	df02      	svc	2

00004480 <chan_set.part.19>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    4480:	4040      	eors	r0, r0
    4482:	f380 8811 	msr	BASEPRI, r0
    4486:	f04f 0004 	mov.w	r0, #4
    448a:	df02      	svc	2

0000448c <chan_set>:
	switch (chan) {
    448c:	2826      	cmp	r0, #38	; 0x26
{
    448e:	b510      	push	{r4, lr}
    4490:	4604      	mov	r4, r0
	switch (chan) {
    4492:	d00b      	beq.n	44ac <chan_set+0x20>
    4494:	2827      	cmp	r0, #39	; 0x27
    4496:	d00b      	beq.n	44b0 <chan_set+0x24>
    4498:	2825      	cmp	r0, #37	; 0x25
    449a:	d10b      	bne.n	44b4 <chan_set+0x28>
		radio_freq_chan_set(2);
    449c:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    449e:	f001 ff77 	bl	6390 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    44a2:	4620      	mov	r0, r4
}
    44a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    44a8:	f001 bf78 	b.w	639c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    44ac:	201a      	movs	r0, #26
    44ae:	e7f6      	b.n	449e <chan_set+0x12>
		radio_freq_chan_set(80);
    44b0:	2050      	movs	r0, #80	; 0x50
    44b2:	e7f4      	b.n	449e <chan_set+0x12>
		if (chan < 11) {
    44b4:	280a      	cmp	r0, #10
    44b6:	d802      	bhi.n	44be <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
    44b8:	3002      	adds	r0, #2
    44ba:	0040      	lsls	r0, r0, #1
    44bc:	e7ef      	b.n	449e <chan_set+0x12>
		} else if (chan < 40) {
    44be:	2827      	cmp	r0, #39	; 0x27
    44c0:	d801      	bhi.n	44c6 <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    44c2:	3003      	adds	r0, #3
    44c4:	e7f9      	b.n	44ba <chan_set+0x2e>
    44c6:	f7ff ffdb 	bl	4480 <chan_set.part.19>
	...

000044cc <adv_setup>:
{
    44cc:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
    44ce:	4c2a      	ldr	r4, [pc, #168]	; (4578 <adv_setup+0xac>)
    44d0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    44d4:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    44d8:	429a      	cmp	r2, r3
    44da:	d006      	beq.n	44ea <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    44dc:	3301      	adds	r3, #1
    44de:	b2db      	uxtb	r3, r3
			first = 0U;
    44e0:	2b02      	cmp	r3, #2
    44e2:	bf08      	it	eq
    44e4:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    44e6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (_radio.advertiser.scan_data.first != _radio.
    44ea:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    44ee:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
    44f2:	429a      	cmp	r2, r3
    44f4:	d006      	beq.n	4504 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    44f6:	3301      	adds	r3, #1
    44f8:	b2db      	uxtb	r3, r3
			first = 0U;
    44fa:	2b02      	cmp	r3, #2
    44fc:	bf08      	it	eq
    44fe:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    4500:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	pdu = (void *)_radio.advertiser.adv_data.data
    4504:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    4508:	232a      	movs	r3, #42	; 0x2a
    450a:	2527      	movs	r5, #39	; 0x27
    450c:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
    4510:	1960      	adds	r0, r4, r5
    4512:	f001 ffa5 	bl	6460 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    4516:	5d63      	ldrb	r3, [r4, r5]
    4518:	f003 030f 	and.w	r3, r3, #15
    451c:	2b02      	cmp	r3, #2
    451e:	d023      	beq.n	4568 <adv_setup+0x9c>
    4520:	2b07      	cmp	r3, #7
    4522:	d021      	beq.n	4568 <adv_setup+0x9c>
		_radio.state = STATE_TX;
    4524:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    4526:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    4528:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    452a:	f002 f8a3 	bl	6674 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    452e:	2000      	movs	r0, #0
    4530:	f002 f80e 	bl	6550 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    4534:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4538:	f3c3 0202 	ubfx	r2, r3, #0, #3
    453c:	b2d3      	uxtb	r3, r2
    453e:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    4540:	2000      	movs	r0, #0
    4542:	f011 0f01 	tst.w	r1, #1
    4546:	f100 0501 	add.w	r5, r0, #1
    454a:	d012      	beq.n	4572 <adv_setup+0xa6>
		(_radio.advertiser.chan_map_current - 1);
    454c:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    454e:	4013      	ands	r3, r2
    4550:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    4554:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    4556:	f363 0202 	bfi	r2, r3, #0, #3
    455a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    455e:	3025      	adds	r0, #37	; 0x25
}
    4560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
    4564:	f7ff bf92 	b.w	448c <chan_set>
		_radio.state = STATE_CLOSE;
    4568:	2303      	movs	r3, #3
    456a:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
    456c:	f002 f806 	bl	657c <radio_switch_complete_and_disable>
    4570:	e7e0      	b.n	4534 <adv_setup+0x68>
		bitmap >>= 1;
    4572:	0849      	lsrs	r1, r1, #1
    4574:	4628      	mov	r0, r5
    4576:	e7e4      	b.n	4542 <adv_setup+0x76>
    4578:	20000298 	.word	0x20000298

0000457c <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    457c:	b2c0      	uxtb	r0, r0
{
    457e:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4580:	1f03      	subs	r3, r0, #4
    4582:	2b01      	cmp	r3, #1
    4584:	d901      	bls.n	458a <mayfly_radio_stop+0xe>
    4586:	f7ff ff7b 	bl	4480 <chan_set.part.19>
	radio_used = ((_radio.state != STATE_NONE) &&
    458a:	4a08      	ldr	r2, [pc, #32]	; (45ac <mayfly_radio_stop+0x30>)
    458c:	7d53      	ldrb	r3, [r2, #21]
		      (_radio.state != STATE_STOP) &&
    458e:	b13b      	cbz	r3, 45a0 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    4590:	3b04      	subs	r3, #4
    4592:	2b01      	cmp	r3, #1
    4594:	d904      	bls.n	45a0 <mayfly_radio_stop+0x24>
			_radio.state = state;
    4596:	7550      	strb	r0, [r2, #21]
}
    4598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    459c:	f001 bf82 	b.w	64a4 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    45a0:	f001 ffb2 	bl	6508 <radio_is_idle>
    45a4:	2800      	cmp	r0, #0
    45a6:	d0f7      	beq.n	4598 <mayfly_radio_stop+0x1c>
}
    45a8:	bd08      	pop	{r3, pc}
    45aa:	bf00      	nop
    45ac:	20000298 	.word	0x20000298

000045b0 <mayfly_radio_active>:
{
    45b0:	b508      	push	{r3, lr}
    45b2:	4a0a      	ldr	r2, [pc, #40]	; (45dc <mayfly_radio_active+0x2c>)
		if (s_active++) {
    45b4:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    45b6:	b138      	cbz	r0, 45c8 <mayfly_radio_active+0x18>
		if (s_active++) {
    45b8:	1c59      	adds	r1, r3, #1
    45ba:	7011      	strb	r1, [r2, #0]
    45bc:	b963      	cbnz	r3, 45d8 <mayfly_radio_active+0x28>
		radio_active_callback(1);
    45be:	2001      	movs	r0, #1
}
    45c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    45c4:	f001 b91c 	b.w	5800 <radio_active_callback>
		LL_ASSERT(s_active);
    45c8:	b90b      	cbnz	r3, 45ce <mayfly_radio_active+0x1e>
    45ca:	f7ff ff59 	bl	4480 <chan_set.part.19>
		if (--s_active) {
    45ce:	3b01      	subs	r3, #1
    45d0:	b2db      	uxtb	r3, r3
    45d2:	7013      	strb	r3, [r2, #0]
    45d4:	2b00      	cmp	r3, #0
    45d6:	d0f3      	beq.n	45c0 <mayfly_radio_active+0x10>
    45d8:	bd08      	pop	{r3, pc}
    45da:	bf00      	nop
    45dc:	20000438 	.word	0x20000438

000045e0 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    45e0:	2000      	movs	r0, #0
    45e2:	f7ff bfe5 	b.w	45b0 <mayfly_radio_active>
	...

000045e8 <event_stop>:
	s_mfy_radio_stop.param = context;
    45e8:	4a06      	ldr	r2, [pc, #24]	; (4604 <event_stop+0x1c>)
{
    45ea:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    45ec:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    45ee:	4613      	mov	r3, r2
    45f0:	2200      	movs	r2, #0
    45f2:	4611      	mov	r1, r2
    45f4:	4610      	mov	r0, r2
    45f6:	f7fe f8ad 	bl	2754 <mayfly_enqueue>
	LL_ASSERT(!retval);
    45fa:	b108      	cbz	r0, 4600 <event_stop+0x18>
    45fc:	f7ff ff40 	bl	4480 <chan_set.part.19>
    4600:	bd08      	pop	{r3, pc}
    4602:	bf00      	nop
    4604:	200028b8 	.word	0x200028b8

00004608 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4608:	2200      	movs	r2, #0
{
    460a:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    460c:	4611      	mov	r1, r2
    460e:	4b04      	ldr	r3, [pc, #16]	; (4620 <event_xtal+0x18>)
    4610:	4610      	mov	r0, r2
    4612:	f7fe f89f 	bl	2754 <mayfly_enqueue>
	LL_ASSERT(!retval);
    4616:	b108      	cbz	r0, 461c <event_xtal+0x14>
    4618:	f7ff ff32 	bl	4480 <chan_set.part.19>
    461c:	bd08      	pop	{r3, pc}
    461e:	bf00      	nop
    4620:	200028d8 	.word	0x200028d8

00004624 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4624:	2200      	movs	r2, #0
{
    4626:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4628:	4611      	mov	r1, r2
    462a:	4b04      	ldr	r3, [pc, #16]	; (463c <event_active+0x18>)
    462c:	4610      	mov	r0, r2
    462e:	f7fe f891 	bl	2754 <mayfly_enqueue>
	LL_ASSERT(!retval);
    4632:	b108      	cbz	r0, 4638 <event_active+0x14>
    4634:	f7ff ff24 	bl	4480 <chan_set.part.19>
    4638:	bd08      	pop	{r3, pc}
    463a:	bf00      	nop
    463c:	20002888 	.word	0x20002888

00004640 <ticker_success_assert>:
{
    4640:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    4642:	b108      	cbz	r0, 4648 <ticker_success_assert+0x8>
    4644:	f7ff ff1c 	bl	4480 <chan_set.part.19>
    4648:	bd08      	pop	{r3, pc}
	...

0000464c <ticker_update_adv_assert>:
{
    464c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    464e:	b128      	cbz	r0, 465c <ticker_update_adv_assert+0x10>
    4650:	4b03      	ldr	r3, [pc, #12]	; (4660 <ticker_update_adv_assert+0x14>)
    4652:	7c9b      	ldrb	r3, [r3, #18]
    4654:	2b05      	cmp	r3, #5
    4656:	d001      	beq.n	465c <ticker_update_adv_assert+0x10>
    4658:	f7ff ff12 	bl	4480 <chan_set.part.19>
    465c:	bd08      	pop	{r3, pc}
    465e:	bf00      	nop
    4660:	20000298 	.word	0x20000298

00004664 <adv_scan_configure.constprop.22>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    4664:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    4666:	ad02      	add	r5, sp, #8
    4668:	4b10      	ldr	r3, [pc, #64]	; (46ac <adv_scan_configure.constprop.22+0x48>)
    466a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    466e:	4604      	mov	r4, r0
	radio_reset();
    4670:	f001 fe40 	bl	62f4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    4674:	2000      	movs	r0, #0
    4676:	f001 fe85 	bl	6384 <radio_tx_power_set>
	radio_isr_set(isr, NULL);
    467a:	2100      	movs	r1, #0
    467c:	480c      	ldr	r0, [pc, #48]	; (46b0 <adv_scan_configure.constprop.22+0x4c>)
    467e:	f001 fdf7 	bl	6270 <radio_isr_set>
	radio_phy_set(phy, flags);
    4682:	2101      	movs	r1, #1
    4684:	4620      	mov	r0, r4
    4686:	f001 fe4f 	bl	6328 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    468a:	4628      	mov	r0, r5
    468c:	f001 fe98 	bl	63c0 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    4690:	0062      	lsls	r2, r4, #1
    4692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    4696:	2125      	movs	r1, #37	; 0x25
    4698:	2008      	movs	r0, #8
    469a:	f001 fea9 	bl	63f0 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    469e:	4905      	ldr	r1, [pc, #20]	; (46b4 <adv_scan_configure.constprop.22+0x50>)
    46a0:	f240 605b 	movw	r0, #1627	; 0x65b
    46a4:	f001 ff3a 	bl	651c <radio_crc_configure>
}
    46a8:	b003      	add	sp, #12
    46aa:	bd30      	pop	{r4, r5, pc}
    46ac:	8e89bed6 	.word	0x8e89bed6
    46b0:	00004b2d 	.word	0x00004b2d
    46b4:	00555555 	.word	0x00555555

000046b8 <event_common_prepare.constprop.23>:
static void event_common_prepare(u32_t ticks_at_expire,
    46b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    46bc:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    46be:	681d      	ldr	r5, [r3, #0]
static void event_common_prepare(u32_t ticks_at_expire,
    46c0:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    46c2:	2c00      	cmp	r4, #0
static void event_common_prepare(u32_t ticks_at_expire,
    46c4:	4681      	mov	r9, r0
    46c6:	910b      	str	r1, [sp, #44]	; 0x2c
    46c8:	4690      	mov	r8, r2
    46ca:	469b      	mov	fp, r3
    46cc:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    46d0:	da03      	bge.n	46da <event_common_prepare.constprop.23+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    46d2:	9c16      	ldr	r4, [sp, #88]	; 0x58
    46d4:	42ac      	cmp	r4, r5
    46d6:	bf38      	it	cc
    46d8:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    46da:	42a5      	cmp	r5, r4
    46dc:	4f4e      	ldr	r7, [pc, #312]	; (4818 <event_common_prepare.constprop.23+0x160>)
    46de:	d21b      	bcs.n	4718 <event_common_prepare.constprop.23+0x60>
		ticker_status =
    46e0:	f241 63c9 	movw	r3, #5833	; 0x16c9
    46e4:	9308      	str	r3, [sp, #32]
    46e6:	4b4d      	ldr	r3, [pc, #308]	; (481c <event_common_prepare.constprop.23+0x164>)
    46e8:	9305      	str	r3, [sp, #20]
    46ea:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    46ec:	1b63      	subs	r3, r4, r5
		ticker_status =
    46ee:	9300      	str	r3, [sp, #0]
    46f0:	9707      	str	r7, [sp, #28]
    46f2:	464b      	mov	r3, r9
    46f4:	9106      	str	r1, [sp, #24]
    46f6:	9104      	str	r1, [sp, #16]
    46f8:	9103      	str	r1, [sp, #12]
    46fa:	9102      	str	r1, [sp, #8]
    46fc:	9101      	str	r1, [sp, #4]
    46fe:	2201      	movs	r2, #1
    4700:	4608      	mov	r0, r1
    4702:	f7fe fdeb 	bl	32dc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4706:	f030 0302 	bics.w	r3, r0, #2
    470a:	d02b      	beq.n	4764 <event_common_prepare.constprop.23+0xac>
		LL_ASSERT(!retval);
    470c:	4040      	eors	r0, r0
    470e:	f380 8811 	msr	BASEPRI, r0
    4712:	f04f 0004 	mov.w	r0, #4
    4716:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    4718:	d91d      	bls.n	4756 <event_common_prepare.constprop.23+0x9e>
		event_active(0, 0, 0, NULL);
    471a:	2300      	movs	r3, #0
    471c:	461a      	mov	r2, r3
    471e:	4619      	mov	r1, r3
    4720:	4618      	mov	r0, r3
    4722:	f7ff ff7f 	bl	4624 <event_active>
		ticker_status =
    4726:	f241 63de 	movw	r3, #5854	; 0x16de
    472a:	2100      	movs	r1, #0
    472c:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    472e:	1b2c      	subs	r4, r5, r4
		ticker_status =
    4730:	4b3b      	ldr	r3, [pc, #236]	; (4820 <event_common_prepare.constprop.23+0x168>)
    4732:	9305      	str	r3, [sp, #20]
    4734:	9707      	str	r7, [sp, #28]
    4736:	464b      	mov	r3, r9
    4738:	9106      	str	r1, [sp, #24]
    473a:	9104      	str	r1, [sp, #16]
    473c:	9103      	str	r1, [sp, #12]
    473e:	9102      	str	r1, [sp, #8]
    4740:	9101      	str	r1, [sp, #4]
    4742:	9400      	str	r4, [sp, #0]
    4744:	2201      	movs	r2, #1
    4746:	4608      	mov	r0, r1
    4748:	f7fe fdc8 	bl	32dc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    474c:	f030 0302 	bics.w	r3, r0, #2
    4750:	d1dc      	bne.n	470c <event_common_prepare.constprop.23+0x54>
    4752:	462c      	mov	r4, r5
    4754:	e00b      	b.n	476e <event_common_prepare.constprop.23+0xb6>
		event_active(0, 0, 0, NULL);
    4756:	2300      	movs	r3, #0
    4758:	461a      	mov	r2, r3
    475a:	4619      	mov	r1, r3
    475c:	4618      	mov	r0, r3
    475e:	f7ff ff61 	bl	4624 <event_active>
		event_xtal(0, 0, 0, NULL);
    4762:	2300      	movs	r3, #0
    4764:	461a      	mov	r2, r3
    4766:	4619      	mov	r1, r3
    4768:	4618      	mov	r0, r3
    476a:	f7ff ff4d 	bl	4608 <event_xtal>
	_radio.remainder_anchor = remainder;
    476e:	4e2d      	ldr	r6, [pc, #180]	; (4824 <event_common_prepare.constprop.23+0x16c>)
    4770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4772:	60f3      	str	r3, [r6, #12]
	ticker_status =
    4774:	f241 63f6 	movw	r3, #5878	; 0x16f6
    4778:	2200      	movs	r2, #0
    477a:	9308      	str	r3, [sp, #32]
    477c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    477e:	9206      	str	r2, [sp, #24]
    4780:	9305      	str	r3, [sp, #20]
    4782:	9204      	str	r2, [sp, #16]
    4784:	9203      	str	r2, [sp, #12]
    4786:	9202      	str	r2, [sp, #8]
    4788:	9201      	str	r2, [sp, #4]
    478a:	4611      	mov	r1, r2
    478c:	4610      	mov	r0, r2
    478e:	9707      	str	r7, [sp, #28]
    4790:	9400      	str	r4, [sp, #0]
    4792:	464b      	mov	r3, r9
    4794:	f7fe fda2 	bl	32dc <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4798:	f030 0202 	bics.w	r2, r0, #2
    479c:	d1b6      	bne.n	470c <event_common_prepare.constprop.23+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    479e:	2305      	movs	r3, #5
    47a0:	4611      	mov	r1, r2
    47a2:	4610      	mov	r0, r2
    47a4:	f7ff ff20 	bl	45e8 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    47a8:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    47ac:	429d      	cmp	r5, r3
    47ae:	d022      	beq.n	47f6 <event_common_prepare.constprop.23+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    47b0:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    47b4:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    47b8:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    47ba:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    47bc:	bfbc      	itt	lt
    47be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    47c2:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    47c6:	f8d8 3000 	ldr.w	r3, [r8]
    47ca:	f8d6 217c 	ldr.w	r2, [r6, #380]	; 0x17c
		ticker_status =
    47ce:	9402      	str	r4, [sp, #8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    47d0:	4293      	cmp	r3, r2
    47d2:	bf38      	it	cc
    47d4:	4613      	movcc	r3, r2
		ticker_status =
    47d6:	2100      	movs	r1, #0
    47d8:	f241 7224 	movw	r2, #5924	; 0x1724
    47dc:	9206      	str	r2, [sp, #24]
    47de:	9301      	str	r3, [sp, #4]
    47e0:	9300      	str	r3, [sp, #0]
    47e2:	9104      	str	r1, [sp, #16]
    47e4:	4623      	mov	r3, r4
    47e6:	9103      	str	r1, [sp, #12]
    47e8:	4652      	mov	r2, sl
    47ea:	4608      	mov	r0, r1
    47ec:	f7fe fdc6 	bl	337c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    47f0:	f030 0302 	bics.w	r3, r0, #2
    47f4:	d18a      	bne.n	470c <event_common_prepare.constprop.23+0x54>
	packet_tx_enqueue(0xFF);
    47f6:	20ff      	movs	r0, #255	; 0xff
    47f8:	f7ff fda8 	bl	434c <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    47fc:	4b0a      	ldr	r3, [pc, #40]	; (4828 <event_common_prepare.constprop.23+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    47fe:	2201      	movs	r2, #1
    4800:	4611      	mov	r1, r2
    4802:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    4804:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4808:	f7fd ffa4 	bl	2754 <mayfly_enqueue>
		LL_ASSERT(!retval);
    480c:	2800      	cmp	r0, #0
    480e:	f47f af7d 	bne.w	470c <event_common_prepare.constprop.23+0x54>
}
    4812:	b00d      	add	sp, #52	; 0x34
    4814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4818:	00004641 	.word	0x00004641
    481c:	00004625 	.word	0x00004625
    4820:	00004609 	.word	0x00004609
    4824:	20000298 	.word	0x20000298
    4828:	20002918 	.word	0x20002918

0000482c <radio_event_adv_prepare>:
{
    482c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    482e:	4a09      	ldr	r2, [pc, #36]	; (4854 <radio_event_adv_prepare+0x28>)
    4830:	7c13      	ldrb	r3, [r2, #16]
    4832:	b10b      	cbz	r3, 4838 <radio_event_adv_prepare+0xc>
    4834:	f7ff fe24 	bl	4480 <chan_set.part.19>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    4838:	2305      	movs	r3, #5
	event_common_prepare(ticks_at_expire, remainder,
    483a:	4c07      	ldr	r4, [pc, #28]	; (4858 <radio_event_adv_prepare+0x2c>)
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    483c:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    483e:	9402      	str	r4, [sp, #8]
    4840:	9301      	str	r3, [sp, #4]
    4842:	6a13      	ldr	r3, [r2, #32]
    4844:	9300      	str	r3, [sp, #0]
    4846:	f102 031c 	add.w	r3, r2, #28
    484a:	3218      	adds	r2, #24
    484c:	f7ff ff34 	bl	46b8 <event_common_prepare.constprop.23>
}
    4850:	b004      	add	sp, #16
    4852:	bd10      	pop	{r4, pc}
    4854:	20000298 	.word	0x20000298
    4858:	0000508d 	.word	0x0000508d

0000485c <mayfly_xtal_stop_calc>:
{
    485c:	b530      	push	{r4, r5, lr}
    485e:	b089      	sub	sp, #36	; 0x24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4860:	2302      	movs	r3, #2
    4862:	9305      	str	r3, [sp, #20]
	ticker_id_next = 0xff;
    4864:	23ff      	movs	r3, #255	; 0xff
    4866:	f88d 3013 	strb.w	r3, [sp, #19]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    486a:	4d1e      	ldr	r5, [pc, #120]	; (48e4 <mayfly_xtal_stop_calc+0x88>)
				    _radio.connection_count));
    486c:	4c1e      	ldr	r4, [pc, #120]	; (48e8 <mayfly_xtal_stop_calc+0x8c>)
	ticks_to_expire = 0U;
    486e:	2300      	movs	r3, #0
    4870:	9306      	str	r3, [sp, #24]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    4872:	ab05      	add	r3, sp, #20
    4874:	9302      	str	r3, [sp, #8]
    4876:	ab06      	add	r3, sp, #24
    4878:	9300      	str	r3, [sp, #0]
    487a:	9501      	str	r5, [sp, #4]
    487c:	ab07      	add	r3, sp, #28
    487e:	f10d 0213 	add.w	r2, sp, #19
    4882:	2101      	movs	r1, #1
    4884:	2000      	movs	r0, #0
    4886:	f7fe fe01 	bl	348c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    488a:	2802      	cmp	r0, #2
    488c:	d00b      	beq.n	48a6 <mayfly_xtal_stop_calc+0x4a>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    488e:	9b05      	ldr	r3, [sp, #20]
    4890:	b16b      	cbz	r3, 48ae <mayfly_xtal_stop_calc+0x52>
    4892:	4040      	eors	r0, r0
    4894:	f380 8811 	msr	BASEPRI, r0
    4898:	f04f 0004 	mov.w	r0, #4
    489c:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    489e:	2101      	movs	r1, #1
    48a0:	2000      	movs	r0, #0
    48a2:	f7fe fe71 	bl	3588 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    48a6:	9b05      	ldr	r3, [sp, #20]
    48a8:	2b02      	cmp	r3, #2
    48aa:	d0f8      	beq.n	489e <mayfly_xtal_stop_calc+0x42>
    48ac:	e7ef      	b.n	488e <mayfly_xtal_stop_calc+0x32>
	} while (ticker_id_next != TICKER_NULL &&
    48ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
				    _radio.connection_count));
    48b2:	2bff      	cmp	r3, #255	; 0xff
    48b4:	d004      	beq.n	48c0 <mayfly_xtal_stop_calc+0x64>
    48b6:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    48ba:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    48bc:	4293      	cmp	r3, r2
    48be:	dad8      	bge.n	4872 <mayfly_xtal_stop_calc+0x16>
	if ((ticker_id_next == TICKER_NULL) ||
    48c0:	1f5a      	subs	r2, r3, #5
    48c2:	b2d2      	uxtb	r2, r2
    48c4:	2af9      	cmp	r2, #249	; 0xf9
    48c6:	d805      	bhi.n	48d4 <mayfly_xtal_stop_calc+0x78>
				_radio.connection_count))) {
    48c8:	4a07      	ldr	r2, [pc, #28]	; (48e8 <mayfly_xtal_stop_calc+0x8c>)
    48ca:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    48ce:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    48d0:	4293      	cmp	r3, r2
    48d2:	db05      	blt.n	48e0 <mayfly_xtal_stop_calc+0x84>
		if (s_xtal_retained) {
    48d4:	4b05      	ldr	r3, [pc, #20]	; (48ec <mayfly_xtal_stop_calc+0x90>)
    48d6:	781b      	ldrb	r3, [r3, #0]
    48d8:	b113      	cbz	r3, 48e0 <mayfly_xtal_stop_calc+0x84>
    48da:	2001      	movs	r0, #1
    48dc:	f7ff fdae 	bl	443c <mayfly_xtal_retain.part.6>
}
    48e0:	b009      	add	sp, #36	; 0x24
    48e2:	bd30      	pop	{r4, r5, pc}
    48e4:	00004071 	.word	0x00004071
    48e8:	20000298 	.word	0x20000298
    48ec:	20000474 	.word	0x20000474

000048f0 <packet_rx_allocate.constprop.27>:
static void packet_rx_allocate(u8_t max)
    48f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    48f4:	4d21      	ldr	r5, [pc, #132]	; (497c <packet_rx_allocate.constprop.27+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    48f6:	f895 413a 	ldrb.w	r4, [r5, #314]	; 0x13a
	if (acquire == _radio.packet_rx_count) {
    48fa:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
	if (max > _radio.link_rx_data_quota) {
    48fe:	f895 914c 	ldrb.w	r9, [r5, #332]	; 0x14c
	acquire = _radio.packet_rx_acquire + 1;
    4902:	3401      	adds	r4, #1
    4904:	b2e4      	uxtb	r4, r4
		acquire = 0U;
    4906:	42a3      	cmp	r3, r4
    4908:	bf08      	it	eq
    490a:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    490c:	f505 77a0 	add.w	r7, r5, #320	; 0x140
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    4910:	f505 7894 	add.w	r8, r5, #296	; 0x128
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    4914:	f1b9 0f00 	cmp.w	r9, #0
    4918:	d003      	beq.n	4922 <packet_rx_allocate.constprop.27+0x32>
    491a:	f895 3139 	ldrb.w	r3, [r5, #313]	; 0x139
    491e:	429c      	cmp	r4, r3
    4920:	d101      	bne.n	4926 <packet_rx_allocate.constprop.27+0x36>
    4922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    4926:	4638      	mov	r0, r7
    4928:	f7fd fe5f 	bl	25ea <mem_acquire>
		if (!link) {
    492c:	4606      	mov	r6, r0
    492e:	2800      	cmp	r0, #0
    4930:	d0f7      	beq.n	4922 <packet_rx_allocate.constprop.27+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    4932:	4640      	mov	r0, r8
    4934:	f7fd fe59 	bl	25ea <mem_acquire>
		if (!node_rx) {
    4938:	b928      	cbnz	r0, 4946 <packet_rx_allocate.constprop.27+0x56>
			mem_release(link, &_radio.link_rx_free);
    493a:	4630      	mov	r0, r6
    493c:	4910      	ldr	r1, [pc, #64]	; (4980 <packet_rx_allocate.constprop.27+0x90>)
}
    493e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    4942:	f7fd be6c 	b.w	261e <mem_release>
		node_rx->hdr.link = link;
    4946:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    4948:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
    494c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    4950:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    4954:	f885 413a 	strb.w	r4, [r5, #314]	; 0x13a
		if (acquire == _radio.packet_rx_count) {
    4958:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
		acquire = _radio.packet_rx_acquire + 1;
    495c:	3401      	adds	r4, #1
    495e:	b2e4      	uxtb	r4, r4
			acquire = 0U;
    4960:	42a3      	cmp	r3, r4
    4962:	bf08      	it	eq
    4964:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    4966:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    496a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    496e:	3b01      	subs	r3, #1
    4970:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
    4974:	fa5f f989 	uxtb.w	r9, r9
    4978:	e7cc      	b.n	4914 <packet_rx_allocate.constprop.27+0x24>
    497a:	bf00      	nop
    497c:	20000298 	.word	0x20000298
    4980:	200003d8 	.word	0x200003d8

00004984 <common_init>:
{
    4984:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    4986:	4c2e      	ldr	r4, [pc, #184]	; (4a40 <common_init+0xbc>)
    4988:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    498c:	2a00      	cmp	r2, #0
    498e:	d037      	beq.n	4a00 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4990:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    4994:	f44f 7182 	mov.w	r1, #260	; 0x104
    4998:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    499c:	f7fd fdfe 	bl	259c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    49a0:	4b28      	ldr	r3, [pc, #160]	; (4a44 <common_init+0xc0>)
    49a2:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
    49a6:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    49aa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    49ae:	f7fd fdf5 	bl	259c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    49b2:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
    49b6:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    49ba:	4b23      	ldr	r3, [pc, #140]	; (4a48 <common_init+0xc4>)
    49bc:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    49c0:	440a      	add	r2, r1
    49c2:	2108      	movs	r1, #8
    49c4:	f7fd fdea 	bl	259c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    49c8:	4b20      	ldr	r3, [pc, #128]	; (4a4c <common_init+0xc8>)
    49ca:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    49ce:	2202      	movs	r2, #2
    49d0:	2124      	movs	r1, #36	; 0x24
    49d2:	f7fd fde3 	bl	259c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    49d6:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    49da:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    49de:	4b1c      	ldr	r3, [pc, #112]	; (4a50 <common_init+0xcc>)
    49e0:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
    49e4:	3a01      	subs	r2, #1
    49e6:	b292      	uxth	r2, r2
    49e8:	f7fd fdd8 	bl	259c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    49ec:	4816      	ldr	r0, [pc, #88]	; (4a48 <common_init+0xc4>)
    49ee:	f7fd fdfc 	bl	25ea <mem_acquire>
	LL_ASSERT(link);
    49f2:	b940      	cbnz	r0, 4a06 <common_init+0x82>
    49f4:	4040      	eors	r0, r0
    49f6:	f380 8811 	msr	BASEPRI, r0
    49fa:	f04f 0004 	mov.w	r0, #4
    49fe:	df02      	svc	2
		_radio.conn_free = NULL;
    4a00:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    4a04:	e7cc      	b.n	49a0 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4a06:	4a13      	ldr	r2, [pc, #76]	; (4a54 <common_init+0xd0>)
    4a08:	1f11      	subs	r1, r2, #4
    4a0a:	f7fd fe2f 	bl	266c <memq_init>
	_radio.advertiser.chan_map = 0x07;
    4a0e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    4a12:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4a16:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    4a1a:	23ff      	movs	r3, #255	; 0xff
    4a1c:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    4a20:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    4a24:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    4a28:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
	_radio.data_chan_map[4] = 0x1F;
    4a2c:	231f      	movs	r3, #31
    4a2e:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37U;
    4a32:	2325      	movs	r3, #37	; 0x25
    4a34:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
}
    4a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    4a3c:	f7ff bf58 	b.w	48f0 <packet_rx_allocate.constprop.27>
    4a40:	20000298 	.word	0x20000298
    4a44:	200003c0 	.word	0x200003c0
    4a48:	200003d8 	.word	0x200003d8
    4a4c:	200003ec 	.word	0x200003ec
    4a50:	200003f4 	.word	0x200003f4
    4a54:	200003e0 	.word	0x200003e0

00004a58 <isr_rx_scan_report.isra.15>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    4a58:	b570      	push	{r4, r5, r6, lr}
	if (_radio.packet_rx_acquire >=
    4a5a:	4c32      	ldr	r4, [pc, #200]	; (4b24 <isr_rx_scan_report.isra.15+0xcc>)
    4a5c:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	    _radio.packet_rx_last) {
    4a60:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
	if (_radio.packet_rx_acquire >=
    4a64:	4293      	cmp	r3, r2
			_radio.packet_rx_last +
    4a66:	bf38      	it	cc
    4a68:	f894 1138 	ldrbcc.w	r1, [r4, #312]	; 0x138
			_radio.packet_rx_last);
    4a6c:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
			_radio.packet_rx_last +
    4a70:	bf38      	it	cc
    4a72:	185b      	addcc	r3, r3, r1
    4a74:	1a9b      	subs	r3, r3, r2
    4a76:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    4a78:	2b02      	cmp	r3, #2
    4a7a:	d950      	bls.n	4b1e <isr_rx_scan_report.isra.15+0xc6>
	return _radio.packet_rx[_radio.packet_rx_last];
    4a7c:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4a80:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    4a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	if (node_rx == 0) {
    4a88:	2b00      	cmp	r3, #0
    4a8a:	d048      	beq.n	4b1e <isr_rx_scan_report.isra.15+0xc6>
	node_rx->hdr.handle = 0xffff;
    4a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4a90:	80da      	strh	r2, [r3, #6]
	} else if (_radio.scanner.phy) {
    4a92:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    4a96:	0751      	lsls	r1, r2, #29
    4a98:	d009      	beq.n	4aae <isr_rx_scan_report.isra.15+0x56>
		switch (_radio.scanner.phy) {
    4a9a:	f002 0207 	and.w	r2, r2, #7
    4a9e:	2a01      	cmp	r2, #1
    4aa0:	d003      	beq.n	4aaa <isr_rx_scan_report.isra.15+0x52>
    4aa2:	2a04      	cmp	r2, #4
    4aa4:	d019      	beq.n	4ada <isr_rx_scan_report.isra.15+0x82>
    4aa6:	f7ff fce5 	bl	4474 <isr.part.20>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    4aaa:	2205      	movs	r2, #5
			node_rx->hdr.type = NODE_RX_TYPE_EXT_CODED_REPORT;
    4aac:	711a      	strb	r2, [r3, #4]
				      pdu_adv_rx->len];
    4aae:	7a5d      	ldrb	r5, [r3, #9]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    4ab0:	f103 0608 	add.w	r6, r3, #8
	extra = &((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    4ab4:	3502      	adds	r5, #2
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    4ab6:	b190      	cbz	r0, 4ade <isr_rx_scan_report.isra.15+0x86>
    4ab8:	f001 fd78 	bl	65ac <radio_rssi_get>
    4abc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4ac0:	5570      	strb	r0, [r6, r5]
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    4ac2:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
    4ac6:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    4aca:	429a      	cmp	r2, r3
    4acc:	d109      	bne.n	4ae2 <isr_rx_scan_report.isra.15+0x8a>
	LL_ASSERT(link);
    4ace:	4040      	eors	r0, r0
    4ad0:	f380 8811 	msr	BASEPRI, r0
    4ad4:	f04f 0004 	mov.w	r0, #4
    4ad8:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_CODED_REPORT;
    4ada:	2206      	movs	r2, #6
    4adc:	e7e6      	b.n	4aac <isr_rx_scan_report.isra.15+0x54>
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    4ade:	207f      	movs	r0, #127	; 0x7f
    4ae0:	e7ee      	b.n	4ac0 <isr_rx_scan_report.isra.15+0x68>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    4ae2:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4ae6:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    4aea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
    4aee:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
	link = node_rx->hdr.link;
    4af2:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
    4af4:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    4af6:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
	if (last == _radio.packet_rx_count) {
    4afa:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
	last = _radio.packet_rx_last + 1;
    4afe:	3301      	adds	r3, #1
    4b00:	b2db      	uxtb	r3, r3
		last = 0U;
    4b02:	429a      	cmp	r2, r3
    4b04:	bf08      	it	eq
    4b06:	2300      	moveq	r3, #0
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4b08:	4a07      	ldr	r2, [pc, #28]	; (4b28 <isr_rx_scan_report.isra.15+0xd0>)
	_radio.packet_rx_last = last;
    4b0a:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4b0e:	f7fd fdb0 	bl	2672 <memq_enqueue>
	LL_ASSERT(link);
    4b12:	2800      	cmp	r0, #0
    4b14:	d0db      	beq.n	4ace <isr_rx_scan_report.isra.15+0x76>
	radio_event_callback();
    4b16:	f000 fe75 	bl	5804 <radio_event_callback>
	return 0;
    4b1a:	2000      	movs	r0, #0
    4b1c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    4b1e:	2001      	movs	r0, #1
}
    4b20:	bd70      	pop	{r4, r5, r6, pc}
    4b22:	bf00      	nop
    4b24:	20000298 	.word	0x20000298
    4b28:	200003e0 	.word	0x200003e0

00004b2c <isr>:
{
    4b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b30:	b08a      	sub	sp, #40	; 0x28
	trx_done = radio_is_done();
    4b32:	f001 fcdf 	bl	64f4 <radio_is_done>
    4b36:	b2c5      	uxtb	r5, r0
	if (trx_done) {
    4b38:	b335      	cbz	r5, 4b88 <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    4b3a:	f001 fcfb 	bl	6534 <radio_crc_is_valid>
    4b3e:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    4b42:	f001 fd77 	bl	6634 <radio_filter_has_match>
    4b46:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    4b48:	f001 fd7e 	bl	6648 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    4b4c:	f001 fe88 	bl	6860 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    4b50:	f001 fe74 	bl	683c <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    4b54:	f001 fd38 	bl	65c8 <radio_rssi_is_ready>
    4b58:	b2c6      	uxtb	r6, r0
	switch (_radio.state) {
    4b5a:	4cca      	ldr	r4, [pc, #808]	; (4e84 <isr+0x358>)
	radio_status_reset();
    4b5c:	f001 fcb4 	bl	64c8 <radio_status_reset>
	radio_tmr_status_reset();
    4b60:	f001 fd78 	bl	6654 <radio_tmr_status_reset>
	radio_filter_status_reset();
    4b64:	f001 fd5e 	bl	6624 <radio_filter_status_reset>
	radio_ar_status_reset();
    4b68:	f001 fe6e 	bl	6848 <radio_ar_status_reset>
	radio_rssi_status_reset();
    4b6c:	f001 fd24 	bl	65b8 <radio_rssi_status_reset>
	switch (_radio.state) {
    4b70:	7d63      	ldrb	r3, [r4, #21]
    4b72:	2b05      	cmp	r3, #5
    4b74:	f200 8238 	bhi.w	4fe8 <isr+0x4bc>
    4b78:	e8df f013 	tbh	[pc, r3, lsl #1]
    4b7c:	00a1005e 	.word	0x00a1005e
    4b80:	01a8000a 	.word	0x01a8000a
    4b84:	01a801a8 	.word	0x01a801a8
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
    4b88:	462e      	mov	r6, r5
    4b8a:	462f      	mov	r7, r5
    4b8c:	46a8      	mov	r8, r5
    4b8e:	e7e4      	b.n	4b5a <isr+0x2e>
	_radio.state = STATE_RX;
    4b90:	2301      	movs	r3, #1
    4b92:	7563      	strb	r3, [r4, #21]
	hcto = radio_tmr_tifs_base_get()
    4b94:	f001 fdfe 	bl	6794 <radio_tmr_tifs_base_get>
    4b98:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    4b9a:	2096      	movs	r0, #150	; 0x96
    4b9c:	f001 fd6a 	bl	6674 <radio_tmr_tifs_set>
	switch (_radio.role) {
    4ba0:	7d23      	ldrb	r3, [r4, #20]
    4ba2:	3b01      	subs	r3, #1
    4ba4:	35c3      	adds	r5, #195	; 0xc3
    4ba6:	2b03      	cmp	r3, #3
    4ba8:	d811      	bhi.n	4bce <isr+0xa2>
    4baa:	e8df f003 	tbb	[pc, r3]
    4bae:	2402      	.short	0x2402
    4bb0:	4848      	.short	0x4848
		radio_switch_complete_and_tx(0, 0, 0, 0);
    4bb2:	2300      	movs	r3, #0
    4bb4:	461a      	mov	r2, r3
    4bb6:	4619      	mov	r1, r3
    4bb8:	4618      	mov	r0, r3
    4bba:	f001 fcd5 	bl	6568 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    4bbe:	f001 fcc3 	bl	6548 <radio_pkt_scratch_get>
    4bc2:	f001 fc47 	bl	6454 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    4bc6:	f001 fc8b 	bl	64e0 <radio_is_ready>
    4bca:	4604      	mov	r4, r0
    4bcc:	b128      	cbz	r0, 4bda <isr+0xae>
	LL_ASSERT(!retval);
    4bce:	4040      	eors	r0, r0
    4bd0:	f380 8811 	msr	BASEPRI, r0
    4bd4:	f04f 0004 	mov.w	r0, #4
    4bd8:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    4bda:	4601      	mov	r1, r0
    4bdc:	f001 fc48 	bl	6470 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    4be0:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
    4be2:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    4be4:	4620      	mov	r0, r4
    4be6:	f001 fc41 	bl	646c <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    4bea:	1a28      	subs	r0, r5, r0
    4bec:	f001 fdbe 	bl	676c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    4bf0:	f001 fdc8 	bl	6784 <radio_tmr_end_capture>
    4bf4:	e020      	b.n	4c38 <isr+0x10c>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    4bf6:	2300      	movs	r3, #0
    4bf8:	4619      	mov	r1, r3
    4bfa:	461a      	mov	r2, r3
    4bfc:	4618      	mov	r0, r3
    4bfe:	f001 fcb3 	bl	6568 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    4c02:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4c06:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
		radio_pkt_rx_set(_radio.packet_rx
    4c0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    4c0e:	3008      	adds	r0, #8
    4c10:	f001 fc20 	bl	6454 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    4c14:	f001 fc64 	bl	64e0 <radio_is_ready>
    4c18:	4604      	mov	r4, r0
    4c1a:	2800      	cmp	r0, #0
    4c1c:	d1d7      	bne.n	4bce <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    4c1e:	4601      	mov	r1, r0
    4c20:	f001 fc26 	bl	6470 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    4c24:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
    4c26:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    4c28:	4620      	mov	r0, r4
    4c2a:	f001 fc1f 	bl	646c <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    4c2e:	1a28      	subs	r0, r5, r0
    4c30:	f001 fd9c 	bl	676c <radio_tmr_hcto_configure>
		radio_rssi_measure();
    4c34:	f001 fcb0 	bl	6598 <radio_rssi_measure>
}
    4c38:	b00a      	add	sp, #40	; 0x28
    4c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    4c3e:	2300      	movs	r3, #0
    4c40:	461a      	mov	r2, r3
    4c42:	4619      	mov	r1, r3
    4c44:	4618      	mov	r0, r3
    4c46:	f001 fc8f 	bl	6568 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr,	(void *)
    4c4a:	f8d4 6114 	ldr.w	r6, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    4c4e:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4c52:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	radio_phy_set(phy, 0);
    4c56:	2100      	movs	r1, #0
    4c58:	4608      	mov	r0, r1
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    4c5a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
	radio_phy_set(phy, 0);
    4c5e:	f001 fb63 	bl	6328 <radio_phy_set>
	if (conn->enc_rx) {
    4c62:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    4c66:	06d8      	lsls	r0, r3, #27
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    4c68:	f104 0408 	add.w	r4, r4, #8
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    4c6c:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    4c70:	d51f      	bpl.n	4cb2 <isr+0x186>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    4c72:	211f      	movs	r1, #31
    4c74:	2008      	movs	r0, #8
    4c76:	f001 fbbb 	bl	63f0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    4c7a:	4622      	mov	r2, r4
    4c7c:	2100      	movs	r1, #0
    4c7e:	f106 00a9 	add.w	r0, r6, #169	; 0xa9
    4c82:	f001 fd8d 	bl	67a0 <radio_ccm_rx_pkt_set>
		radio_pkt_rx_set(pdu_data_rx);
    4c86:	f001 fbe5 	bl	6454 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    4c8a:	f001 fc29 	bl	64e0 <radio_is_ready>
    4c8e:	4604      	mov	r4, r0
    4c90:	2800      	cmp	r0, #0
    4c92:	d19c      	bne.n	4bce <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    4c94:	4601      	mov	r1, r0
    4c96:	f001 fbeb 	bl	6470 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    4c9a:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
    4c9c:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    4c9e:	4620      	mov	r0, r4
    4ca0:	f001 fbe4 	bl	646c <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    4ca4:	1a28      	subs	r0, r5, r0
    4ca6:	f001 fd61 	bl	676c <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    4caa:	2001      	movs	r0, #1
    4cac:	f7ff fb4e 	bl	434c <packet_tx_enqueue>
    4cb0:	e7c2      	b.n	4c38 <isr+0x10c>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    4cb2:	2008      	movs	r0, #8
    4cb4:	211b      	movs	r1, #27
    4cb6:	f001 fb9b 	bl	63f0 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    4cba:	4620      	mov	r0, r4
    4cbc:	e7e3      	b.n	4c86 <isr+0x15a>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    4cbe:	b925      	cbnz	r5, 4cca <isr+0x19e>
		_radio.state = STATE_CLOSE;
    4cc0:	2303      	movs	r3, #3
    4cc2:	7563      	strb	r3, [r4, #21]
		radio_disable();
    4cc4:	f001 fbee 	bl	64a4 <radio_disable>
    4cc8:	e7b6      	b.n	4c38 <isr+0x10c>
	switch (_radio.role) {
    4cca:	7d23      	ldrb	r3, [r4, #20]
    4ccc:	b2db      	uxtb	r3, r3
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d05e      	beq.n	4d90 <isr+0x264>
    4cd2:	2b02      	cmp	r3, #2
    4cd4:	f47f af7b 	bne.w	4bce <isr+0xa2>
		if (crc_ok &&
    4cd8:	f1b8 0f00 	cmp.w	r8, #0
    4cdc:	f000 8097 	beq.w	4e0e <isr+0x2e2>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    4ce0:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    4ce4:	06db      	lsls	r3, r3, #27
    4ce6:	d502      	bpl.n	4cee <isr+0x1c2>
		if (crc_ok &&
    4ce8:	2f00      	cmp	r7, #0
    4cea:	f000 8090 	beq.w	4e0e <isr+0x2e2>
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    4cee:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4cf2:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    4cf6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4cfa:	7a2b      	ldrb	r3, [r5, #8]
    4cfc:	f013 020f 	ands.w	r2, r3, #15
    4d00:	d002      	beq.n	4d08 <isr+0x1dc>
    4d02:	2a06      	cmp	r2, #6
    4d04:	f040 808e 	bne.w	4e24 <isr+0x2f8>
		 (_radio.scanner.type != 0) &&
    4d08:	f894 10e1 	ldrb.w	r1, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    4d0c:	070f      	lsls	r7, r1, #28
    4d0e:	d57a      	bpl.n	4e06 <isr+0x2da>
		 (_radio.scanner.type != 0) &&
    4d10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    4d14:	2900      	cmp	r1, #0
    4d16:	d176      	bne.n	4e06 <isr+0x2da>
		err = isr_rx_scan_report(rssi_ready,
    4d18:	4630      	mov	r0, r6
    4d1a:	f7ff fe9d 	bl	4a58 <isr_rx_scan_report.isra.15>
		if (err) {
    4d1e:	4607      	mov	r7, r0
    4d20:	2800      	cmp	r0, #0
    4d22:	d174      	bne.n	4e0e <isr+0x2e2>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    4d24:	f001 fc10 	bl	6548 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4d28:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    4d2a:	4957      	ldr	r1, [pc, #348]	; (4e88 <isr+0x35c>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4d2c:	2203      	movs	r2, #3
    4d2e:	f362 0303 	bfi	r3, r2, #0, #4
    4d32:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    4d34:	7a2a      	ldrb	r2, [r5, #8]
    4d36:	b2db      	uxtb	r3, r3
    4d38:	f3c2 1280 	ubfx	r2, r2, #6, #1
    4d3c:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    4d40:	220c      	movs	r2, #12
    4d42:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    4d44:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    4d48:	09d2      	lsrs	r2, r2, #7
    4d4a:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    4d4e:	4606      	mov	r6, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    4d50:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    4d52:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    4d56:	f7fc ffb9 	bl	1ccc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    4d5a:	2206      	movs	r2, #6
    4d5c:	f105 010a 	add.w	r1, r5, #10
    4d60:	f106 0008 	add.w	r0, r6, #8
    4d64:	f7fc ffb2 	bl	1ccc <memcpy>
		_radio.scanner.state = 1;
    4d68:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    4d6c:	f043 0302 	orr.w	r3, r3, #2
    4d70:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    4d74:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    4d76:	2302      	movs	r3, #2
    4d78:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    4d7a:	f001 fc7b 	bl	6674 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    4d7e:	4638      	mov	r0, r7
    4d80:	f001 fbe6 	bl	6550 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    4d84:	4630      	mov	r0, r6
    4d86:	f001 fb6b 	bl	6460 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    4d8a:	f001 fcfb 	bl	6784 <radio_tmr_end_capture>
    4d8e:	e034      	b.n	4dfa <isr+0x2ce>
		if (crc_ok) {
    4d90:	f1b8 0f00 	cmp.w	r8, #0
    4d94:	d094      	beq.n	4cc0 <isr+0x194>
	pdu_adv = (void *)radio_pkt_scratch_get();
    4d96:	f001 fbd7 	bl	6548 <radio_pkt_scratch_get>
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    4d9a:	7802      	ldrb	r2, [r0, #0]
    4d9c:	f002 030f 	and.w	r3, r2, #15
    4da0:	2b03      	cmp	r3, #3
    4da2:	d18d      	bne.n	4cc0 <isr+0x194>
    4da4:	7843      	ldrb	r3, [r0, #1]
    4da6:	2b0c      	cmp	r3, #12
    4da8:	d18a      	bne.n	4cc0 <isr+0x194>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    4daa:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		(devmatch_ok)) &&
    4dae:	0659      	lsls	r1, r3, #25
    4db0:	d501      	bpl.n	4db6 <isr+0x28a>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    4db2:	2f00      	cmp	r7, #0
    4db4:	d084      	beq.n	4cc0 <isr+0x194>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    4db6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    4dba:	2527      	movs	r5, #39	; 0x27
    4dbc:	212a      	movs	r1, #42	; 0x2a
    4dbe:	fb15 1303 	smlabb	r3, r5, r3, r1
    4dc2:	18e6      	adds	r6, r4, r3
	return (adv->tx_addr == sr->rx_addr) &&
    4dc4:	5ce3      	ldrb	r3, [r4, r3]
    4dc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4dca:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4dce:	f47f af77 	bne.w	4cc0 <isr+0x194>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    4dd2:	f100 0108 	add.w	r1, r0, #8
    4dd6:	2206      	movs	r2, #6
    4dd8:	1cb0      	adds	r0, r6, #2
    4dda:	f7fc ff62 	bl	1ca2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    4dde:	2800      	cmp	r0, #0
    4de0:	f47f af6e 	bne.w	4cc0 <isr+0x194>
		_radio.state = STATE_CLOSE;
    4de4:	2303      	movs	r3, #3
    4de6:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
    4de8:	f001 fbc8 	bl	657c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    4dec:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4df0:	fb05 4000 	mla	r0, r5, r0, r4
    4df4:	307a      	adds	r0, #122	; 0x7a
    4df6:	f001 fb33 	bl	6460 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    4dfa:	f001 fb71 	bl	64e0 <radio_is_ready>
    4dfe:	2800      	cmp	r0, #0
    4e00:	f43f af1a 	beq.w	4c38 <isr+0x10c>
    4e04:	e6e3      	b.n	4bce <isr+0xa2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4e06:	b96a      	cbnz	r2, 4e24 <isr+0x2f8>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    4e08:	7a6b      	ldrb	r3, [r5, #9]
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d156      	bne.n	4ebc <isr+0x390>
			_radio.state = STATE_CLOSE;
    4e0e:	2303      	movs	r3, #3
    4e10:	7563      	strb	r3, [r4, #21]
			radio_disable();
    4e12:	f001 fb47 	bl	64a4 <radio_disable>
			_radio.scanner.state = 0U;
    4e16:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    4e1a:	f36f 0341 	bfc	r3, #1, #1
    4e1e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    4e22:	e709      	b.n	4c38 <isr+0x10c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4e24:	2a01      	cmp	r2, #1
    4e26:	d00d      	beq.n	4e44 <isr+0x318>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    4e28:	7a2b      	ldrb	r3, [r5, #8]
					&dir_report))) ||
    4e2a:	f003 020b 	and.w	r2, r3, #11
    4e2e:	2a02      	cmp	r2, #2
    4e30:	d0ea      	beq.n	4e08 <isr+0x2dc>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    4e32:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    4e36:	2b07      	cmp	r3, #7
    4e38:	d128      	bne.n	4e8c <isr+0x360>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    4e3a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    4e3e:	0759      	lsls	r1, r3, #29
    4e40:	d1e2      	bne.n	4e08 <isr+0x2dc>
    4e42:	e7e4      	b.n	4e0e <isr+0x2e2>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    4e44:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    4e48:	09db      	lsrs	r3, r3, #7
    4e4a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4e4e:	d00f      	beq.n	4e70 <isr+0x344>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    4e50:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    4e54:	f3c3 1301 	ubfx	r3, r3, #4, #2
    4e58:	0798      	lsls	r0, r3, #30
    4e5a:	d5e5      	bpl.n	4e28 <isr+0x2fc>
    4e5c:	f995 3008 	ldrsb.w	r3, [r5, #8]
    4e60:	2b00      	cmp	r3, #0
    4e62:	dae1      	bge.n	4e28 <isr+0x2fc>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    4e64:	7d6b      	ldrb	r3, [r5, #21]
    4e66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4e6a:	2b40      	cmp	r3, #64	; 0x40
    4e6c:	d0cc      	beq.n	4e08 <isr+0x2dc>
    4e6e:	e7db      	b.n	4e28 <isr+0x2fc>
		(memcmp(&_radio.scanner.init_addr[0],
    4e70:	2206      	movs	r2, #6
    4e72:	f105 0110 	add.w	r1, r5, #16
    4e76:	4804      	ldr	r0, [pc, #16]	; (4e88 <isr+0x35c>)
    4e78:	f7fc ff13 	bl	1ca2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    4e7c:	2800      	cmp	r0, #0
    4e7e:	d1e7      	bne.n	4e50 <isr+0x324>
    4e80:	e7c2      	b.n	4e08 <isr+0x2dc>
    4e82:	bf00      	nop
    4e84:	20000298 	.word	0x20000298
    4e88:	2000037a 	.word	0x2000037a
		   (_radio.scanner.phy)) ||
    4e8c:	2b04      	cmp	r3, #4
    4e8e:	d1be      	bne.n	4e0e <isr+0x2e2>
		   (_radio.scanner.state != 0) &&
    4e90:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    4e94:	079a      	lsls	r2, r3, #30
    4e96:	d5ba      	bpl.n	4e0e <isr+0x2e2>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    4e98:	f001 fb56 	bl	6548 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    4e9c:	7a2b      	ldrb	r3, [r5, #8]
    4e9e:	7802      	ldrb	r2, [r0, #0]
    4ea0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4ea4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4ea8:	d1b1      	bne.n	4e0e <isr+0x2e2>
		(memcmp(&sreq->scan_req.adv_addr[0],
    4eaa:	2206      	movs	r2, #6
    4eac:	f105 010a 	add.w	r1, r5, #10
    4eb0:	3008      	adds	r0, #8
    4eb2:	f7fc fef6 	bl	1ca2 <memcmp>
		   (_radio.scanner.state != 0) &&
    4eb6:	2800      	cmp	r0, #0
    4eb8:	d0a6      	beq.n	4e08 <isr+0x2dc>
    4eba:	e7a8      	b.n	4e0e <isr+0x2e2>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    4ebc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d1a4      	bne.n	4e0e <isr+0x2e2>
		err = isr_rx_scan_report(rssi_ready,
    4ec4:	4630      	mov	r0, r6
    4ec6:	f7ff fdc7 	bl	4a58 <isr_rx_scan_report.isra.15>
    4eca:	e7a0      	b.n	4e0e <isr+0x2e2>
	switch (_radio.role) {
    4ecc:	7d22      	ldrb	r2, [r4, #20]
    4ece:	b2d2      	uxtb	r2, r2
    4ed0:	2a01      	cmp	r2, #1
    4ed2:	d01f      	beq.n	4f14 <isr+0x3e8>
    4ed4:	f0c0 8081 	bcc.w	4fda <isr+0x4ae>
    4ed8:	2a02      	cmp	r2, #2
    4eda:	f47f ae78 	bne.w	4bce <isr+0xa2>
	if (_radio.state == STATE_CLOSE) {
    4ede:	2b03      	cmp	r3, #3
    4ee0:	d16e      	bne.n	4fc0 <isr+0x494>
		radio_tmr_tifs_set(RADIO_TIFS);
    4ee2:	2096      	movs	r0, #150	; 0x96
    4ee4:	f001 fbc6 	bl	6674 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    4ee8:	2300      	movs	r3, #0
    4eea:	4619      	mov	r1, r3
    4eec:	461a      	mov	r2, r3
    4eee:	4618      	mov	r0, r3
    4ef0:	f001 fb3a 	bl	6568 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    4ef4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    4ef8:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
		radio_pkt_rx_set(_radio.packet_rx
    4efc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    4f00:	3008      	adds	r0, #8
    4f02:	f001 faa7 	bl	6454 <radio_pkt_rx_set>
		radio_rssi_measure();
    4f06:	f001 fb47 	bl	6598 <radio_rssi_measure>
		_radio.state = STATE_RX;
    4f0a:	2301      	movs	r3, #1
    4f0c:	7563      	strb	r3, [r4, #21]
		radio_rx_enable();
    4f0e:	f001 fabd 	bl	648c <radio_rx_enable>
    4f12:	e66d      	b.n	4bf0 <isr+0xc4>
	if ((_radio.state == STATE_CLOSE) &&
    4f14:	2b03      	cmp	r3, #3
    4f16:	d108      	bne.n	4f2a <isr+0x3fe>
	    (_radio.advertiser.chan_map_current != 0)) {
    4f18:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    4f1c:	075b      	lsls	r3, r3, #29
    4f1e:	d004      	beq.n	4f2a <isr+0x3fe>
		adv_setup();
    4f20:	f7ff fad4 	bl	44cc <adv_setup>
		radio_tx_enable();
    4f24:	f001 fab8 	bl	6498 <radio_tx_enable>
    4f28:	e662      	b.n	4bf0 <isr+0xc4>
		radio_filter_disable();
    4f2a:	f001 fb71 	bl	6610 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    4f2e:	7d63      	ldrb	r3, [r4, #21]
    4f30:	2b03      	cmp	r3, #3
    4f32:	d12a      	bne.n	4f8a <isr+0x45e>
			entropy_get_entropy_isr(_radio.entropy,
    4f34:	6860      	ldr	r0, [r4, #4]
					  u16_t length,
					  u32_t flags)
{
	const struct entropy_driver_api *api = dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    4f36:	6843      	ldr	r3, [r0, #4]
    4f38:	685d      	ldr	r5, [r3, #4]
    4f3a:	b125      	cbz	r5, 4f46 <isr+0x41a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    4f3c:	2300      	movs	r3, #0
    4f3e:	2202      	movs	r2, #2
    4f40:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    4f44:	47a8      	blx	r5
			random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    4f46:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    4f4a:	f240 1247 	movw	r2, #327	; 0x147
    4f4e:	fbb1 f3f2 	udiv	r3, r1, r2
    4f52:	fb02 1313 	mls	r3, r2, r3, r1
			ticker_status =
    4f56:	f241 0251 	movw	r2, #4177	; 0x1051
    4f5a:	2100      	movs	r1, #0
    4f5c:	9206      	str	r2, [sp, #24]
			random_delay += 1;
    4f5e:	3301      	adds	r3, #1
			ticker_status =
    4f60:	4a22      	ldr	r2, [pc, #136]	; (4fec <isr+0x4c0>)
    4f62:	9205      	str	r2, [sp, #20]
			random_delay += 1;
    4f64:	b29b      	uxth	r3, r3
			ticker_status =
    4f66:	9104      	str	r1, [sp, #16]
    4f68:	9103      	str	r1, [sp, #12]
    4f6a:	9102      	str	r1, [sp, #8]
    4f6c:	9101      	str	r1, [sp, #4]
    4f6e:	9100      	str	r1, [sp, #0]
    4f70:	2205      	movs	r2, #5
    4f72:	4608      	mov	r0, r1
			random_delay += 1;
    4f74:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			ticker_status =
    4f78:	f7fe fa00 	bl	337c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4f7c:	f030 0302 	bics.w	r3, r0, #2
    4f80:	d003      	beq.n	4f8a <isr+0x45e>
    4f82:	7ca3      	ldrb	r3, [r4, #18]
    4f84:	2b05      	cmp	r3, #5
    4f86:	f47f ae22 	bne.w	4bce <isr+0xa2>
	_radio.role = ROLE_NONE;
    4f8a:	2500      	movs	r5, #0
    4f8c:	7525      	strb	r5, [r4, #20]
	_radio.state = STATE_NONE;
    4f8e:	7565      	strb	r5, [r4, #21]
	_radio.ticker_id_event = 0U;
    4f90:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    4f92:	f001 fbdf 	bl	6754 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4f96:	462a      	mov	r2, r5
    4f98:	4629      	mov	r1, r5
    4f9a:	4628      	mov	r0, r5
    4f9c:	4b14      	ldr	r3, [pc, #80]	; (4ff0 <isr+0x4c4>)
    4f9e:	f7fd fbd9 	bl	2754 <mayfly_enqueue>
	LL_ASSERT(!retval);
    4fa2:	4605      	mov	r5, r0
    4fa4:	2800      	cmp	r0, #0
    4fa6:	f47f ae12 	bne.w	4bce <isr+0xa2>
	clock_control_off(_radio.hf_clock, NULL);
    4faa:	6820      	ldr	r0, [r4, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    4fac:	6843      	ldr	r3, [r0, #4]
    4fae:	4629      	mov	r1, r5
    4fb0:	685b      	ldr	r3, [r3, #4]
    4fb2:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    4fb4:	2201      	movs	r2, #1
    4fb6:	4611      	mov	r1, r2
    4fb8:	4628      	mov	r0, r5
    4fba:	f7fd fba3 	bl	2704 <mayfly_enable>
    4fbe:	e63b      	b.n	4c38 <isr+0x10c>
		radio_filter_disable();
    4fc0:	f001 fb26 	bl	6610 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    4fc4:	7d63      	ldrb	r3, [r4, #21]
    4fc6:	2b05      	cmp	r3, #5
    4fc8:	d1df      	bne.n	4f8a <isr+0x45e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4fca:	2300      	movs	r3, #0
    4fcc:	9300      	str	r3, [sp, #0]
    4fce:	2204      	movs	r2, #4
    4fd0:	4619      	mov	r1, r3
    4fd2:	4618      	mov	r0, r3
    4fd4:	f7fe fa1e 	bl	3414 <ticker_stop>
    4fd8:	e7d7      	b.n	4f8a <isr+0x45e>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    4fda:	3b04      	subs	r3, #4
    4fdc:	2b01      	cmp	r3, #1
    4fde:	f63f adf6 	bhi.w	4bce <isr+0xa2>
		_radio.state = STATE_NONE;
    4fe2:	2300      	movs	r3, #0
    4fe4:	7563      	strb	r3, [r4, #21]
    4fe6:	e627      	b.n	4c38 <isr+0x10c>
    4fe8:	f7ff fa44 	bl	4474 <isr.part.20>
    4fec:	0000464d 	.word	0x0000464d
    4ff0:	20002898 	.word	0x20002898

00004ff4 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    4ff4:	4b02      	ldr	r3, [pc, #8]	; (5000 <mayfly_xtal_stop+0xc>)
    4ff6:	6818      	ldr	r0, [r3, #0]
    4ff8:	6843      	ldr	r3, [r0, #4]
    4ffa:	2100      	movs	r1, #0
    4ffc:	685b      	ldr	r3, [r3, #4]
    4ffe:	4718      	bx	r3
    5000:	20000298 	.word	0x20000298

00005004 <preempt_calc>:
{
    5004:	b570      	push	{r4, r5, r6, lr}
    5006:	4615      	mov	r5, r2
    5008:	b088      	sub	sp, #32
    500a:	460e      	mov	r6, r1
    500c:	4604      	mov	r4, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    500e:	f7fe fad1 	bl	35b4 <ticker_ticks_now_get>
	u32_t diff =
    5012:	4629      	mov	r1, r5
    5014:	f7fe fad0 	bl	35b8 <ticker_ticks_diff_get>
	diff += 3;
    5018:	1cc5      	adds	r5, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    501a:	2d09      	cmp	r5, #9
    501c:	d92f      	bls.n	507e <preempt_calc+0x7a>
		if (s_xtal_retained) {
    501e:	4b19      	ldr	r3, [pc, #100]	; (5084 <preempt_calc+0x80>)
    5020:	781b      	ldrb	r3, [r3, #0]
    5022:	b113      	cbz	r3, 502a <preempt_calc+0x26>
    5024:	2000      	movs	r0, #0
    5026:	f7ff fa09 	bl	443c <mayfly_xtal_retain.part.6>
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    502a:	6822      	ldr	r2, [r4, #0]
    502c:	2a00      	cmp	r2, #0
    502e:	da1f      	bge.n	5070 <preempt_calc+0x6c>
		u32_t ticks_prepare_to_start =
    5030:	68a1      	ldr	r1, [r4, #8]
    5032:	6863      	ldr	r3, [r4, #4]
		ticker_status =
    5034:	9406      	str	r4, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    5036:	4299      	cmp	r1, r3
    5038:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    503c:	bf38      	it	cc
    503e:	1ad2      	subcc	r2, r2, r3
		ticker_status =
    5040:	4b11      	ldr	r3, [pc, #68]	; (5088 <preempt_calc+0x84>)
    5042:	9305      	str	r3, [sp, #20]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    5044:	bf28      	it	cs
    5046:	1a52      	subcs	r2, r2, r1
		ticker_status =
    5048:	2300      	movs	r3, #0
    504a:	9304      	str	r3, [sp, #16]
    504c:	9303      	str	r3, [sp, #12]
    504e:	9302      	str	r3, [sp, #8]
    5050:	9201      	str	r2, [sp, #4]
    5052:	9200      	str	r2, [sp, #0]
    5054:	4619      	mov	r1, r3
    5056:	4618      	mov	r0, r3
    5058:	4632      	mov	r2, r6
    505a:	f7fe f98f 	bl	337c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    505e:	f030 0302 	bics.w	r3, r0, #2
    5062:	d005      	beq.n	5070 <preempt_calc+0x6c>
    5064:	4040      	eors	r0, r0
    5066:	f380 8811 	msr	BASEPRI, r0
    506a:	f04f 0004 	mov.w	r0, #4
    506e:	df02      	svc	2
		diff += hdr->ticks_preempt_to_start;
    5070:	68a3      	ldr	r3, [r4, #8]
    5072:	441d      	add	r5, r3
		if (diff <
    5074:	2d26      	cmp	r5, #38	; 0x26
    5076:	d800      	bhi.n	507a <preempt_calc+0x76>
			hdr->ticks_preempt_to_start = diff;
    5078:	60a5      	str	r5, [r4, #8]
		return 1;
    507a:	2001      	movs	r0, #1
    507c:	e000      	b.n	5080 <preempt_calc+0x7c>
	return 0;
    507e:	2000      	movs	r0, #0
}
    5080:	b008      	add	sp, #32
    5082:	bd70      	pop	{r4, r5, r6, pc}
    5084:	20000474 	.word	0x20000474
    5088:	00004085 	.word	0x00004085

0000508c <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    508c:	4b29      	ldr	r3, [pc, #164]	; (5134 <event_adv+0xa8>)
    508e:	7d1a      	ldrb	r2, [r3, #20]
{
    5090:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    5092:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    5096:	4605      	mov	r5, r0
    5098:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    509a:	b12a      	cbz	r2, 50a8 <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    509c:	4040      	eors	r0, r0
    509e:	f380 8811 	msr	BASEPRI, r0
    50a2:	f04f 0004 	mov.w	r0, #4
    50a6:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    50a8:	7c1b      	ldrb	r3, [r3, #16]
    50aa:	b2db      	uxtb	r3, r3
    50ac:	2b05      	cmp	r3, #5
    50ae:	d1f5      	bne.n	509c <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    50b0:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    50b2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    50b6:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    50b8:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
    50bc:	7526      	strb	r6, [r4, #20]
	_radio.ticker_id_prepare = 0U;
    50be:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    50c0:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    50c2:	f7ff facf 	bl	4664 <adv_scan_configure.constprop.22>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    50c6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    50ca:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    50ce:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    50d2:	f363 0202 	bfi	r2, r3, #0, #3
    50d6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    50da:	f7ff f9f7 	bl	44cc <adv_setup>
	if (_radio.advertiser.filter_policy) {
    50de:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    50e2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    50e6:	d007      	beq.n	50f8 <event_adv+0x6c>
		struct ll_filter *wl = ctrl_filter_get(true);
    50e8:	4630      	mov	r0, r6
    50ea:	f000 fe5f 	bl	5dac <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    50ee:	1c82      	adds	r2, r0, #2
    50f0:	7841      	ldrb	r1, [r0, #1]
    50f2:	7800      	ldrb	r0, [r0, #0]
    50f4:	f001 fa72 	bl	65dc <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    50f8:	68e2      	ldr	r2, [r4, #12]
    50fa:	f105 0109 	add.w	r1, r5, #9
    50fe:	2001      	movs	r0, #1
    5100:	f001 fac4 	bl	668c <radio_tmr_start>
	radio_tmr_end_capture();
    5104:	f001 fb3e 	bl	6784 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    5108:	462a      	mov	r2, r5
    510a:	2105      	movs	r1, #5
    510c:	480a      	ldr	r0, [pc, #40]	; (5138 <event_adv+0xac>)
    510e:	f7ff ff79 	bl	5004 <preempt_calc>
    5112:	4603      	mov	r3, r0
    5114:	b128      	cbz	r0, 5122 <event_adv+0x96>
		_radio.state = STATE_STOP;
    5116:	2304      	movs	r3, #4
    5118:	7563      	strb	r3, [r4, #21]
}
    511a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    511e:	f001 b9c1 	b.w	64a4 <radio_disable>
		ticker_status =
    5122:	4a06      	ldr	r2, [pc, #24]	; (513c <event_adv+0xb0>)
    5124:	4601      	mov	r1, r0
    5126:	f7fe f9f3 	bl	3510 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    512a:	f030 0302 	bics.w	r3, r0, #2
    512e:	d1b5      	bne.n	509c <event_adv+0x10>
    5130:	bd70      	pop	{r4, r5, r6, pc}
    5132:	bf00      	nop
    5134:	20000298 	.word	0x20000298
    5138:	200002b0 	.word	0x200002b0
    513c:	00004425 	.word	0x00004425

00005140 <radio_init>:
{
    5140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_radio.hf_clock = hf_clock;
    5144:	4e3c      	ldr	r6, [pc, #240]	; (5238 <radio_init+0xf8>)
{
    5146:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    5148:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
    514c:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
    5150:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
    5154:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    5156:	f44f 7082 	mov.w	r0, #260	; 0x104
    515a:	fb00 4003 	mla	r0, r0, r3, r4
{
    515e:	f89d 9020 	ldrb.w	r9, [sp, #32]
	_radio.sca = sca;
    5162:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    5166:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    516a:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    516c:	f10c 0401 	add.w	r4, ip, #1
    5170:	b2e7      	uxtb	r7, r4
	    (offsetof(struct pdu_data, lldata) +
    5172:	f108 0403 	add.w	r4, r8, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    5176:	2c28      	cmp	r4, #40	; 0x28
	rx_count_max += 3;
    5178:	f109 0e03 	add.w	lr, r9, #3
    517c:	fa5f fe8e 	uxtb.w	lr, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
    5180:	f8a6 812c 	strh.w	r8, [r6, #300]	; 0x12c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    5184:	bf88      	it	hi
    5186:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    518a:	f886 e14c 	strb.w	lr, [r6, #332]	; 0x14c
		_radio.packet_rx_data_pool_size =
    518e:	bf8c      	ite	hi
    5190:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    5194:	eb0e 0e4e 	addls.w	lr, lr, lr, lsl #1
	_radio.entropy = entropy;
    5198:	6072      	str	r2, [r6, #4]
	_radio.packet_tx_count = (tx_count_max + 1);
    519a:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    519e:	f109 0204 	add.w	r2, r9, #4
    51a2:	b2d2      	uxtb	r2, r2
		_radio.packet_rx_data_pool_size =
    51a4:	bf8c      	ite	hi
    51a6:	fb18 fe0e 	smulbbhi	lr, r8, lr
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    51aa:	ea4f 1e0e 	movls.w	lr, lr, lsl #4
	_radio.packet_tx_count = (tx_count_max + 1);
    51ae:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    51b2:	f8a6 e12e 	strh.w	lr, [r6, #302]	; 0x12e
	_radio.packet_tx_count = (tx_count_max + 1);
    51b6:	f886 c16c 	strb.w	ip, [r6, #364]	; 0x16c
	_radio.packet_rx = (void *)mem_radio;
    51ba:	f8c6 0134 	str.w	r0, [r6, #308]	; 0x134
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    51be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    51c2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    51c6:	f8b6 412e 	ldrh.w	r4, [r6, #302]	; 0x12e
	_radio.pkt_tx = (void *)mem_radio;
    51ca:	f8c6 0164 	str.w	r0, [r6, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    51ce:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    51d0:	f04f 0e30 	mov.w	lr, #48	; 0x30
	_radio.pkt_release = (void *)mem_radio;
    51d4:	f8c6 0168 	str.w	r0, [r6, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    51d8:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    51da:	f8a6 e130 	strh.w	lr, [r6, #304]	; 0x130
	_radio.pkt_rx_data_pool = mem_radio;
    51de:	f8c6 0124 	str.w	r0, [r6, #292]	; 0x124
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    51e2:	fbb4 fefe 	udiv	lr, r4, lr
	mem_radio += _radio.packet_rx_data_pool_size;
    51e6:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    51e8:	18d4      	adds	r4, r2, r3
	_radio.link_rx_pool = mem_radio;
    51ea:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    51ee:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    51f2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
	_radio.pkt_tx_ctrl_pool = mem_radio;
    51f6:	f8c6 0150 	str.w	r0, [r6, #336]	; 0x150
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    51fa:	340a      	adds	r4, #10
    51fc:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    5200:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    5202:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    5204:	f8a6 4160 	strh.w	r4, [r6, #352]	; 0x160
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    5208:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    520c:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    520e:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    5212:	f886 2138 	strb.w	r2, [r6, #312]	; 0x138
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    5216:	f886 e132 	strb.w	lr, [r6, #306]	; 0x132
	_radio.pkt_tx_data_pool = mem_radio;
    521a:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
	if (retcode) {
    521e:	d003      	beq.n	5228 <radio_init+0xe8>
		return (retcode + mem_size);
    5220:	442c      	add	r4, r5
}
    5222:	4620      	mov	r0, r4
    5224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_radio.fc_ena = 1U;
    5228:	2301      	movs	r3, #1
    522a:	f886 317a 	strb.w	r3, [r6, #378]	; 0x17a
	common_init();
    522e:	f7ff fba9 	bl	4984 <common_init>
	radio_setup();
    5232:	f001 f83d 	bl	62b0 <radio_setup>
	return retcode;
    5236:	e7f4      	b.n	5222 <radio_init+0xe2>
    5238:	20000298 	.word	0x20000298

0000523c <ll_reset>:
{
    523c:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    523e:	2103      	movs	r1, #3
    5240:	2005      	movs	r0, #5
    5242:	f7fe ff85 	bl	4150 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    5246:	2104      	movs	r1, #4
    5248:	2006      	movs	r0, #6
    524a:	f7fe ff81 	bl	4150 <role_disable>
	for (conn_handle = 0U; conn_handle < _radio.connection_count;
    524e:	4c22      	ldr	r4, [pc, #136]	; (52d8 <ll_reset+0x9c>)
    5250:	2500      	movs	r5, #0
    5252:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    5256:	b2ab      	uxth	r3, r5
    5258:	429a      	cmp	r2, r3
    525a:	f105 0501 	add.w	r5, r5, #1
    525e:	d834      	bhi.n	52ca <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0U;
    5260:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5264:	f36f 1386 	bfc	r3, #6, #1
    5268:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0U;
    526c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    5270:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0U;
    5272:	f360 0300 	bfi	r3, r0, #0, #1
    5276:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    527a:	2230      	movs	r2, #48	; 0x30
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    527c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
    5280:	fbb3 f3f2 	udiv	r3, r3, r2
    5284:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    5288:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
	_radio.packet_rx_last = 0U;
    528c:	f884 0139 	strb.w	r0, [r4, #313]	; 0x139
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    5290:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0U;
    5292:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
	_radio.packet_release_last = 0U;
    5296:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    529a:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
	_radio.fc_ack = _radio.fc_req;
    529e:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	_radio.advertiser.conn = NULL;
    52a2:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    52a6:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    52aa:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
	_radio.packet_rx_acquire = 0U;
    52ae:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
	_radio.packet_tx_last = 0U;
    52b2:	f884 016e 	strb.w	r0, [r4, #366]	; 0x16e
	_radio.packet_release_first = 0U;
    52b6:	f884 016f 	strb.w	r0, [r4, #367]	; 0x16f
	_radio.fc_ack = _radio.fc_req;
    52ba:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	ll_filter_reset(false);
    52be:	f000 fe19 	bl	5ef4 <ll_filter_reset>
}
    52c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    52c6:	f7ff bb5d 	b.w	4984 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    52ca:	1da8      	adds	r0, r5, #6
    52cc:	21ff      	movs	r1, #255	; 0xff
    52ce:	b2c0      	uxtb	r0, r0
    52d0:	f7fe ff3e 	bl	4150 <role_disable>
    52d4:	e7bd      	b.n	5252 <ll_reset+0x16>
    52d6:	bf00      	nop
    52d8:	20000298 	.word	0x20000298

000052dc <radio_adv_data_get>:
}
    52dc:	4800      	ldr	r0, [pc, #0]	; (52e0 <radio_adv_data_get+0x4>)
    52de:	4770      	bx	lr
    52e0:	200002c2 	.word	0x200002c2

000052e4 <radio_scan_data_get>:
}
    52e4:	4800      	ldr	r0, [pc, #0]	; (52e8 <radio_scan_data_get+0x4>)
    52e6:	4770      	bx	lr
    52e8:	20000312 	.word	0x20000312

000052ec <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    52ec:	4b02      	ldr	r3, [pc, #8]	; (52f8 <ll_adv_is_enabled+0xc>)
    52ee:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    52f2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    52f6:	4770      	bx	lr
    52f8:	20000298 	.word	0x20000298

000052fc <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    52fc:	4b04      	ldr	r3, [pc, #16]	; (5310 <radio_adv_filter_pol_get+0x14>)
    52fe:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
    5302:	f010 0040 	ands.w	r0, r0, #64	; 0x40
		return _radio.advertiser.filter_policy;
    5306:	bf1c      	itt	ne
    5308:	f893 0029 	ldrbne.w	r0, [r3, #41]	; 0x29
    530c:	0980      	lsrne	r0, r0, #6
}
    530e:	4770      	bx	lr
    5310:	20000298 	.word	0x20000298

00005314 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    5314:	4b05      	ldr	r3, [pc, #20]	; (532c <radio_scan_filter_pol_get+0x18>)
    5316:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    531a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    531e:	bf1c      	itt	ne
    5320:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    5324:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    5328:	4770      	bx	lr
    532a:	bf00      	nop
    532c:	20000298 	.word	0x20000298

00005330 <ll_rx_get>:

u8_t ll_rx_get(void **node_rx, u16_t *handle)
{
    5330:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5334:	4605      	mov	r5, r0
    5336:	4608      	mov	r0, r1
	u8_t cmplt;

	cmplt = 0U;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    5338:	4918      	ldr	r1, [pc, #96]	; (539c <ll_rx_get+0x6c>)
    533a:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
    533e:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    5342:	4293      	cmp	r3, r2
    5344:	460f      	mov	r7, r1
    5346:	d01f      	beq.n	5388 <ll_rx_get+0x58>
		struct radio_pdu_node_rx *_node_rx;

		_node_rx = _radio.link_rx_head->mem;
    5348:	f8d3 8004 	ldr.w	r8, [r3, #4]

		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    534c:	f201 116f 	addw	r1, r1, #367	; 0x16f
    5350:	f898 2000 	ldrb.w	r2, [r8]
    5354:	f7fe fe9c 	bl	4090 <tx_cmplt_get>
				     _node_rx->hdr.packet_release_last);
		if (!cmplt) {
    5358:	4604      	mov	r4, r0
    535a:	b9e0      	cbnz	r0, 5396 <ll_rx_get+0x66>
			u8_t first, cmplt_prev, cmplt_curr;
			u16_t h;

			first = _radio.packet_release_first;
    535c:	ae02      	add	r6, sp, #8
    535e:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
    5362:	f806 3d03 	strb.w	r3, [r6, #-3]!
			cmplt_curr = 0U;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&h, &first,
    5366:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
    536a:	4631      	mov	r1, r6
    536c:	f10d 0006 	add.w	r0, sp, #6
    5370:	f7fe fe8e 	bl	4090 <tx_cmplt_get>
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
				 (cmplt_prev != cmplt_curr));
    5374:	b934      	cbnz	r4, 5384 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    5376:	b928      	cbnz	r0, 5384 <ll_rx_get+0x54>

			*node_rx = _node_rx;
    5378:	f8c5 8000 	str.w	r8, [r5]

		*node_rx = NULL;
	}

	return cmplt;
}
    537c:	4620      	mov	r0, r4
    537e:	b002      	add	sp, #8
    5380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    5384:	4604      	mov	r4, r0
    5386:	e7ee      	b.n	5366 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    5388:	f891 2170 	ldrb.w	r2, [r1, #368]	; 0x170
    538c:	f201 116f 	addw	r1, r1, #367	; 0x16f
    5390:	f7fe fe7e 	bl	4090 <tx_cmplt_get>
    5394:	4604      	mov	r4, r0
		*node_rx = NULL;
    5396:	2300      	movs	r3, #0
    5398:	602b      	str	r3, [r5, #0]
    539a:	e7ef      	b.n	537c <ll_rx_get+0x4c>
    539c:	20000298 	.word	0x20000298

000053a0 <ll_rx_dequeue>:

void ll_rx_dequeue(void)
{
    53a0:	b513      	push	{r0, r1, r4, lr}
	struct radio_pdu_node_rx *node_rx = NULL;
	memq_link_t *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    53a2:	4c15      	ldr	r4, [pc, #84]	; (53f8 <ll_rx_dequeue+0x58>)
	struct radio_pdu_node_rx *node_rx = NULL;
    53a4:	aa02      	add	r2, sp, #8
    53a6:	2300      	movs	r3, #0
    53a8:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    53ac:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    53b0:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    53b4:	f7fd f96c 	bl	2690 <memq_dequeue>
			    (void **)&node_rx);
	LL_ASSERT(link);
    53b8:	b928      	cbnz	r0, 53c6 <ll_rx_dequeue+0x26>
		/* did not use data link quota */
		break;
#endif /* CONFIG_BT_CONN */

	default:
		LL_ASSERT(0);
    53ba:	4040      	eors	r0, r0
    53bc:	f380 8811 	msr	BASEPRI, r0
    53c0:	f04f 0004 	mov.w	r0, #4
    53c4:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    53c6:	f504 71a0 	add.w	r1, r4, #320	; 0x140
    53ca:	f7fd f928 	bl	261e <mem_release>
	switch (node_rx->hdr.type) {
    53ce:	9b01      	ldr	r3, [sp, #4]
    53d0:	791a      	ldrb	r2, [r3, #4]
    53d2:	2a07      	cmp	r2, #7
    53d4:	d8f1      	bhi.n	53ba <ll_rx_dequeue+0x1a>
    53d6:	2301      	movs	r3, #1
    53d8:	4093      	lsls	r3, r2
    53da:	f013 0fe4 	tst.w	r3, #228	; 0xe4
    53de:	d0ec      	beq.n	53ba <ll_rx_dequeue+0x1a>
		LL_ASSERT(_radio.link_rx_data_quota <
    53e0:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
    53e4:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
    53e8:	3a01      	subs	r2, #1
    53ea:	4293      	cmp	r3, r2
    53ec:	dae5      	bge.n	53ba <ll_rx_dequeue+0x1a>
		_radio.link_rx_data_quota++;
    53ee:	3301      	adds	r3, #1
    53f0:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c

		ll_adv_scan_state_cb(0);
#endif /* CONFIG_BT_HCI_MESH_EXT */
	}

}
    53f4:	b002      	add	sp, #8
    53f6:	bd10      	pop	{r4, pc}
    53f8:	20000298 	.word	0x20000298

000053fc <ll_rx_mem_release>:

void ll_rx_mem_release(void **node_rx)
{
    53fc:	b570      	push	{r4, r5, r6, lr}
    53fe:	4604      	mov	r4, r0
#if defined(CONFIG_BT_HCI_MESH_EXT)
		case NODE_RX_TYPE_MESH_ADV_CPLT:
		case NODE_RX_TYPE_MESH_REPORT:
#endif /* CONFIG_BT_HCI_MESH_EXT */

			mem_release(_node_rx_free,
    5400:	4d0b      	ldr	r5, [pc, #44]	; (5430 <ll_rx_mem_release+0x34>)
	_node_rx = *node_rx;
    5402:	6800      	ldr	r0, [r0, #0]
	while (_node_rx) {
    5404:	b920      	cbnz	r0, 5410 <ll_rx_mem_release+0x14>
			LL_ASSERT(0);
			break;
		}
	}

	*node_rx = _node_rx;
    5406:	6020      	str	r0, [r4, #0]

	packet_rx_allocate(0xff);
}
    5408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	packet_rx_allocate(0xff);
    540c:	f7ff ba70 	b.w	48f0 <packet_rx_allocate.constprop.27>
		switch (_node_rx_free->hdr.type) {
    5410:	7903      	ldrb	r3, [r0, #4]
		_node_rx = _node_rx->hdr.next;
    5412:	6806      	ldr	r6, [r0, #0]
		switch (_node_rx_free->hdr.type) {
    5414:	3b05      	subs	r3, #5
    5416:	2b02      	cmp	r3, #2
    5418:	d804      	bhi.n	5424 <ll_rx_mem_release+0x28>
			mem_release(_node_rx_free,
    541a:	4629      	mov	r1, r5
    541c:	f7fd f8ff 	bl	261e <mem_release>
		_node_rx = _node_rx->hdr.next;
    5420:	4630      	mov	r0, r6
			break;
    5422:	e7ef      	b.n	5404 <ll_rx_mem_release+0x8>
			LL_ASSERT(0);
    5424:	4040      	eors	r0, r0
    5426:	f380 8811 	msr	BASEPRI, r0
    542a:	f04f 0004 	mov.w	r0, #4
    542e:	df02      	svc	2
    5430:	200003c0 	.word	0x200003c0

00005434 <radio_rx_fc_set>:

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    5434:	b530      	push	{r4, r5, lr}
	if (_radio.fc_ena) {
    5436:	4b27      	ldr	r3, [pc, #156]	; (54d4 <radio_rx_fc_set+0xa0>)
    5438:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
    543c:	b912      	cbnz	r2, 5444 <radio_rx_fc_set+0x10>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    543e:	2100      	movs	r1, #0
}
    5440:	4608      	mov	r0, r1
    5442:	bd30      	pop	{r4, r5, pc}
		u8_t req = _radio.fc_req;
    5444:	f893 5178 	ldrb.w	r5, [r3, #376]	; 0x178
		u8_t ack = _radio.fc_ack;
    5448:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
		u8_t req = _radio.fc_req;
    544c:	b2ed      	uxtb	r5, r5
		if (fc) {
    544e:	b359      	cbz	r1, 54a8 <radio_rx_fc_set+0x74>
			if (handle != 0xffff) {
    5450:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5454:	4288      	cmp	r0, r1
    5456:	d0f2      	beq.n	543e <radio_rx_fc_set+0xa>
	if (req == ack) {
    5458:	4295      	cmp	r5, r2
    545a:	d119      	bne.n	5490 <radio_rx_fc_set+0x5c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    545c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    5460:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
    5464:	4291      	cmp	r1, r2
    5466:	d111      	bne.n	548c <radio_rx_fc_set+0x58>
				ack1 = TRIPLE_BUFFER_SIZE;
    5468:	2d00      	cmp	r5, #0
    546a:	bf14      	ite	ne
    546c:	462a      	movne	r2, r5
    546e:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
    5470:	3a01      	subs	r2, #1
    5472:	b2d2      	uxtb	r2, r2
    5474:	eb03 0142 	add.w	r1, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    5478:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
			if (req != _radio.fc_req) {
    547c:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
			_radio.fc_handle[--ack1] = handle;
    5480:	f8a1 0172 	strh.w	r0, [r1, #370]	; 0x172
			if (req != _radio.fc_req) {
    5484:	4295      	cmp	r5, r2
    5486:	d0da      	beq.n	543e <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
    5488:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
			return 1;
    548c:	2101      	movs	r1, #1
    548e:	e7d7      	b.n	5440 <radio_rx_fc_set+0xc>
	} else if (((req == 0) &&
    5490:	b92d      	cbnz	r5, 549e <radio_rx_fc_set+0x6a>
    5492:	f8b3 1176 	ldrh.w	r1, [r3, #374]	; 0x176
	return 0;
    5496:	1a09      	subs	r1, r1, r0
    5498:	bf18      	it	ne
    549a:	2101      	movne	r1, #1
    549c:	e7d0      	b.n	5440 <radio_rx_fc_set+0xc>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    549e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    54a2:	f8b3 1170 	ldrh.w	r1, [r3, #368]	; 0x170
    54a6:	e7f6      	b.n	5496 <radio_rx_fc_set+0x62>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    54a8:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    54ac:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
    54b0:	42a0      	cmp	r0, r4
    54b2:	d1c4      	bne.n	543e <radio_rx_fc_set+0xa>
    54b4:	4295      	cmp	r5, r2
    54b6:	d0c2      	beq.n	543e <radio_rx_fc_set+0xa>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    54b8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
			_radio.fc_ack = req;
    54bc:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    54c0:	42a0      	cmp	r0, r4
    54c2:	d0bc      	beq.n	543e <radio_rx_fc_set+0xa>
			    (req == _radio.fc_req)) {
    54c4:	f893 0178 	ldrb.w	r0, [r3, #376]	; 0x178
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    54c8:	4285      	cmp	r5, r0
    54ca:	d1b8      	bne.n	543e <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
    54cc:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
    54d0:	e7b6      	b.n	5440 <radio_rx_fc_set+0xc>
    54d2:	bf00      	nop
    54d4:	20000298 	.word	0x20000298

000054d8 <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    54d8:	4770      	bx	lr
    54da:	0000      	movs	r0, r0
    54dc:	0000      	movs	r0, r0
	...

000054e0 <radio_adv_enable>:
{
    54e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
    54e4:	4f96      	ldr	r7, [pc, #600]	; (5740 <radio_adv_enable+0x260>)
{
    54e6:	b08f      	sub	sp, #60	; 0x3c
    54e8:	469a      	mov	sl, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    54ea:	2302      	movs	r3, #2
    54ec:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    54ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
{
    54f2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    54f6:	f013 0f40 	tst.w	r3, #64	; 0x40
{
    54fa:	4683      	mov	fp, r0
    54fc:	4688      	mov	r8, r1
    54fe:	463e      	mov	r6, r7
	if (_radio.advertiser.is_enabled) {
    5500:	d003      	beq.n	550a <radio_adv_enable+0x2a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5502:	200c      	movs	r0, #12
}
    5504:	b00f      	add	sp, #60	; 0x3c
    5506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    550a:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
    550e:	232a      	movs	r3, #42	; 0x2a
    5510:	f04f 0927 	mov.w	r9, #39	; 0x27
    5514:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    5518:	f817 3009 	ldrb.w	r3, [r7, r9]
    551c:	f003 030f 	and.w	r3, r3, #15
    5520:	2b01      	cmp	r3, #1
    5522:	d875      	bhi.n	5610 <radio_adv_enable+0x130>
		if (_radio.advertiser.conn) {
    5524:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
    5528:	2c00      	cmp	r4, #0
    552a:	d1ea      	bne.n	5502 <radio_adv_enable+0x22>
		link = mem_acquire(&_radio.link_rx_free);
    552c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
    5530:	f7fd f85b 	bl	25ea <mem_acquire>
		if (!link) {
    5534:	900a      	str	r0, [sp, #40]	; 0x28
    5536:	b158      	cbz	r0, 5550 <radio_adv_enable+0x70>
		conn = mem_acquire(&_radio.conn_free);
    5538:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    553c:	f7fd f855 	bl	25ea <mem_acquire>
		if (!conn) {
    5540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5542:	4605      	mov	r5, r0
    5544:	b930      	cbnz	r0, 5554 <radio_adv_enable+0x74>
			mem_release(link, &_radio.link_rx_free);
    5546:	f507 71a0 	add.w	r1, r7, #320	; 0x140
    554a:	4610      	mov	r0, r2
    554c:	f7fd f867 	bl	261e <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    5550:	2007      	movs	r0, #7
    5552:	e7d7      	b.n	5504 <radio_adv_enable+0x24>
		conn->handle = 0xFFFF;
    5554:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5558:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = LL_FEAT;
    555a:	f44f 33a4 	mov.w	r3, #83968	; 0x14800
    555e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0U;
    5562:	7f43      	ldrb	r3, [r0, #29]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.link = link;
    5564:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		conn->data_chan_sel = 0U;
    5568:	f364 1386 	bfi	r3, r4, #6, #1
		conn->role = 1U;
    556c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5570:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6U;
    5572:	2306      	movs	r3, #6
    5574:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0U;
    5576:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->data_chan_use = 0U;
    557a:	77c4      	strb	r4, [r0, #31]
		conn->common.fex_valid = 0U;
    557c:	f364 1345 	bfi	r3, r4, #5, #1
		conn->slave.latency_enabled = 0U;
    5580:	f364 0300 	bfi	r3, r4, #0, #1
		conn->slave.latency_cancel = 0U;
    5584:	f364 0341 	bfi	r3, r4, #1, #1
    5588:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0U;
    558c:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->event_counter = 0U;
    5590:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->llcp_version.tx = 0U;
    5592:	f364 0300 	bfi	r3, r4, #0, #1
		conn->llcp_version.rx = 0U;
    5596:	f364 0341 	bfi	r3, r4, #1, #1
    559a:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->sn = 0U;
    559e:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->latency_prepare = 0U;
    55a2:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->sn = 0U;
    55a4:	f364 0300 	bfi	r3, r4, #0, #1
		conn->nesn = 0U;
    55a8:	f364 0341 	bfi	r3, r4, #1, #1
		conn->pause_rx = 0U;
    55ac:	f364 0382 	bfi	r3, r4, #2, #1
		conn->pause_tx = 0U;
    55b0:	f364 03c3 	bfi	r3, r4, #3, #1
		conn->enc_rx = 0U;
    55b4:	f364 1304 	bfi	r3, r4, #4, #1
		conn->enc_tx = 0U;
    55b8:	f364 1345 	bfi	r3, r4, #5, #1
		conn->refresh = 0U;
    55bc:	f364 1386 	bfi	r3, r4, #6, #1
		conn->empty = 0U;
    55c0:	f364 13c7 	bfi	r3, r4, #7, #1
    55c4:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
	if (done) {
    55c8:	4b5e      	ldr	r3, [pc, #376]	; (5744 <radio_adv_enable+0x264>)
		conn->latency_event = 0U;
    55ca:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->slave.window_widening_prepare_us = 0U;
    55cc:	6444      	str	r4, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0U;
    55ce:	6484      	str	r4, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0U;
    55d0:	6584      	str	r4, [r0, #88]	; 0x58
		conn->supervision_expire = 0U;
    55d2:	8604      	strh	r4, [r0, #48]	; 0x30
		conn->procedure_expire = 0U;
    55d4:	8684      	strh	r4, [r0, #52]	; 0x34
		conn->llcp_req = 0U;
    55d6:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
		conn->llcp_ack = 0U;
    55da:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
		conn->llcp_terminate.req = 0U;
    55de:	f880 4098 	strb.w	r4, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0U;
    55e2:	f880 4099 	strb.w	r4, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0U;
    55e6:	f880 409b 	strb.w	r4, [r0, #155]	; 0x9b
		conn->pkt_tx_head = NULL;
    55ea:	f8c0 40ec 	str.w	r4, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    55ee:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    55f2:	f8c0 40f4 	str.w	r4, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    55f6:	f8c0 40f8 	str.w	r4, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    55fa:	f8c0 40fc 	str.w	r4, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0U;
    55fe:	f880 4100 	strb.w	r4, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0U;
    5602:	f880 4101 	strb.w	r4, [r0, #257]	; 0x101
	if (done) {
    5606:	781a      	ldrb	r2, [r3, #0]
    5608:	2a00      	cmp	r2, #0
    560a:	d06d      	beq.n	56e8 <radio_adv_enable+0x208>
		_radio.advertiser.conn = conn;
    560c:	f8c6 50cc 	str.w	r5, [r6, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    5610:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
    5612:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
    5616:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
    561a:	f36b 0302 	bfi	r3, fp, #0, #3
	_radio.advertiser.chan_map = chan_map;
    561e:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
    5622:	f36a 1387 	bfi	r3, sl, #6, #2
    5626:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    562a:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    562e:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    5630:	2327      	movs	r3, #39	; 0x27
    5632:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    5634:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    5636:	2300      	movs	r3, #0
    5638:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    563a:	f7fd f987 	bl	294c <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    563e:	f817 3009 	ldrb.w	r3, [r7, r9]
    5642:	f003 030f 	and.w	r3, r3, #15
    5646:	2b01      	cmp	r3, #1
    5648:	d165      	bne.n	5716 <radio_adv_enable+0x236>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    564a:	f44f 7327 	mov.w	r3, #668	; 0x29c
    564e:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    5650:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    5654:	493c      	ldr	r1, [pc, #240]	; (5748 <radio_adv_enable+0x268>)
    5656:	a338      	add	r3, pc, #224	; (adr r3, 5738 <radio_adv_enable+0x258>)
    5658:	e9d3 2300 	ldrd	r2, r3, [r3]
    565c:	fba0 0101 	umull	r0, r1, r0, r1
    5660:	f7fa fdaa 	bl	1b8 <__aeabi_uldivmod>
	ticks_slot_offset =
    5664:	69b3      	ldr	r3, [r6, #24]
    5666:	69f5      	ldr	r5, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    5668:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    566a:	429d      	cmp	r5, r3
    566c:	bf38      	it	cc
    566e:	461d      	movcc	r5, r3
	ticks_anchor = ticker_ticks_now_get();
    5670:	f7fd ffa0 	bl	35b4 <ticker_ticks_now_get>
		ret =
    5674:	ab0d      	add	r3, sp, #52	; 0x34
    5676:	9308      	str	r3, [sp, #32]
    5678:	4b34      	ldr	r3, [pc, #208]	; (574c <radio_adv_enable+0x26c>)
    567a:	9307      	str	r3, [sp, #28]
    567c:	2400      	movs	r4, #0
    567e:	4b34      	ldr	r3, [pc, #208]	; (5750 <radio_adv_enable+0x270>)
    5680:	9406      	str	r4, [sp, #24]
    5682:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5684:	6a73      	ldr	r3, [r6, #36]	; 0x24
		ret =
    5686:	9403      	str	r4, [sp, #12]
	ticks_anchor = ticker_ticks_now_get();
    5688:	4607      	mov	r7, r0
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    568a:	4832      	ldr	r0, [pc, #200]	; (5754 <radio_adv_enable+0x274>)
		ret =
    568c:	9402      	str	r4, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    568e:	442b      	add	r3, r5
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    5690:	fa1f f888 	uxth.w	r8, r8
		ret =
    5694:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    5696:	fba8 0100 	umull	r0, r1, r8, r0
    569a:	2391      	movs	r3, #145	; 0x91
    569c:	fb03 1108 	mla	r1, r3, r8, r1
    56a0:	a325      	add	r3, pc, #148	; (adr r3, 5738 <radio_adv_enable+0x258>)
    56a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    56a6:	f7fa fd87 	bl	1b8 <__aeabi_uldivmod>
		ret =
    56aa:	9400      	str	r4, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    56ac:	9001      	str	r0, [sp, #4]
		ret =
    56ae:	463b      	mov	r3, r7
    56b0:	2205      	movs	r2, #5
    56b2:	2103      	movs	r1, #3
    56b4:	4620      	mov	r0, r4
    56b6:	f7fd fe11 	bl	32dc <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    56ba:	2802      	cmp	r0, #2
    56bc:	d035      	beq.n	572a <radio_adv_enable+0x24a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    56be:	980d      	ldr	r0, [sp, #52]	; 0x34
    56c0:	2800      	cmp	r0, #0
    56c2:	f47f af1e 	bne.w	5502 <radio_adv_enable+0x22>
		_radio.advertiser.is_enabled = 1U;
    56c6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    56ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    56ce:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    56d2:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    56d6:	f013 0401 	ands.w	r4, r3, #1
    56da:	f47f af13 	bne.w	5504 <radio_adv_enable+0x24>
			ll_adv_scan_state_cb(BIT(0));
    56de:	2001      	movs	r0, #1
    56e0:	f7ff fefa 	bl	54d8 <ll_adv_scan_state_cb>
		return 0;
    56e4:	4620      	mov	r0, r4
    56e6:	e70d      	b.n	5504 <radio_adv_enable+0x24>
	done = true;
    56e8:	2201      	movs	r2, #1
    56ea:	481b      	ldr	r0, [pc, #108]	; (5758 <radio_adv_enable+0x278>)
    56ec:	701a      	strb	r2, [r3, #0]
    56ee:	f001 fce9 	bl	70c4 <_impl_device_get_binding>
	LL_ASSERT(lf_clock);
    56f2:	4604      	mov	r4, r0
    56f4:	b938      	cbnz	r0, 5706 <radio_adv_enable+0x226>
    56f6:	4040      	eors	r0, r0
    56f8:	f380 8811 	msr	BASEPRI, r0
    56fc:	f04f 0004 	mov.w	r0, #4
    5700:	df02      	svc	2
		cpu_sleep();
    5702:	f7fe fcb1 	bl	4068 <cpu_sleep>
	return api->on(dev, sys);
    5706:	6863      	ldr	r3, [r4, #4]
    5708:	2101      	movs	r1, #1
    570a:	681b      	ldr	r3, [r3, #0]
    570c:	4620      	mov	r0, r4
    570e:	4798      	blx	r3
	while (clock_control_on(lf_clock, (void *)CLOCK_CONTROL_NRF_K32SRC)) {
    5710:	2800      	cmp	r0, #0
    5712:	d1f6      	bne.n	5702 <radio_adv_enable+0x222>
    5714:	e77a      	b.n	560c <radio_adv_enable+0x12c>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    5716:	2b02      	cmp	r3, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    5718:	bf0c      	ite	eq
    571a:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    571e:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    5722:	4358      	muls	r0, r3
    5724:	e796      	b.n	5654 <radio_adv_enable+0x174>
			cpu_sleep();
    5726:	f7fe fc9f 	bl	4068 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    572a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    572c:	2b02      	cmp	r3, #2
    572e:	d0fa      	beq.n	5726 <radio_adv_enable+0x246>
    5730:	e7c5      	b.n	56be <radio_adv_enable+0x1de>
    5732:	bf00      	nop
    5734:	f3af 8000 	nop.w
    5738:	1afd498d 	.word	0x1afd498d
    573c:	00000007 	.word	0x00000007
    5740:	20000298 	.word	0x20000298
    5744:	2000041c 	.word	0x2000041c
    5748:	3b9aca00 	.word	0x3b9aca00
    574c:	00004071 	.word	0x00004071
    5750:	0000482d 	.word	0x0000482d
    5754:	84e72a00 	.word	0x84e72a00
    5758:	00008580 	.word	0x00008580

0000575c <radio_adv_disable>:
{
    575c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    575e:	2103      	movs	r1, #3
    5760:	2005      	movs	r0, #5
    5762:	f7fe fcf5 	bl	4150 <role_disable>
	if (!status) {
    5766:	4606      	mov	r6, r0
    5768:	b9d8      	cbnz	r0, 57a2 <radio_adv_disable+0x46>
		_radio.advertiser.is_enabled = 0U;
    576a:	4c0f      	ldr	r4, [pc, #60]	; (57a8 <radio_adv_disable+0x4c>)
    576c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    5770:	f360 1286 	bfi	r2, r0, #6, #1
    5774:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    5778:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    577c:	07d3      	lsls	r3, r2, #31
    577e:	d401      	bmi.n	5784 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    5780:	f7ff feaa 	bl	54d8 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    5784:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		if (conn) {
    5788:	b15d      	cbz	r5, 57a2 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    578a:	2300      	movs	r3, #0
    578c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(hdr->link, &_radio.link_rx_free);
    5790:	4906      	ldr	r1, [pc, #24]	; (57ac <radio_adv_disable+0x50>)
    5792:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    5796:	f7fc ff42 	bl	261e <mem_release>
			mem_release(conn, &_radio.conn_free);
    579a:	4905      	ldr	r1, [pc, #20]	; (57b0 <radio_adv_disable+0x54>)
    579c:	4628      	mov	r0, r5
    579e:	f7fc ff3e 	bl	261e <mem_release>
}
    57a2:	4630      	mov	r0, r6
    57a4:	bd70      	pop	{r4, r5, r6, pc}
    57a6:	bf00      	nop
    57a8:	20000298 	.word	0x20000298
    57ac:	200003d8 	.word	0x200003d8
    57b0:	200003a4 	.word	0x200003a4

000057b4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    57b4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    57b6:	4b07      	ldr	r3, [pc, #28]	; (57d4 <rtc0_nrf5_isr+0x20>)
    57b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    57bc:	b122      	cbz	r2, 57c8 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    57be:	2000      	movs	r0, #0
    57c0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
    57c4:	f7fd fd78 	bl	32b8 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    57c8:	2000      	movs	r0, #0

	DEBUG_TICKER_ISR(0);
}
    57ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    57ce:	f7fd b811 	b.w	27f4 <mayfly_run>
    57d2:	bf00      	nop
    57d4:	4000b000 	.word	0x4000b000

000057d8 <swi5_nrf5_isr>:

static void swi5_nrf5_isr(void *arg)
{
	DEBUG_TICKER_JOB(1);

	mayfly_run(MAYFLY_CALL_ID_1);
    57d8:	2001      	movs	r0, #1
    57da:	f7fd b80b 	b.w	27f4 <mayfly_run>

000057de <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    57de:	4668      	mov	r0, sp
    57e0:	f020 0107 	bic.w	r1, r0, #7
    57e4:	468d      	mov	sp, r1
    57e6:	b501      	push	{r0, lr}
    57e8:	f7fc f8b0 	bl	194c <_arch_isr_direct_header>
	isr_radio();
    57ec:	f000 fd30 	bl	6250 <isr_radio>
	ISR_DIRECT_PM();
    57f0:	f7fc f89e 	bl	1930 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	z_sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		_IntExit();
    57f4:	f7fb feaa 	bl	154c <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    57f8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    57fc:	4685      	mov	sp, r0
    57fe:	4770      	bx	lr

00005800 <radio_active_callback>:
{
    5800:	4770      	bx	lr
	...

00005804 <radio_event_callback>:
	k_sem_give(sem_recv);
    5804:	4b01      	ldr	r3, [pc, #4]	; (580c <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    5806:	6818      	ldr	r0, [r3, #0]
    5808:	f002 b977 	b.w	7afa <_impl_k_sem_give>
    580c:	20000a44 	.word	0x20000a44

00005810 <ll_init>:

	DEBUG_TICKER_JOB(0);
}

int ll_init(struct k_sem *sem_rx)
{
    5810:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    5812:	4b38      	ldr	r3, [pc, #224]	; (58f4 <ll_init+0xe4>)
{
    5814:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    5816:	6018      	str	r0, [r3, #0]
    5818:	4837      	ldr	r0, [pc, #220]	; (58f8 <ll_init+0xe8>)
    581a:	f001 fc53 	bl	70c4 <_impl_device_get_binding>

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF_K32SRC_DRV_NAME);
	if (!clk_k32) {
    581e:	b918      	cbnz	r0, 5828 <ll_init+0x18>
		return -ENODEV;
    5820:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI5_IRQn);

	return 0;
}
    5824:	b006      	add	sp, #24
    5826:	bd70      	pop	{r4, r5, r6, pc}
    5828:	6843      	ldr	r3, [r0, #4]
    582a:	2101      	movs	r1, #1
    582c:	681b      	ldr	r3, [r3, #0]
    582e:	4798      	blx	r3
    5830:	4832      	ldr	r0, [pc, #200]	; (58fc <ll_init+0xec>)
    5832:	f001 fc47 	bl	70c4 <_impl_device_get_binding>
	if (!entropy) {
    5836:	4604      	mov	r4, r0
    5838:	2800      	cmp	r0, #0
    583a:	d0f1      	beq.n	5820 <ll_init+0x10>
	cntr_init();
    583c:	f000 fb66 	bl	5f0c <cntr_init>
	mayfly_init();
    5840:	f7fc ff36 	bl	26b0 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    5844:	4b2e      	ldr	r3, [pc, #184]	; (5900 <ll_init+0xf0>)
    5846:	2208      	movs	r2, #8
    5848:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    584a:	2202      	movs	r2, #2
    584c:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    584e:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    5850:	4a2c      	ldr	r2, [pc, #176]	; (5904 <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    5852:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    5854:	2503      	movs	r5, #3
    5856:	721d      	strb	r5, [r3, #8]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    5858:	9205      	str	r2, [sp, #20]
    585a:	4a2b      	ldr	r2, [pc, #172]	; (5908 <ll_init+0xf8>)
    585c:	9204      	str	r2, [sp, #16]
    585e:	4a2b      	ldr	r2, [pc, #172]	; (590c <ll_init+0xfc>)
    5860:	9203      	str	r2, [sp, #12]
    5862:	4a2b      	ldr	r2, [pc, #172]	; (5910 <ll_init+0x100>)
    5864:	9202      	str	r2, [sp, #8]
    5866:	220d      	movs	r2, #13
    5868:	9201      	str	r2, [sp, #4]
    586a:	9300      	str	r3, [sp, #0]
    586c:	4a29      	ldr	r2, [pc, #164]	; (5914 <ll_init+0x104>)
    586e:	2304      	movs	r3, #4
    5870:	2107      	movs	r1, #7
    5872:	f7fd fcef 	bl	3254 <ticker_init>
	LL_ASSERT(!err);
    5876:	4606      	mov	r6, r0
    5878:	b128      	cbz	r0, 5886 <ll_init+0x76>
    587a:	4040      	eors	r0, r0
    587c:	f380 8811 	msr	BASEPRI, r0
    5880:	f04f 0004 	mov.w	r0, #4
    5884:	df02      	svc	2
    5886:	4824      	ldr	r0, [pc, #144]	; (5918 <ll_init+0x108>)
    5888:	f001 fc1c 	bl	70c4 <_impl_device_get_binding>
	if (!clk_m16) {
    588c:	2800      	cmp	r0, #0
    588e:	d0c7      	beq.n	5820 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF_K32SRC_ACCURACY, entropy,
    5890:	f44f 7309 	mov.w	r3, #548	; 0x224
    5894:	9305      	str	r3, [sp, #20]
    5896:	4b21      	ldr	r3, [pc, #132]	; (591c <ll_init+0x10c>)
    5898:	9304      	str	r3, [sp, #16]
    589a:	9501      	str	r5, [sp, #4]
    589c:	231b      	movs	r3, #27
    589e:	2501      	movs	r5, #1
    58a0:	9303      	str	r3, [sp, #12]
    58a2:	9302      	str	r3, [sp, #8]
    58a4:	4622      	mov	r2, r4
    58a6:	9500      	str	r5, [sp, #0]
    58a8:	4633      	mov	r3, r6
    58aa:	2107      	movs	r1, #7
    58ac:	f7ff fc48 	bl	5140 <radio_init>
	if (err) {
    58b0:	4604      	mov	r4, r0
    58b2:	b9e0      	cbnz	r0, 58ee <ll_init+0xde>
	ll_filter_reset(true);
    58b4:	4628      	mov	r0, r5
    58b6:	f000 fb1d 	bl	5ef4 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    58ba:	4622      	mov	r2, r4
    58bc:	4621      	mov	r1, r4
    58be:	4628      	mov	r0, r5
    58c0:	f7fc f81c 	bl	18fc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    58c4:	4622      	mov	r2, r4
    58c6:	4621      	mov	r1, r4
    58c8:	200b      	movs	r0, #11
    58ca:	f7fc f817 	bl	18fc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI5_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi5_nrf5_isr,
    58ce:	4622      	mov	r2, r4
    58d0:	4621      	mov	r1, r4
    58d2:	2019      	movs	r0, #25
    58d4:	f7fc f812 	bl	18fc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    58d8:	4628      	mov	r0, r5
    58da:	f7fb ffdd 	bl	1898 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    58de:	200b      	movs	r0, #11
    58e0:	f7fb ffda 	bl	1898 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI5_IRQn);
    58e4:	2019      	movs	r0, #25
    58e6:	f7fb ffd7 	bl	1898 <_arch_irq_enable>
	return 0;
    58ea:	4620      	mov	r0, r4
    58ec:	e79a      	b.n	5824 <ll_init+0x14>
		return -ENOMEM;
    58ee:	f06f 000b 	mvn.w	r0, #11
    58f2:	e797      	b.n	5824 <ll_init+0x14>
    58f4:	20000a44 	.word	0x20000a44
    58f8:	00008580 	.word	0x00008580
    58fc:	00008557 	.word	0x00008557
    5900:	20000a24 	.word	0x20000a24
    5904:	000069a5 	.word	0x000069a5
    5908:	0000692d 	.word	0x0000692d
    590c:	0000690d 	.word	0x0000690d
    5910:	200007b4 	.word	0x200007b4
    5914:	2000069c 	.word	0x2000069c
    5918:	0000858b 	.word	0x0000858b
    591c:	20000478 	.word	0x20000478

00005920 <ll_adv_params_set>:
u8_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
		       u8_t adv_type, u8_t own_addr_type,
		       u8_t direct_addr_type, u8_t const *const direct_addr,
		       u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
		       u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    5920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5924:	b085      	sub	sp, #20
    5926:	461d      	mov	r5, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    5928:	2306      	movs	r3, #6
    592a:	f04f 0a01 	mov.w	sl, #1
    592e:	2000      	movs	r0, #0
    5930:	f88d 300a 	strb.w	r3, [sp, #10]
    5934:	f04f 0b02 	mov.w	fp, #2
    5938:	2307      	movs	r3, #7
{
    593a:	4688      	mov	r8, r1
    593c:	4614      	mov	r4, r2
    593e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    5940:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
    5944:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    5948:	f88d 0008 	strb.w	r0, [sp, #8]
    594c:	f88d a009 	strb.w	sl, [sp, #9]
    5950:	f88d b00b 	strb.w	fp, [sp, #11]
    5954:	f88d a00c 	strb.w	sl, [sp, #12]
    5958:	f88d 300d 	strb.w	r3, [sp, #13]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled(0)) {
    595c:	f7ff fcc6 	bl	52ec <ll_adv_is_enabled>
    5960:	2800      	cmp	r0, #0
    5962:	f040 8119 	bne.w	5b98 <ll_adv_params_set+0x278>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    5966:	498f      	ldr	r1, [pc, #572]	; (5ba4 <ll_adv_params_set+0x284>)
    5968:	780b      	ldrb	r3, [r1, #0]

	/* extended */
	if (adv_type > 0x04) {
    596a:	2d04      	cmp	r5, #4
	ll_adv.phy_p = BIT(0);
    596c:	f36a 1347 	bfi	r3, sl, #5, #3
    5970:	700b      	strb	r3, [r1, #0]
	if (adv_type > 0x04) {
    5972:	d96e      	bls.n	5a52 <ll_adv_params_set+0x132>
		/* legacy */
		if (evt_prop & BIT(4)) {
    5974:	f018 0f10 	tst.w	r8, #16
    5978:	d016      	beq.n	59a8 <ll_adv_params_set+0x88>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    597a:	2303      	movs	r3, #3
    597c:	f88d 3004 	strb.w	r3, [sp, #4]
    5980:	2304      	movs	r3, #4
    5982:	f88d 3005 	strb.w	r3, [sp, #5]

			adv_type = leg_adv_type[evt_prop & 0x03];
    5986:	aa04      	add	r2, sp, #16
    5988:	f008 0303 	and.w	r3, r8, #3
    598c:	4413      	add	r3, r2
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    598e:	f88d b006 	strb.w	fp, [sp, #6]
    5992:	f88d 0007 	strb.w	r0, [sp, #7]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    5996:	f018 0f08 	tst.w	r8, #8
			adv_type = leg_adv_type[evt_prop & 0x03];
    599a:	f813 5c0c 	ldrb.w	r5, [r3, #-12]
			if (evt_prop & BIT(3)) {
    599e:	d058      	beq.n	5a52 <ll_adv_params_set+0x132>
				adv_type = 0x01;
    59a0:	4655      	mov	r5, sl
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    59a2:	2300      	movs	r3, #0
    59a4:	604b      	str	r3, [r1, #4]
    59a6:	e00f      	b.n	59c8 <ll_adv_params_set+0xa8>
			if (((evt_prop & 0x03) == 0x03) ||
    59a8:	f008 0303 	and.w	r3, r8, #3
    59ac:	2b03      	cmp	r3, #3
    59ae:	f000 80f5 	beq.w	5b9c <ll_adv_params_set+0x27c>
    59b2:	f008 030c 	and.w	r3, r8, #12
    59b6:	2b0c      	cmp	r3, #12
    59b8:	f000 80f0 	beq.w	5b9c <ll_adv_params_set+0x27c>
			ll_adv.phy_p = phy_p;
    59bc:	780b      	ldrb	r3, [r1, #0]
    59be:	f369 1347 	bfi	r3, r9, #5, #3
    59c2:	700b      	strb	r3, [r1, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    59c4:	2505      	movs	r5, #5
		ll_adv.interval = interval;
    59c6:	604c      	str	r4, [r1, #4]
	}
	ll_adv.chan_map = chan_map;
    59c8:	780b      	ldrb	r3, [r1, #0]
    59ca:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    59ce:	f362 0302 	bfi	r3, r2, #0, #3
	ll_adv.filter_policy = filter_policy;
    59d2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    59d6:	f362 03c4 	bfi	r3, r2, #3, #2
    59da:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    59dc:	f7ff fc7e 	bl	52dc <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    59e0:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    59e4:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    59e8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    59ec:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
    59f0:	ab04      	add	r3, sp, #16
    59f2:	441d      	add	r5, r3
    59f4:	5c83      	ldrb	r3, [r0, r2]
    59f6:	f815 1c08 	ldrb.w	r1, [r5, #-8]
    59fa:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->rfu = 0;
    59fe:	f36f 1304 	bfc	r3, #4, #1
    5a02:	5483      	strb	r3, [r0, r2]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    5a04:	b2db      	uxtb	r3, r3
    5a06:	f003 010f 	and.w	r1, r3, #15
    5a0a:	2901      	cmp	r1, #1
		pdu->chan_sel = 1;
    5a0c:	bf94      	ite	ls
    5a0e:	f043 0320 	orrls.w	r3, r3, #32
		pdu->chan_sel = 0;
    5a12:	f36f 1345 	bfchi	r3, #5, #1
    5a16:	5483      	strb	r3, [r0, r2]
	pdu->tx_addr = own_addr_type & 0x1;
    5a18:	5c83      	ldrb	r3, [r0, r2]
    5a1a:	f00a 0a01 	and.w	sl, sl, #1
    5a1e:	f36a 1386 	bfi	r3, sl, #6, #1
	pdu->rx_addr = 0;
    5a22:	f36f 13c7 	bfc	r3, #7, #1
    5a26:	5483      	strb	r3, [r0, r2]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    5a28:	b2db      	uxtb	r3, r3
    5a2a:	f003 010f 	and.w	r1, r3, #15
    5a2e:	2901      	cmp	r1, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5a30:	eb00 0402 	add.w	r4, r0, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    5a34:	d110      	bne.n	5a58 <ll_adv_params_set+0x138>
		pdu->rx_addr = direct_addr_type;
    5a36:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    5a3a:	f361 13c7 	bfi	r3, r1, #7, #1
    5a3e:	5483      	strb	r3, [r0, r2]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    5a40:	9910      	ldr	r1, [sp, #64]	; 0x40
    5a42:	2206      	movs	r2, #6
    5a44:	f104 0008 	add.w	r0, r4, #8
    5a48:	f7fc f940 	bl	1ccc <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    5a4c:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    5a4e:	7063      	strb	r3, [r4, #1]
    5a50:	e080      	b.n	5b54 <ll_adv_params_set+0x234>
	if (adv_type != 0x01) {
    5a52:	2d01      	cmp	r5, #1
    5a54:	d1b7      	bne.n	59c6 <ll_adv_params_set+0xa6>
    5a56:	e7a4      	b.n	59a2 <ll_adv_params_set+0x82>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    5a58:	2907      	cmp	r1, #7
    5a5a:	f040 8098 	bne.w	5b8e <ll_adv_params_set+0x26e>
		p->ext_hdr_len = 0;
    5a5e:	78a2      	ldrb	r2, [r4, #2]
		*(u8_t *)&_h = *(u8_t *)h;
    5a60:	78e0      	ldrb	r0, [r4, #3]
		p->adv_mode = evt_prop & 0x03;
    5a62:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    5a66:	f368 1287 	bfi	r2, r8, #6, #2
    5a6a:	70a2      	strb	r2, [r4, #2]
		*(u8_t *)h = 0;
    5a6c:	2200      	movs	r2, #0
    5a6e:	70e2      	strb	r2, [r4, #3]
		if (_h.adv_addr) {
    5a70:	07c2      	lsls	r2, r0, #31
		if (!p->adv_mode &&
    5a72:	78a2      	ldrb	r2, [r4, #2]
		ptr = (u8_t *)h + sizeof(*h);
    5a74:	f104 0504 	add.w	r5, r4, #4
			_ptr += BDADDR_SIZE;
    5a78:	bf4c      	ite	mi
    5a7a:	f104 010a 	addmi.w	r1, r4, #10
		_ptr = ptr;
    5a7e:	4629      	movpl	r1, r5
		if (!p->adv_mode &&
    5a80:	f012 0fc0 	tst.w	r2, #192	; 0xc0
		p = (void *)&pdu->adv_ext_ind;
    5a84:	f104 0302 	add.w	r3, r4, #2
    5a88:	f000 0210 	and.w	r2, r0, #16
		if (!p->adv_mode &&
    5a8c:	d10c      	bne.n	5aa8 <ll_adv_params_set+0x188>
    5a8e:	b12a      	cbz	r2, 5a9c <ll_adv_params_set+0x17c>
		    (!_h.aux_ptr ||
    5a90:	f018 0f20 	tst.w	r8, #32
    5a94:	d108      	bne.n	5aa8 <ll_adv_params_set+0x188>
		     (!(evt_prop & BIT(5)) && (phy_p != BIT(2))))) {
    5a96:	f1b9 0f04 	cmp.w	r9, #4
    5a9a:	d005      	beq.n	5aa8 <ll_adv_params_set+0x188>
			h->adv_addr = 1;
    5a9c:	78e5      	ldrb	r5, [r4, #3]
    5a9e:	f045 0501 	orr.w	r5, r5, #1
    5aa2:	70e5      	strb	r5, [r4, #3]
			ptr += BDADDR_SIZE;
    5aa4:	f104 050a 	add.w	r5, r4, #10
		if (_h.adi) {
    5aa8:	0700      	lsls	r0, r0, #28
			h->adi = 1;
    5aaa:	bf41      	itttt	mi
    5aac:	78e0      	ldrbmi	r0, [r4, #3]
    5aae:	f040 0008 	orrmi.w	r0, r0, #8
    5ab2:	70e0      	strbmi	r0, [r4, #3]
			ptr += sizeof(struct ext_adv_adi);
    5ab4:	3502      	addmi	r5, #2
		if (_h.aux_ptr) {
    5ab6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    5aba:	b122      	cbz	r2, 5ac6 <ll_adv_params_set+0x1a6>
			h->aux_ptr = 1;
    5abc:	78e2      	ldrb	r2, [r4, #3]
    5abe:	f042 0210 	orr.w	r2, r2, #16
    5ac2:	70e2      	strb	r2, [r4, #3]
			ptr += sizeof(struct ext_adv_aux_ptr);
    5ac4:	3503      	adds	r5, #3
		if (evt_prop & BIT(6) &&
    5ac6:	f018 0f40 	tst.w	r8, #64	; 0x40
    5aca:	d008      	beq.n	5ade <ll_adv_params_set+0x1be>
    5acc:	b110      	cbz	r0, 5ad4 <ll_adv_params_set+0x1b4>
		    (!_h.aux_ptr || (phy_p != BIT(2)))) {
    5ace:	f1b9 0f04 	cmp.w	r9, #4
    5ad2:	d004      	beq.n	5ade <ll_adv_params_set+0x1be>
			h->tx_pwr = 1;
    5ad4:	78e2      	ldrb	r2, [r4, #3]
    5ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5ada:	70e2      	strb	r2, [r4, #3]
			ptr++;
    5adc:	3501      	adds	r5, #1
		len = ptr - (u8_t *)p;
    5ade:	1aeb      	subs	r3, r5, r3
    5ae0:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    5ae2:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
    5ae4:	bf8a      	itet	hi
    5ae6:	78a2      	ldrbhi	r2, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    5ae8:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
    5aea:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    5aee:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
    5af0:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
    5af2:	bf84      	itt	hi
    5af4:	f360 0205 	bfihi	r2, r0, #0, #6
    5af8:	70a2      	strbhi	r2, [r4, #2]
		if (h->tx_pwr) {
    5afa:	065b      	lsls	r3, r3, #25
    5afc:	d509      	bpl.n	5b12 <ll_adv_params_set+0x1f2>
			if (tx_pwr) {
    5afe:	2e00      	cmp	r6, #0
    5b00:	d043      	beq.n	5b8a <ll_adv_params_set+0x26a>
				if (*tx_pwr != 0x7F) {
    5b02:	7833      	ldrb	r3, [r6, #0]
    5b04:	2b7f      	cmp	r3, #127	; 0x7f
    5b06:	d101      	bne.n	5b0c <ll_adv_params_set+0x1ec>
					*tx_pwr = _tx_pwr;
    5b08:	2300      	movs	r3, #0
    5b0a:	7033      	strb	r3, [r6, #0]
			*ptr = _tx_pwr;
    5b0c:	f805 3c01 	strb.w	r3, [r5, #-1]
			ptr--;
    5b10:	3d01      	subs	r5, #1
		if (h->aux_ptr) {
    5b12:	78e2      	ldrb	r2, [r4, #3]
    5b14:	06d0      	lsls	r0, r2, #27
    5b16:	d50f      	bpl.n	5b38 <ll_adv_params_set+0x218>
	return __builtin_ffs(op);
    5b18:	fa97 f3a7 	rbit	r3, r7
    5b1c:	2f00      	cmp	r7, #0
			aux->phy = find_lsb_set(phy_s);
    5b1e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    5b22:	fab3 f383 	clz	r3, r3
    5b26:	bf08      	it	eq
    5b28:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    5b2c:	3301      	adds	r3, #1
    5b2e:	f363 1047 	bfi	r0, r3, #5, #3
    5b32:	f805 0c01 	strb.w	r0, [r5, #-1]
			ptr -= sizeof(struct ext_adv_aux_ptr);
    5b36:	3d03      	subs	r5, #3
		if (h->adi) {
    5b38:	0713      	lsls	r3, r2, #28
    5b3a:	d50b      	bpl.n	5b54 <ll_adv_params_set+0x234>
			memcpy(ptr, _ptr, sizeof(struct ext_adv_adi));
    5b3c:	2202      	movs	r2, #2
    5b3e:	1ea8      	subs	r0, r5, #2
    5b40:	f7fc f8c4 	bl	1ccc <memcpy>
			adi->sid = sid;
    5b44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    5b48:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
    5b4c:	f362 1307 	bfi	r3, r2, #4, #4
    5b50:	f805 3c01 	strb.w	r3, [r5, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    5b54:	f7ff fbc6 	bl	52e4 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5b58:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    5b5c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    5b60:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    5b64:	2404      	movs	r4, #4
    5b66:	5c83      	ldrb	r3, [r0, r2]
    5b68:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    5b6c:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    5b70:	f36a 1386 	bfi	r3, sl, #6, #1
	pdu->rx_addr = 0;
    5b74:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5b78:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    5b7a:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    5b7c:	7848      	ldrb	r0, [r1, #1]
    5b7e:	b978      	cbnz	r0, 5ba0 <ll_adv_params_set+0x280>
		pdu->len = BDADDR_SIZE;
    5b80:	2306      	movs	r3, #6
    5b82:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    5b84:	b005      	add	sp, #20
    5b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_tx_pwr = 0;
    5b8a:	4633      	mov	r3, r6
    5b8c:	e7be      	b.n	5b0c <ll_adv_params_set+0x1ec>
	} else if (pdu->len == 0) {
    5b8e:	7863      	ldrb	r3, [r4, #1]
    5b90:	2b00      	cmp	r3, #0
    5b92:	d1df      	bne.n	5b54 <ll_adv_params_set+0x234>
		pdu->len = BDADDR_SIZE;
    5b94:	2306      	movs	r3, #6
    5b96:	e75a      	b.n	5a4e <ll_adv_params_set+0x12e>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5b98:	200c      	movs	r0, #12
    5b9a:	e7f3      	b.n	5b84 <ll_adv_params_set+0x264>
				return 0x12; /* invalid HCI cmd param */
    5b9c:	2012      	movs	r0, #18
    5b9e:	e7f1      	b.n	5b84 <ll_adv_params_set+0x264>
	return 0;
    5ba0:	2000      	movs	r0, #0
    5ba2:	e7ef      	b.n	5b84 <ll_adv_params_set+0x264>
    5ba4:	20000a48 	.word	0x20000a48

00005ba8 <ll_adv_data_set>:
#if defined(CONFIG_BT_CTLR_ADV_EXT)
u8_t ll_adv_data_set(u16_t handle, u8_t len, u8_t const *const data)
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u8_t ll_adv_data_set(u8_t len, u8_t const *const data)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    5ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bac:	460e      	mov	r6, r1
    5bae:	4617      	mov	r7, r2
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    5bb0:	f7ff fb94 	bl	52dc <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5bb4:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
    5bb8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    5bbc:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
    5bc0:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    5bc2:	f810 e002 	ldrb.w	lr, [r0, r2]
    5bc6:	f00e 030f 	and.w	r3, lr, #15
    5bca:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5bcc:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    5bd0:	d040      	beq.n	5c54 <ll_adv_data_set+0xac>
    5bd2:	2b07      	cmp	r3, #7
    5bd4:	d03e      	beq.n	5c54 <ll_adv_data_set+0xac>
		 */
		return 0;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    5bd6:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
    5bda:	42ab      	cmp	r3, r5
    5bdc:	d104      	bne.n	5be8 <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
    5bde:	3501      	adds	r5, #1
    5be0:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0U;
    5be2:	2d02      	cmp	r5, #2
    5be4:	bf08      	it	eq
    5be6:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    5be8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5bec:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
    5bf0:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
    5bf4:	5ce0      	ldrb	r0, [r4, r3]
    5bf6:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0U;
    5bfa:	f36f 1004 	bfc	r0, #4, #1
    5bfe:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    5c00:	5ca0      	ldrb	r0, [r4, r2]
    5c02:	f814 e003 	ldrb.w	lr, [r4, r3]
    5c06:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5c0a:	f360 1e45 	bfi	lr, r0, #5, #1
    5c0e:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0U;
	}

	pdu->tx_addr = prev->tx_addr;
    5c12:	5ca0      	ldrb	r0, [r4, r2]
    5c14:	fa5f fe8e 	uxtb.w	lr, lr
    5c18:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5c1c:	f360 1e86 	bfi	lr, r0, #6, #1
    5c20:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
    5c24:	5ca2      	ldrb	r2, [r4, r2]
    5c26:	fa5f f08e 	uxtb.w	r0, lr
    5c2a:	09d2      	lsrs	r2, r2, #7
    5c2c:	f362 10c7 	bfi	r0, r2, #7, #1
    5c30:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    5c32:	2206      	movs	r2, #6
    5c34:	3102      	adds	r1, #2
    5c36:	f108 0002 	add.w	r0, r8, #2
    5c3a:	f7fc f847 	bl	1ccc <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    5c3e:	4632      	mov	r2, r6
    5c40:	4639      	mov	r1, r7
    5c42:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
    5c46:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    5c48:	f7fc f840 	bl	1ccc <memcpy>
	pdu->len = BDADDR_SIZE + len;
    5c4c:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    5c50:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f

	return 0;
}
    5c54:	2000      	movs	r0, #0
    5c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005c5a <ll_adv_scan_rsp_set>:
#if defined(CONFIG_BT_CTLR_ADV_EXT)
u8_t ll_adv_scan_rsp_set(u16_t handle, u8_t len, u8_t const *const data)
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u8_t ll_adv_scan_rsp_set(u8_t len, u8_t const *const data)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    5c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c5e:	4617      	mov	r7, r2
    5c60:	460e      	mov	r6, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    5c62:	f7ff fb3f 	bl	52e4 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    5c66:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
    5c6a:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
    5c6e:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    5c70:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    5c72:	d137      	bne.n	5ce4 <ll_adv_scan_rsp_set+0x8a>
		last = radio_scan_data->last + 1;
    5c74:	1c5d      	adds	r5, r3, #1
    5c76:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    5c78:	2d02      	cmp	r5, #2
			last = 0;
    5c7a:	bf08      	it	eq
    5c7c:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    5c7e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5c82:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    5c86:	b22b      	sxth	r3, r5
    5c88:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    5c8c:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    5c90:	f04f 0e04 	mov.w	lr, #4
    5c94:	5ce0      	ldrb	r0, [r4, r3]
    5c96:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    5c9a:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    5c9e:	f36f 1045 	bfc	r0, #5, #1
    5ca2:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
    5ca4:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    5ca6:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
    5ca8:	5ce2      	ldrb	r2, [r4, r3]
    5caa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5cae:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    5cb2:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
    5cb6:	f36f 12c7 	bfc	r2, #7, #1
    5cba:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
    5cbc:	1db3      	adds	r3, r6, #6
    5cbe:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    5cc2:	2206      	movs	r2, #6
    5cc4:	3102      	adds	r1, #2
    5cc6:	f108 0002 	add.w	r0, r8, #2
    5cca:	f7fb ffff 	bl	1ccc <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    5cce:	4632      	mov	r2, r6
    5cd0:	4639      	mov	r1, r7
    5cd2:	f108 0008 	add.w	r0, r8, #8
    5cd6:	f7fb fff9 	bl	1ccc <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    5cda:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f

	return 0;
}
    5cde:	2000      	movs	r0, #0
    5ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ce4:	461d      	mov	r5, r3
    5ce6:	e7ca      	b.n	5c7e <ll_adv_scan_rsp_set+0x24>

00005ce8 <ll_adv_enable>:
u8_t ll_adv_enable(u16_t handle, u8_t enable)
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
{
    5ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    5cec:	b921      	cbnz	r1, 5cf8 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
#endif /* !CONFIG_BT_HCI_MESH_EXT */
	return status;
}
    5cee:	b003      	add	sp, #12
    5cf0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    5cf4:	f7ff bd32 	b.w	575c <radio_adv_disable>
	} else if (ll_adv_is_enabled(0)) {
    5cf8:	2000      	movs	r0, #0
    5cfa:	f7ff faf7 	bl	52ec <ll_adv_is_enabled>
    5cfe:	4607      	mov	r7, r0
    5d00:	2800      	cmp	r0, #0
    5d02:	d14f      	bne.n	5da4 <ll_adv_enable+0xbc>
	radio_adv_data = radio_adv_data_get();
    5d04:	f7ff faea 	bl	52dc <radio_adv_data_get>
    5d08:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    5d0a:	f7ff faeb 	bl	52e4 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    5d0e:	f898 404f 	ldrb.w	r4, [r8, #79]	; 0x4f
    5d12:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5d16:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	radio_scan_data = radio_scan_data_get();
    5d1a:	4606      	mov	r6, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    5d1c:	f818 0004 	ldrb.w	r0, [r8, r4]
    5d20:	f000 030f 	and.w	r3, r0, #15
    5d24:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    5d26:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    5d2a:	d11e      	bne.n	5d6a <ll_adv_enable+0x82>
		if (h->adv_addr) {
    5d2c:	f899 3003 	ldrb.w	r3, [r9, #3]
    5d30:	07db      	lsls	r3, r3, #31
    5d32:	d50a      	bpl.n	5d4a <ll_adv_enable+0x62>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    5d34:	4639      	mov	r1, r7
    5d36:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5d3a:	f7fd fc41 	bl	35c0 <ll_addr_get>
    5d3e:	2206      	movs	r2, #6
    5d40:	4601      	mov	r1, r0
    5d42:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    5d46:	f7fb ffc1 	bl	1ccc <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    5d4a:	4b17      	ldr	r3, [pc, #92]	; (5da8 <ll_adv_enable+0xc0>)
    5d4c:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    5d4e:	8899      	ldrh	r1, [r3, #4]
    5d50:	23ff      	movs	r3, #255	; 0xff
    5d52:	9300      	str	r3, [sp, #0]
    5d54:	f000 0207 	and.w	r2, r0, #7
    5d58:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    5d5c:	0940      	lsrs	r0, r0, #5
    5d5e:	f7ff fbbf 	bl	54e0 <radio_adv_enable>
	return status;
    5d62:	b2c0      	uxtb	r0, r0
}
    5d64:	b003      	add	sp, #12
    5d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    5d6a:	4639      	mov	r1, r7
    5d6c:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    5d70:	f896 504f 	ldrb.w	r5, [r6, #79]	; 0x4f
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    5d74:	f7fd fc24 	bl	35c0 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    5d78:	2206      	movs	r2, #6
    5d7a:	4601      	mov	r1, r0
    5d7c:	f109 0002 	add.w	r0, r9, #2
    5d80:	f7fb ffa4 	bl	1ccc <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    5d84:	f818 0004 	ldrb.w	r0, [r8, r4]
    5d88:	4639      	mov	r1, r7
    5d8a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5d8e:	f7fd fc17 	bl	35c0 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    5d92:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5d96:	ebc5 05c3 	rsb	r5, r5, r3, lsl #3
    5d9a:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    5d9c:	4601      	mov	r1, r0
    5d9e:	2206      	movs	r2, #6
    5da0:	1ca8      	adds	r0, r5, #2
    5da2:	e7d0      	b.n	5d46 <ll_adv_enable+0x5e>
		return 0;
    5da4:	2000      	movs	r0, #0
    5da6:	e7dd      	b.n	5d64 <ll_adv_enable+0x7c>
    5da8:	20000a48 	.word	0x20000a48

00005dac <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    5dac:	b928      	cbnz	r0, 5dba <ctrl_filter_get+0xe>
    5dae:	4040      	eors	r0, r0
    5db0:	f380 8811 	msr	BASEPRI, r0
    5db4:	f04f 0004 	mov.w	r0, #4
    5db8:	df02      	svc	2
	return &wl_filter;
#endif
}
    5dba:	4801      	ldr	r0, [pc, #4]	; (5dc0 <ctrl_filter_get+0x14>)
    5dbc:	4770      	bx	lr
    5dbe:	bf00      	nop
    5dc0:	20000a51 	.word	0x20000a51

00005dc4 <ll_wl_size_get>:

u8_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    5dc4:	2008      	movs	r0, #8
    5dc6:	4770      	bx	lr

00005dc8 <ll_wl_clear>:

u8_t ll_wl_clear(void)
{
    5dc8:	b508      	push	{r3, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    5dca:	f7ff fa97 	bl	52fc <radio_adv_filter_pol_get>
    5dce:	b108      	cbz	r0, 5dd4 <ll_wl_clear+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5dd0:	200c      	movs	r0, #12
    5dd2:	bd08      	pop	{r3, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    5dd4:	f7ff fa9e 	bl	5314 <radio_scan_filter_pol_get>
    5dd8:	f010 0001 	ands.w	r0, r0, #1
    5ddc:	d1f8      	bne.n	5dd0 <ll_wl_clear+0x8>
	filter->enable_bitmask = 0U;
    5dde:	4b03      	ldr	r3, [pc, #12]	; (5dec <ll_wl_clear+0x24>)
    5de0:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0U;
    5de2:	7058      	strb	r0, [r3, #1]
#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0U;
    5de4:	4b02      	ldr	r3, [pc, #8]	; (5df0 <ll_wl_clear+0x28>)
    5de6:	7018      	strb	r0, [r3, #0]

	return 0;
}
    5de8:	bd08      	pop	{r3, pc}
    5dea:	bf00      	nop
    5dec:	20000a51 	.word	0x20000a51
    5df0:	20000a50 	.word	0x20000a50

00005df4 <ll_wl_add>:

u8_t ll_wl_add(bt_addr_le_t *addr)
{
    5df4:	b570      	push	{r4, r5, r6, lr}
    5df6:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    5df8:	f7ff fa80 	bl	52fc <radio_adv_filter_pol_get>
    5dfc:	4605      	mov	r5, r0
    5dfe:	b108      	cbz	r0, 5e04 <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5e00:	200c      	movs	r0, #12
    5e02:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    5e04:	f7ff fa86 	bl	5314 <radio_scan_filter_pol_get>
    5e08:	f010 0001 	ands.w	r0, r0, #1
    5e0c:	d1f8      	bne.n	5e00 <ll_wl_add+0xc>
	}

	if (addr->type == ADDR_TYPE_ANON) {
    5e0e:	7823      	ldrb	r3, [r4, #0]
    5e10:	2bff      	cmp	r3, #255	; 0xff
    5e12:	d103      	bne.n	5e1c <ll_wl_add+0x28>
		wl_anon = 1U;
    5e14:	4b11      	ldr	r3, [pc, #68]	; (5e5c <ll_wl_add+0x68>)
    5e16:	2201      	movs	r2, #1
    5e18:	701a      	strb	r2, [r3, #0]
		return 0;
    5e1a:	bd70      	pop	{r4, r5, r6, pc}
	if (filter->enable_bitmask == 0xFF) {
    5e1c:	4910      	ldr	r1, [pc, #64]	; (5e60 <ll_wl_add+0x6c>)
    5e1e:	780a      	ldrb	r2, [r1, #0]
    5e20:	2aff      	cmp	r2, #255	; 0xff
    5e22:	d019      	beq.n	5e58 <ll_wl_add+0x64>
    5e24:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    5e26:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    5e2a:	07f6      	lsls	r6, r6, #31
    5e2c:	d412      	bmi.n	5e54 <ll_wl_add+0x60>
	filter->enable_bitmask |= BIT(index);
    5e2e:	2601      	movs	r6, #1
    5e30:	4086      	lsls	r6, r0
    5e32:	4332      	orrs	r2, r6
    5e34:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    5e36:	f003 0301 	and.w	r3, r3, #1
    5e3a:	784a      	ldrb	r2, [r1, #1]
    5e3c:	4083      	lsls	r3, r0
    5e3e:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    5e40:	2206      	movs	r2, #6
    5e42:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    5e46:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    5e48:	3002      	adds	r0, #2
    5e4a:	1c61      	adds	r1, r4, #1
    5e4c:	f7fb ff3e 	bl	1ccc <memcpy>
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
    5e50:	b2e8      	uxtb	r0, r5
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    5e52:	bd70      	pop	{r4, r5, r6, pc}
	     index++) {
    5e54:	3001      	adds	r0, #1
    5e56:	e7e6      	b.n	5e26 <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    5e58:	2507      	movs	r5, #7
    5e5a:	e7f9      	b.n	5e50 <ll_wl_add+0x5c>
    5e5c:	20000a50 	.word	0x20000a50
    5e60:	20000a51 	.word	0x20000a51

00005e64 <ll_wl_remove>:

u8_t ll_wl_remove(bt_addr_le_t *addr)
{
    5e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e68:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    5e6a:	f7ff fa47 	bl	52fc <radio_adv_filter_pol_get>
    5e6e:	4606      	mov	r6, r0
    5e70:	b110      	cbz	r0, 5e78 <ll_wl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5e72:	200c      	movs	r0, #12
    5e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    5e78:	f7ff fa4c 	bl	5314 <radio_scan_filter_pol_get>
    5e7c:	f010 0001 	ands.w	r0, r0, #1
    5e80:	d1f7      	bne.n	5e72 <ll_wl_remove+0xe>
	}

	if (addr->type == ADDR_TYPE_ANON) {
    5e82:	f897 8000 	ldrb.w	r8, [r7]
    5e86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    5e8a:	d103      	bne.n	5e94 <ll_wl_remove+0x30>
		wl_anon = 0U;
    5e8c:	4b17      	ldr	r3, [pc, #92]	; (5eec <ll_wl_remove+0x88>)
    5e8e:	7018      	strb	r0, [r3, #0]
		return 0;
    5e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!filter->enable_bitmask) {
    5e94:	4c16      	ldr	r4, [pc, #88]	; (5ef0 <ll_wl_remove+0x8c>)
    5e96:	7823      	ldrb	r3, [r4, #0]
    5e98:	b133      	cbz	r3, 5ea8 <ll_wl_remove+0x44>
    5e9a:	2508      	movs	r5, #8
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    5e9c:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    5e9e:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    5ea2:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    5ea6:	d203      	bcs.n	5eb0 <ll_wl_remove+0x4c>
		return BT_HCI_ERR_INVALID_PARAM;
    5ea8:	2612      	movs	r6, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    5eaa:	b2f0      	uxtb	r0, r6
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    5eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((filter->enable_bitmask & BIT(index)) &&
    5eb0:	7823      	ldrb	r3, [r4, #0]
    5eb2:	40eb      	lsrs	r3, r5
    5eb4:	07da      	lsls	r2, r3, #31
    5eb6:	d5f4      	bpl.n	5ea2 <ll_wl_remove+0x3e>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    5eb8:	7863      	ldrb	r3, [r4, #1]
    5eba:	412b      	asrs	r3, r5
    5ebc:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    5ec0:	07db      	lsls	r3, r3, #31
    5ec2:	d4ee      	bmi.n	5ea2 <ll_wl_remove+0x3e>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    5ec4:	fb09 4005 	mla	r0, r9, r5, r4
    5ec8:	2206      	movs	r2, #6
    5eca:	4639      	mov	r1, r7
    5ecc:	3002      	adds	r0, #2
    5ece:	f7fb fee8 	bl	1ca2 <memcmp>
		     (addr_type & 0x01)) &&
    5ed2:	2800      	cmp	r0, #0
    5ed4:	d1e5      	bne.n	5ea2 <ll_wl_remove+0x3e>
			filter->enable_bitmask &= ~BIT(index);
    5ed6:	2301      	movs	r3, #1
    5ed8:	40ab      	lsls	r3, r5
    5eda:	7822      	ldrb	r2, [r4, #0]
    5edc:	43db      	mvns	r3, r3
    5ede:	b2db      	uxtb	r3, r3
    5ee0:	401a      	ands	r2, r3
    5ee2:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    5ee4:	7862      	ldrb	r2, [r4, #1]
    5ee6:	4013      	ands	r3, r2
    5ee8:	7063      	strb	r3, [r4, #1]
    5eea:	e7de      	b.n	5eaa <ll_wl_remove+0x46>
    5eec:	20000a50 	.word	0x20000a50
    5ef0:	20000a51 	.word	0x20000a51

00005ef4 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0U;
    5ef4:	4a03      	ldr	r2, [pc, #12]	; (5f04 <ll_filter_reset+0x10>)
    5ef6:	2300      	movs	r3, #0
    5ef8:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0U;
    5efa:	4a03      	ldr	r2, [pc, #12]	; (5f08 <ll_filter_reset+0x14>)
    5efc:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0U;
    5efe:	7053      	strb	r3, [r2, #1]
    5f00:	4770      	bx	lr
    5f02:	bf00      	nop
    5f04:	20000a50 	.word	0x20000a50
    5f08:	20000a51 	.word	0x20000a51

00005f0c <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    5f0c:	4b05      	ldr	r3, [pc, #20]	; (5f24 <cntr_init+0x18>)
    5f0e:	2200      	movs	r2, #0
    5f10:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
    5f14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5f18:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
    5f1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    5f20:	4770      	bx	lr
    5f22:	bf00      	nop
    5f24:	4000b000 	.word	0x4000b000

00005f28 <cntr_start>:
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    5f28:	4a04      	ldr	r2, [pc, #16]	; (5f3c <cntr_start+0x14>)
    5f2a:	7813      	ldrb	r3, [r2, #0]
    5f2c:	1c59      	adds	r1, r3, #1
    5f2e:	7011      	strb	r1, [r2, #0]
    5f30:	2001      	movs	r0, #1
    5f32:	b913      	cbnz	r3, 5f3a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5f34:	4a02      	ldr	r2, [pc, #8]	; (5f40 <cntr_start+0x18>)
    5f36:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
    5f38:	4618      	mov	r0, r3
}
    5f3a:	4770      	bx	lr
    5f3c:	20000a83 	.word	0x20000a83
    5f40:	4000b000 	.word	0x4000b000

00005f44 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    5f44:	4b09      	ldr	r3, [pc, #36]	; (5f6c <cntr_stop+0x28>)
    5f46:	7818      	ldrb	r0, [r3, #0]
    5f48:	b928      	cbnz	r0, 5f56 <cntr_stop+0x12>
    5f4a:	4040      	eors	r0, r0
    5f4c:	f380 8811 	msr	BASEPRI, r0
    5f50:	f04f 0004 	mov.w	r0, #4
    5f54:	df02      	svc	2

	if (--_refcount) {
    5f56:	3801      	subs	r0, #1
    5f58:	b2c0      	uxtb	r0, r0
    5f5a:	7018      	strb	r0, [r3, #0]
    5f5c:	2301      	movs	r3, #1
    5f5e:	b910      	cbnz	r0, 5f66 <cntr_stop+0x22>
    5f60:	4a03      	ldr	r2, [pc, #12]	; (5f70 <cntr_stop+0x2c>)
    5f62:	6013      	str	r3, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
    5f64:	4770      	bx	lr
		return 1;
    5f66:	4618      	mov	r0, r3
}
    5f68:	4770      	bx	lr
    5f6a:	bf00      	nop
    5f6c:	20000a83 	.word	0x20000a83
    5f70:	4000b004 	.word	0x4000b004

00005f74 <cntr_cnt_get>:
     return p_reg->COUNTER;
    5f74:	4b01      	ldr	r3, [pc, #4]	; (5f7c <cntr_cnt_get+0x8>)
    5f76:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
    5f7a:	4770      	bx	lr
    5f7c:	4000b000 	.word	0x4000b000

00005f80 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
    5f80:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5f84:	4b01      	ldr	r3, [pc, #4]	; (5f8c <cntr_cmp_set+0xc>)
    5f86:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    5f8a:	4770      	bx	lr
    5f8c:	4000b000 	.word	0x4000b000

00005f90 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    5f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    5f92:	4b12      	ldr	r3, [pc, #72]	; (5fdc <do_ecb+0x4c>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f94:	4d12      	ldr	r5, [pc, #72]	; (5fe0 <do_ecb+0x50>)
    5f96:	2101      	movs	r1, #1
		NRF_ECB->EVENTS_ENDECB = 0;
    5f98:	2600      	movs	r6, #0
    5f9a:	46ae      	mov	lr, r5
    5f9c:	461a      	mov	r2, r3
    5f9e:	6029      	str	r1, [r5, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    5fa0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    5fa4:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    5fa8:	f8c3 6104 	str.w	r6, [r3, #260]	; 0x104
    5fac:	6019      	str	r1, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    5fae:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    5fb2:	b934      	cbnz	r4, 5fc2 <do_ecb+0x32>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    5fb4:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    5fb8:	b91c      	cbnz	r4, 5fc2 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    5fba:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    5fbe:	2c00      	cmp	r4, #0
    5fc0:	d1f5      	bne.n	5fae <do_ecb+0x1e>
    5fc2:	f8ce 1000 	str.w	r1, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    5fc6:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    5fca:	2c00      	cmp	r4, #0
    5fcc:	d1e7      	bne.n	5f9e <do_ecb+0xe>
    5fce:	f8d2 7504 	ldr.w	r7, [r2, #1284]	; 0x504
    5fd2:	2f00      	cmp	r7, #0
    5fd4:	d0e3      	beq.n	5f9e <do_ecb+0xe>

	NRF_ECB->ECBDATAPTR = 0;
    5fd6:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    5fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fdc:	4000e000 	.word	0x4000e000
    5fe0:	4000e004 	.word	0x4000e004

00005fe4 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    5fe4:	b570      	push	{r4, r5, r6, lr}
    5fe6:	b08c      	sub	sp, #48	; 0x30
    5fe8:	460e      	mov	r6, r1
    5fea:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    5fec:	4601      	mov	r1, r0
    5fee:	2210      	movs	r2, #16
    5ff0:	4668      	mov	r0, sp
{
    5ff2:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    5ff4:	f7fc fb2b 	bl	264e <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    5ff8:	2210      	movs	r2, #16
    5ffa:	eb0d 0002 	add.w	r0, sp, r2
    5ffe:	4631      	mov	r1, r6
    6000:	f7fc fb25 	bl	264e <mem_rcopy>

	do_ecb(&ecb);
    6004:	4668      	mov	r0, sp
    6006:	f7ff ffc3 	bl	5f90 <do_ecb>

	if (cipher_text_le) {
    600a:	b125      	cbz	r5, 6016 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    600c:	2210      	movs	r2, #16
    600e:	a908      	add	r1, sp, #32
    6010:	4628      	mov	r0, r5
    6012:	f7fc fb1c 	bl	264e <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    6016:	b124      	cbz	r4, 6022 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    6018:	2210      	movs	r2, #16
    601a:	a908      	add	r1, sp, #32
    601c:	4620      	mov	r0, r4
    601e:	f7fb fe55 	bl	1ccc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    6022:	b00c      	add	sp, #48	; 0x30
    6024:	bd70      	pop	{r4, r5, r6, pc}
	...

00006028 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
    6028:	2800      	cmp	r0, #0
    NRF_PPI->CHENSET = mask;
}

__STATIC_INLINE void nrf_ppi_channels_disable(uint32_t mask)
{
    NRF_PPI->CHENCLR = mask;
    602a:	4b08      	ldr	r3, [pc, #32]	; (604c <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    602c:	bf14      	ite	ne
    602e:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
    6032:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    6036:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
    603a:	bf14      	ite	ne
    603c:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
    6040:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    NRF_PPI->CHENSET = mask;
    6044:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    6048:	4770      	bx	lr
    604a:	bf00      	nop
    604c:	4001f000 	.word	0x4001f000

00006050 <sw_switch.isra.6>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    6050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    6054:	4d75      	ldr	r5, [pc, #468]	; (622c <sw_switch.isra.6+0x1dc>)

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    6056:	4c76      	ldr	r4, [pc, #472]	; (6230 <sw_switch.isra.6+0x1e0>)
    6058:	782e      	ldrb	r6, [r5, #0]
    605a:	4f76      	ldr	r7, [pc, #472]	; (6234 <sw_switch.isra.6+0x1e4>)
    605c:	f8c4 7560 	str.w	r7, [r4, #1376]	; 0x560
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
    6060:	b233      	sxth	r3, r6
    6062:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    6066:	4688      	mov	r8, r1
	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
    6068:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
    606c:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    6070:	f8c4 1564 	str.w	r1, [r4, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    6074:	f106 040b 	add.w	r4, r6, #11
    6078:	b2e4      	uxtb	r4, r4
    607a:	00e4      	lsls	r4, r4, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle));

	nrf_ppi_event_endpoint_setup(ppi,
    607c:	496e      	ldr	r1, [pc, #440]	; (6238 <sw_switch.isra.6+0x1e8>)
    607e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    6082:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    6086:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    608a:	4461      	add	r1, ip
}

__STATIC_INLINE void nrf_ppi_event_endpoint_setup(nrf_ppi_channel_t channel,
                                                  uint32_t          eep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    608c:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
    6090:	f106 0708 	add.w	r7, r6, #8
    6094:	f10e 0e04 	add.w	lr, lr, #4
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc));

	if (dir) {
    6098:	2800      	cmp	r0, #0
    609a:	f000 80aa 	beq.w	61f2 <sw_switch.isra.6+0x1a2>
	}
}

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
    609e:	2a02      	cmp	r2, #2
    60a0:	f000 8087 	beq.w	61b2 <sw_switch.isra.6+0x162>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    60a4:	f649 70c4 	movw	r0, #40900	; 0x9fc4
    60a8:	f24a 593c 	movw	r9, #42300	; 0xa53c
    60ac:	2a04      	cmp	r2, #4
    60ae:	bf18      	it	ne
    60b0:	4681      	movne	r9, r0
	}
}

static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
    60b2:	f1b8 0f02 	cmp.w	r8, #2
    60b6:	d07f      	beq.n	61b8 <sw_switch.isra.6+0x168>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    60b8:	f242 42b8 	movw	r2, #9400	; 0x24b8
    60bc:	f247 30a0 	movw	r0, #29600	; 0x73a0
    60c0:	f1b8 0f04 	cmp.w	r8, #4
    60c4:	bf18      	it	ne
    60c6:	4610      	movne	r0, r2
    60c8:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
}

__STATIC_INLINE void nrf_ppi_task_endpoint_setup(nrf_ppi_channel_t channel,
                                                 uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    60cc:	4a5b      	ldr	r2, [pc, #364]	; (623c <sw_switch.isra.6+0x1ec>)
    60ce:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_SOC_NRF52840)
		if (phy_curr & BIT(2)) {
    60d2:	f018 0f04 	tst.w	r8, #4
		delay = HAL_RADIO_NS2US_ROUND(
    60d6:	4448      	add	r0, r9
    60d8:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    60dc:	fbb0 f0fa 	udiv	r0, r0, sl
		if (phy_curr & BIT(2)) {
    60e0:	d06d      	beq.n	61be <sw_switch.isra.6+0x16e>
    60e2:	f242 44b8 	movw	r4, #9400	; 0x24b8
    60e6:	f644 4190 	movw	r1, #19600	; 0x4c90
    60ea:	f1b8 0f04 	cmp.w	r8, #4
    60ee:	bf18      	it	ne
    60f0:	4621      	movne	r1, r4
    60f2:	009c      	lsls	r4, r3, #2
    60f4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000

			u8_t ppi_en =
			    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI;
			u8_t cc_s2 =
			    SW_SWITCH_TIMER_EVTS_COMP_S2_BASE;
			u8_t ppi_dis =
    60f8:	b2fa      	uxtb	r2, r7
    60fa:	f504 4710 	add.w	r7, r4, #36864	; 0x9000
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
				    sw_tifs_toggle);
			u32_t delay_s2;

			/* Calculate assuming reception on S2 coding scheme. */
			delay_s2 = HAL_RADIO_NS2US_ROUND(
    60fe:	4449      	add	r1, r9
				hal_radio_tx_ready_delay_ns_get(
					phy_next, flags_next) +
				hal_radio_rx_chain_delay_ns_get(phy_curr, 0));

			SW_SWITCH_TIMER->CC[cc_s2] =
				SW_SWITCH_TIMER->CC[cc];
    6100:	f8d7 8540 	ldr.w	r8, [r7, #1344]	; 0x540
			SW_SWITCH_TIMER->CC[cc_s2] =
    6104:	4f4e      	ldr	r7, [pc, #312]	; (6240 <sw_switch.isra.6+0x1f0>)
			delay_s2 = HAL_RADIO_NS2US_ROUND(
    6106:	fbb1 f1fa 	udiv	r1, r1, sl
			SW_SWITCH_TIMER->CC[cc_s2] =
    610a:	f8c7 8548 	str.w	r8, [r7, #1352]	; 0x548

			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
    610e:	f8d7 8548 	ldr.w	r8, [r7, #1352]	; 0x548
    6112:	4541      	cmp	r1, r8
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
    6114:	bf36      	itet	cc
    6116:	f8d7 8548 	ldrcc.w	r8, [r7, #1352]	; 0x548
			} else {
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
    611a:	2101      	movcs	r1, #1
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
    611c:	eba8 0101 	subcc.w	r1, r8, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
    6120:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
			}

			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
    6124:	4f42      	ldr	r7, [pc, #264]	; (6230 <sw_switch.isra.6+0x1e0>)
    6126:	f8df 8124 	ldr.w	r8, [pc, #292]	; 624c <sw_switch.isra.6+0x1fc>
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
    612a:	4944      	ldr	r1, [pc, #272]	; (623c <sw_switch.isra.6+0x1ec>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
    612c:	f8c7 8590 	str.w	r8, [r7, #1424]	; 0x590
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
    6130:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
    6134:	f504 31f8 	add.w	r1, r4, #126976	; 0x1f000
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;

			/* Include PPI for S2 timing in the active group */
			NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(
				sw_tifs_toggle)] |=
    6138:	f8d1 4800 	ldr.w	r4, [r1, #2048]	; 0x800
    613c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
    6140:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
    6144:	00d1      	lsls	r1, r2, #3
    6146:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    614a:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis)	=
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_s2);

			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
			    ppi_dis) =
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
    614e:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
    6152:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis)	=
    6156:	f8c1 8510 	str.w	r8, [r1, #1296]	; 0x510
			    ppi_dis) =
    615a:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
			    sw_tifs_toggle);

			/* Capture CC to cancel the timer that has assumed
			 * S8 reception, if packet will be received in S2.
			 */
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
    615e:	4a39      	ldr	r2, [pc, #228]	; (6244 <sw_switch.isra.6+0x1f4>)
    6160:	f8c7 2598 	str.w	r2, [r7, #1432]	; 0x598
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_EVT;
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
    6164:	f502 42fd 	add.w	r2, r2, #32384	; 0x7e80
    6168:	3270      	adds	r2, #112	; 0x70
    616a:	4462      	add	r2, ip
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
    616c:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
    NRF_PPI->CHENSET = mask;
    6170:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6174:	f8c7 2504 	str.w	r2, [r7, #1284]	; 0x504
    6178:	009b      	lsls	r3, r3, #2
    617a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    617e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    6182:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    6186:	4282      	cmp	r2, r0
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
    6188:	bf8b      	itete	hi
    618a:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
    618e:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
    6190:	1a10      	subhi	r0, r2, r0
    6192:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
    6196:	bf88      	it	hi
    6198:	f8c3 0540 	strhi.w	r0, [r3, #1344]	; 0x540
    619c:	4b24      	ldr	r3, [pc, #144]	; (6230 <sw_switch.isra.6+0x1e0>)
    619e:	f44f 6290 	mov.w	r2, #1152	; 0x480
    61a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    61a6:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1;
    61a8:	f003 0301 	and.w	r3, r3, #1
    61ac:	702b      	strb	r3, [r5, #0]
    61ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
    61b2:	f649 4940 	movw	r9, #40000	; 0x9c40
    61b6:	e77c      	b.n	60b2 <sw_switch.isra.6+0x62>
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
    61b8:	f241 3088 	movw	r0, #5000	; 0x1388
    61bc:	e784      	b.n	60c8 <sw_switch.isra.6+0x78>
    61be:	009a      	lsls	r2, r3, #2
    61c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    61c4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
    61c8:	f8d2 4800 	ldr.w	r4, [r2, #2048]	; 0x800
    61cc:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    61d0:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
    61d4:	b2fa      	uxtb	r2, r7
    61d6:	00d2      	lsls	r2, r2, #3
    61d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    61dc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis) =
    61e0:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
    61e4:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
    61e8:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis) =
    61ec:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    61f0:	e7c2      	b.n	6178 <sw_switch.isra.6+0x128>
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    61f2:	4a15      	ldr	r2, [pc, #84]	; (6248 <sw_switch.isra.6+0x1f8>)
    61f4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    61f8:	b2fa      	uxtb	r2, r7
    61fa:	00d2      	lsls	r2, r2, #3
    61fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6200:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		delay = HAL_RADIO_NS2US_CEIL(
    6204:	202c      	movs	r0, #44	; 0x2c
				ppi_dis) =
    6206:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
    620a:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
    620e:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
				ppi_dis) =
    6212:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    6216:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
    621a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
    621e:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
    6222:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    6226:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
    622a:	e7a5      	b.n	6178 <sw_switch.isra.6+0x128>
    622c:	20000c9c 	.word	0x20000c9c
    6230:	4001f000 	.word	0x4001f000
    6234:	4000110c 	.word	0x4000110c
    6238:	40009140 	.word	0x40009140
    623c:	40001000 	.word	0x40001000
    6240:	40009000 	.word	0x40009000
    6244:	40001150 	.word	0x40001150
    6248:	40001004 	.word	0x40001004
    624c:	40009148 	.word	0x40009148

00006250 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
    6250:	4b04      	ldr	r3, [pc, #16]	; (6264 <isr_radio+0x14>)
    6252:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
    6256:	b123      	cbz	r3, 6262 <isr_radio+0x12>
		isr_cb(isr_cb_param);
    6258:	4b03      	ldr	r3, [pc, #12]	; (6268 <isr_radio+0x18>)
    625a:	4a04      	ldr	r2, [pc, #16]	; (626c <isr_radio+0x1c>)
    625c:	681b      	ldr	r3, [r3, #0]
    625e:	6810      	ldr	r0, [r2, #0]
    6260:	4718      	bx	r3
    6262:	4770      	bx	lr
    6264:	40001000 	.word	0x40001000
    6268:	20000c94 	.word	0x20000c94
    626c:	20000c98 	.word	0x20000c98

00006270 <radio_isr_set>:
{
    6270:	b538      	push	{r3, r4, r5, lr}
    6272:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
    6274:	2001      	movs	r0, #1
{
    6276:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
    6278:	f7fb fb1e 	bl	18b8 <_arch_irq_disable>
	isr_cb_param = param;
    627c:	4b08      	ldr	r3, [pc, #32]	; (62a0 <radio_isr_set+0x30>)
    627e:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
    6280:	4b08      	ldr	r3, [pc, #32]	; (62a4 <radio_isr_set+0x34>)
    6282:	601c      	str	r4, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t radio_int_mask)
{
    NRF_RADIO->INTENSET = radio_int_mask;
    6284:	4b08      	ldr	r3, [pc, #32]	; (62a8 <radio_isr_set+0x38>)
    6286:	2210      	movs	r2, #16
    6288:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    628c:	4b07      	ldr	r3, [pc, #28]	; (62ac <radio_isr_set+0x3c>)
    628e:	2202      	movs	r2, #2
    6290:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    6294:	2001      	movs	r0, #1
}
    6296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
    629a:	f7fb bafd 	b.w	1898 <_arch_irq_enable>
    629e:	bf00      	nop
    62a0:	20000c98 	.word	0x20000c98
    62a4:	20000c94 	.word	0x20000c94
    62a8:	40001000 	.word	0x40001000
    62ac:	e000e100 	.word	0xe000e100

000062b0 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    62b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    62b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    62b8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    62ba:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    62be:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    62c2:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    62c6:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    62ca:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    62ce:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    62d2:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    62d6:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    62da:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    62de:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    62e2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    62e6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    62ea:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    62ee:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    62f2:	4770      	bx	lr

000062f4 <radio_reset>:
{
    62f4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    62f6:	2001      	movs	r0, #1
    62f8:	f7fb fade 	bl	18b8 <_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
    62fc:	4b08      	ldr	r3, [pc, #32]	; (6320 <radio_reset+0x2c>)
    62fe:	2200      	movs	r2, #0
    6300:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    6304:	2201      	movs	r2, #1
    6306:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    630a:	4a06      	ldr	r2, [pc, #24]	; (6324 <radio_reset+0x30>)
    630c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    630e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    6312:	f023 0301 	bic.w	r3, r3, #1
    6316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    631a:	6013      	str	r3, [r2, #0]
    631c:	bd08      	pop	{r3, pc}
    631e:	bf00      	nop
    6320:	40001000 	.word	0x40001000
    6324:	40001774 	.word	0x40001774

00006328 <radio_phy_set>:
	switch (phy) {
    6328:	2802      	cmp	r0, #2
    632a:	4b14      	ldr	r3, [pc, #80]	; (637c <radio_phy_set+0x54>)
    632c:	d010      	beq.n	6350 <radio_phy_set+0x28>
    632e:	2804      	cmp	r0, #4
    6330:	d014      	beq.n	635c <radio_phy_set+0x34>
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
    6332:	681a      	ldr	r2, [r3, #0]
    6334:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    6338:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    633a:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    633c:	4b10      	ldr	r3, [pc, #64]	; (6380 <radio_phy_set+0x58>)
    633e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    6342:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    6346:	f042 0201 	orr.w	r2, r2, #1
    634a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    634e:	4770      	bx	lr
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
    6350:	681a      	ldr	r2, [r3, #0]
    6352:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    6356:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    6358:	2104      	movs	r1, #4
    635a:	e7ef      	b.n	633c <radio_phy_set+0x14>
		*(volatile u32_t *)0x4000173c |= 0x80000000;
    635c:	681a      	ldr	r2, [r3, #0]
    635e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    6362:	601a      	str	r2, [r3, #0]
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
    6364:	681a      	ldr	r2, [r3, #0]
    6366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
		if (flags & 0x01) {
    636a:	f011 0f01 	tst.w	r1, #1
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
    636e:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
			mode = RADIO_MODE_MODE_Ble_LR500Kbit;
    6372:	bf14      	ite	ne
    6374:	2105      	movne	r1, #5
    6376:	2106      	moveq	r1, #6
		*(volatile u32_t *)0x4000173c =
    6378:	601a      	str	r2, [r3, #0]
    637a:	e7df      	b.n	633c <radio_phy_set+0x14>
    637c:	4000173c 	.word	0x4000173c
    6380:	40001000 	.word	0x40001000

00006384 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    6384:	4b01      	ldr	r3, [pc, #4]	; (638c <radio_tx_power_set+0x8>)
    6386:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    638a:	4770      	bx	lr
    638c:	40001000 	.word	0x40001000

00006390 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    6390:	4b01      	ldr	r3, [pc, #4]	; (6398 <radio_freq_chan_set+0x8>)
    6392:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    6396:	4770      	bx	lr
    6398:	40001000 	.word	0x40001000

0000639c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    639c:	4b07      	ldr	r3, [pc, #28]	; (63bc <radio_whiten_iv_set+0x20>)
    639e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    63a2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    63a6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    63aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    63ae:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    63b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    63b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    63ba:	4770      	bx	lr
    63bc:	40001000 	.word	0x40001000

000063c0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    63c0:	4a0a      	ldr	r2, [pc, #40]	; (63ec <radio_aa_set+0x2c>)
    63c2:	2300      	movs	r3, #0
    63c4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    63c8:	2301      	movs	r3, #1
    63ca:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    63ce:	78c3      	ldrb	r3, [r0, #3]
    63d0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    63d4:	7843      	ldrb	r3, [r0, #1]
    63d6:	7881      	ldrb	r1, [r0, #2]
    63d8:	041b      	lsls	r3, r3, #16
    63da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    63de:	7801      	ldrb	r1, [r0, #0]
    63e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    63e4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    63e8:	4770      	bx	lr
    63ea:	bf00      	nop
    63ec:	40001000 	.word	0x40001000

000063f0 <radio_pkt_configure>:
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    63f0:	f002 0301 	and.w	r3, r2, #1
	switch (phy) {
    63f4:	f3c2 0242 	ubfx	r2, r2, #1, #3
    63f8:	2a02      	cmp	r2, #2
    63fa:	d023      	beq.n	6444 <radio_pkt_configure+0x54>
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    63fc:	2a04      	cmp	r2, #4
    63fe:	bf0c      	ite	eq
    6400:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    6404:	2200      	movne	r2, #0
	if (dc) {
    6406:	b10b      	cbz	r3, 640c <radio_pkt_configure+0x1c>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    6408:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    640c:	f1c0 0308 	rsb	r3, r0, #8
    6410:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    6412:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    6416:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    641a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
			    RADIO_PCNF0_S1LEN_Msk) |
    641e:	4303      	orrs	r3, r0
    6420:	4313      	orrs	r3, r2
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    6422:	4a0a      	ldr	r2, [pc, #40]	; (644c <radio_pkt_configure+0x5c>)
    6424:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    6428:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    642c:	4b08      	ldr	r3, [pc, #32]	; (6450 <radio_pkt_configure+0x60>)
    642e:	4003      	ands	r3, r0
    6430:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    6434:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    6438:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    643c:	4319      	orrs	r1, r3
    643e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    6442:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    6444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6448:	e7dd      	b.n	6406 <radio_pkt_configure+0x16>
    644a:	bf00      	nop
    644c:	40001000 	.word	0x40001000
    6450:	fef80000 	.word	0xfef80000

00006454 <radio_pkt_rx_set>:
    6454:	4b01      	ldr	r3, [pc, #4]	; (645c <radio_pkt_rx_set+0x8>)
    6456:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    645a:	4770      	bx	lr
    645c:	40001000 	.word	0x40001000

00006460 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    6460:	4b01      	ldr	r3, [pc, #4]	; (6468 <radio_pkt_tx_set+0x8>)
    6462:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    6466:	4770      	bx	lr
    6468:	40001000 	.word	0x40001000

0000646c <radio_tx_chain_delay_get>:
}
    646c:	2001      	movs	r0, #1
    646e:	4770      	bx	lr

00006470 <radio_rx_chain_delay_get>:
	switch (phy) {
    6470:	2802      	cmp	r0, #2
    6472:	d003      	beq.n	647c <radio_rx_chain_delay_get+0xc>
    6474:	2804      	cmp	r0, #4
    6476:	d003      	beq.n	6480 <radio_rx_chain_delay_get+0x10>
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
    6478:	200a      	movs	r0, #10
}
    647a:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
    647c:	2005      	movs	r0, #5
    647e:	4770      	bx	lr
		if (flags & 0x01) {
    6480:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
    6484:	bf14      	ite	ne
    6486:	201e      	movne	r0, #30
    6488:	2014      	moveq	r0, #20
    648a:	4770      	bx	lr

0000648c <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + radio_task)) = 0x1UL;
    648c:	4b01      	ldr	r3, [pc, #4]	; (6494 <radio_rx_enable+0x8>)
    648e:	2201      	movs	r2, #1
    6490:	601a      	str	r2, [r3, #0]
    6492:	4770      	bx	lr
    6494:	40001004 	.word	0x40001004

00006498 <radio_tx_enable>:
    6498:	4b01      	ldr	r3, [pc, #4]	; (64a0 <radio_tx_enable+0x8>)
    649a:	2201      	movs	r2, #1
    649c:	601a      	str	r2, [r3, #0]
    649e:	4770      	bx	lr
    64a0:	40001000 	.word	0x40001000

000064a4 <radio_disable>:
    NRF_PPI->CHENCLR = mask;
    64a4:	4a07      	ldr	r2, [pc, #28]	; (64c4 <radio_disable+0x20>)
    64a6:	f44f 6390 	mov.w	r3, #1152	; 0x480
    64aa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = NRF_PPI_TASK_SET;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = NRF_PPI_TASK_SET;
    64ae:	2301      	movs	r3, #1
    64b0:	6053      	str	r3, [r2, #4]
    64b2:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    64b4:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    64b8:	2100      	movs	r1, #0
    64ba:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    64be:	6113      	str	r3, [r2, #16]
    64c0:	4770      	bx	lr
    64c2:	bf00      	nop
    64c4:	4001f000 	.word	0x4001f000

000064c8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    64c8:	4b04      	ldr	r3, [pc, #16]	; (64dc <radio_status_reset+0x14>)
    64ca:	2200      	movs	r2, #0
    64cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    64d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    64d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    64d8:	4770      	bx	lr
    64da:	bf00      	nop
    64dc:	40001000 	.word	0x40001000

000064e0 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    64e0:	4b03      	ldr	r3, [pc, #12]	; (64f0 <radio_is_ready+0x10>)
    64e2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    64e6:	3000      	adds	r0, #0
    64e8:	bf18      	it	ne
    64ea:	2001      	movne	r0, #1
    64ec:	4770      	bx	lr
    64ee:	bf00      	nop
    64f0:	40001000 	.word	0x40001000

000064f4 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    64f4:	4b03      	ldr	r3, [pc, #12]	; (6504 <radio_is_done+0x10>)
    64f6:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    64fa:	3000      	adds	r0, #0
    64fc:	bf18      	it	ne
    64fe:	2001      	movne	r0, #1
    6500:	4770      	bx	lr
    6502:	bf00      	nop
    6504:	40001000 	.word	0x40001000

00006508 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    6508:	4b03      	ldr	r3, [pc, #12]	; (6518 <radio_is_idle+0x10>)
    650a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    650e:	fab0 f080 	clz	r0, r0
    6512:	0940      	lsrs	r0, r0, #5
    6514:	4770      	bx	lr
    6516:	bf00      	nop
    6518:	40001000 	.word	0x40001000

0000651c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    651c:	4b04      	ldr	r3, [pc, #16]	; (6530 <radio_crc_configure+0x14>)
    651e:	f240 1203 	movw	r2, #259	; 0x103
    6522:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    6526:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    652a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    652e:	4770      	bx	lr
    6530:	40001000 	.word	0x40001000

00006534 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    6534:	4b03      	ldr	r3, [pc, #12]	; (6544 <radio_crc_is_valid+0x10>)
    6536:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    653a:	3000      	adds	r0, #0
    653c:	bf18      	it	ne
    653e:	2001      	movne	r0, #1
    6540:	4770      	bx	lr
    6542:	bf00      	nop
    6544:	40001000 	.word	0x40001000

00006548 <radio_pkt_scratch_get>:
}
    6548:	4800      	ldr	r0, [pc, #0]	; (654c <radio_pkt_scratch_get+0x4>)
    654a:	4770      	bx	lr
    654c:	20000b90 	.word	0x20000b90

00006550 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    6550:	4b04      	ldr	r3, [pc, #16]	; (6564 <radio_switch_complete_and_rx+0x14>)
    6552:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    6554:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    6556:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    655a:	4602      	mov	r2, r0
    655c:	4608      	mov	r0, r1
    655e:	f7ff bd77 	b.w	6050 <sw_switch.isra.6>
    6562:	bf00      	nop
    6564:	40001000 	.word	0x40001000

00006568 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    6568:	4b03      	ldr	r3, [pc, #12]	; (6578 <radio_switch_complete_and_tx+0x10>)
    656a:	2103      	movs	r1, #3
    656c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    6570:	4601      	mov	r1, r0
    6572:	2001      	movs	r0, #1
    6574:	f7ff bd6c 	b.w	6050 <sw_switch.isra.6>
    6578:	40001000 	.word	0x40001000

0000657c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    657c:	4b05      	ldr	r3, [pc, #20]	; (6594 <radio_switch_complete_and_disable+0x18>)
    657e:	2203      	movs	r2, #3
    6580:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
    6584:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    6588:	f44f 6290 	mov.w	r2, #1152	; 0x480
    658c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    6590:	4770      	bx	lr
    6592:	bf00      	nop
    6594:	40001000 	.word	0x40001000

00006598 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    6598:	4a03      	ldr	r2, [pc, #12]	; (65a8 <radio_rssi_measure+0x10>)
    659a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    659e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    65a2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    65a6:	4770      	bx	lr
    65a8:	40001000 	.word	0x40001000

000065ac <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    65ac:	4b01      	ldr	r3, [pc, #4]	; (65b4 <radio_rssi_get+0x8>)
    65ae:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    65b2:	4770      	bx	lr
    65b4:	40001000 	.word	0x40001000

000065b8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    65b8:	4b02      	ldr	r3, [pc, #8]	; (65c4 <radio_rssi_status_reset+0xc>)
    65ba:	2200      	movs	r2, #0
    65bc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    65c0:	4770      	bx	lr
    65c2:	bf00      	nop
    65c4:	40001000 	.word	0x40001000

000065c8 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    65c8:	4b03      	ldr	r3, [pc, #12]	; (65d8 <radio_rssi_is_ready+0x10>)
    65ca:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    65ce:	3000      	adds	r0, #0
    65d0:	bf18      	it	ne
    65d2:	2001      	movne	r0, #1
    65d4:	4770      	bx	lr
    65d6:	bf00      	nop
    65d8:	40001000 	.word	0x40001000

000065dc <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    65dc:	b530      	push	{r4, r5, lr}
    65de:	2400      	movs	r4, #0
    65e0:	00a3      	lsls	r3, r4, #2
    65e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    65e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    65ea:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    65ec:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    65f0:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    65f2:	8895      	ldrh	r5, [r2, #4]
    65f4:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
    65f8:	2c08      	cmp	r4, #8
		bdaddr += 6;
    65fa:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
    65fe:	d1ef      	bne.n	65e0 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    6600:	4b02      	ldr	r3, [pc, #8]	; (660c <radio_filter_configure+0x30>)
    6602:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    6606:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    660a:	bd30      	pop	{r4, r5, pc}
    660c:	40001000 	.word	0x40001000

00006610 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    6610:	4a03      	ldr	r2, [pc, #12]	; (6620 <radio_filter_disable+0x10>)
    6612:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    6616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    661a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    661e:	4770      	bx	lr
    6620:	40001000 	.word	0x40001000

00006624 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    6624:	4b02      	ldr	r3, [pc, #8]	; (6630 <radio_filter_status_reset+0xc>)
    6626:	2200      	movs	r2, #0
    6628:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    662c:	4770      	bx	lr
    662e:	bf00      	nop
    6630:	40001000 	.word	0x40001000

00006634 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    6634:	4b03      	ldr	r3, [pc, #12]	; (6644 <radio_filter_has_match+0x10>)
    6636:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    663a:	3000      	adds	r0, #0
    663c:	bf18      	it	ne
    663e:	2001      	movne	r0, #1
    6640:	4770      	bx	lr
    6642:	bf00      	nop
    6644:	40001000 	.word	0x40001000

00006648 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    6648:	4b01      	ldr	r3, [pc, #4]	; (6650 <radio_filter_match_get+0x8>)
    664a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    664e:	4770      	bx	lr
    6650:	40001000 	.word	0x40001000

00006654 <radio_tmr_status_reset>:
{
    p_reg->EVTENSET = mask;
}
__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6654:	4b05      	ldr	r3, [pc, #20]	; (666c <radio_tmr_status_reset+0x18>)
    6656:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    665a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    665e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    6662:	4a03      	ldr	r2, [pc, #12]	; (6670 <radio_tmr_status_reset+0x1c>)
    6664:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    6668:	4770      	bx	lr
    666a:	bf00      	nop
    666c:	4000b000 	.word	0x4000b000
    6670:	0e722060 	.word	0x0e722060

00006674 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
    6674:	4b03      	ldr	r3, [pc, #12]	; (6684 <radio_tmr_tifs_set+0x10>)
    6676:	4a04      	ldr	r2, [pc, #16]	; (6688 <radio_tmr_tifs_set+0x14>)
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    667e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6682:	4770      	bx	lr
    6684:	20000c9c 	.word	0x20000c9c
    6688:	40009000 	.word	0x40009000

0000668c <radio_tmr_start>:
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    668e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    6692:	4c29      	ldr	r4, [pc, #164]	; (6738 <radio_tmr_start+0xac>)
    6694:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    6698:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
    669a:	bf88      	it	hi
    669c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66a0:	4b26      	ldr	r3, [pc, #152]	; (673c <radio_tmr_start+0xb0>)
	}
	remainder /= 1000000UL;
    66a2:	4c27      	ldr	r4, [pc, #156]	; (6740 <radio_tmr_start+0xb4>)
		remainder += 30517578UL;
    66a4:	bf84      	itt	hi
    66a6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
    66aa:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
    66ae:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
    66b2:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
    66b6:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
    66ba:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    66be:	f04f 0202 	mov.w	r2, #2
    66c2:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
    66c4:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
    66c8:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    66cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
    66d0:	4a1c      	ldr	r2, [pc, #112]	; (6744 <radio_tmr_start+0xb8>)
    p_reg->CC[cc_channel] = cc_value;
    66d2:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
    66d6:	bf88      	it	hi
    66d8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
    66dc:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
    66e0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    66e4:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    66e8:	4917      	ldr	r1, [pc, #92]	; (6748 <radio_tmr_start+0xbc>)
    66ea:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
    66ee:	3b0c      	subs	r3, #12
    66f0:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    66f4:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
    66f8:	2320      	movs	r3, #32
    66fa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    66fe:	f7ff fc93 	bl	6028 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
    6702:	4b12      	ldr	r3, [pc, #72]	; (674c <radio_tmr_start+0xc0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6704:	4a12      	ldr	r2, [pc, #72]	; (6750 <radio_tmr_start+0xc4>)
    6706:	6015      	str	r5, [r2, #0]
    6708:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    670c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    6710:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    6714:	601d      	str	r5, [r3, #0]
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    6716:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    671a:	3b74      	subs	r3, #116	; 0x74
    671c:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
			SW_SWITCH_TIMER_EVTS_COMP(1)),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1));

#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    6720:	f44f 6310 	mov.w	r3, #2304	; 0x900
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    6724:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    6728:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    672c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    6730:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    6734:	4620      	mov	r0, r4
    6736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6738:	7ff0bdbf 	.word	0x7ff0bdbf
    673c:	4000800c 	.word	0x4000800c
    6740:	000f4240 	.word	0x000f4240
    6744:	4000b000 	.word	0x4000b000
    6748:	4001f000 	.word	0x4001f000
    674c:	40009000 	.word	0x40009000
    6750:	4000900c 	.word	0x4000900c

00006754 <radio_tmr_stop>:
    6754:	4a04      	ldr	r2, [pc, #16]	; (6768 <radio_tmr_stop+0x14>)
    6756:	2301      	movs	r3, #1
    6758:	6013      	str	r3, [r2, #0]
    675a:	60d3      	str	r3, [r2, #12]
    675c:	320c      	adds	r2, #12
    675e:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
    6762:	6013      	str	r3, [r2, #0]
    6764:	60d3      	str	r3, [r2, #12]
    6766:	4770      	bx	lr
    6768:	40008004 	.word	0x40008004

0000676c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
    676c:	4b04      	ldr	r3, [pc, #16]	; (6780 <radio_tmr_hcto_configure+0x14>)
    676e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
    6772:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    6776:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
    677a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    677e:	4770      	bx	lr
    6780:	40008000 	.word	0x40008000

00006784 <radio_tmr_end_capture>:
    6784:	4b02      	ldr	r3, [pc, #8]	; (6790 <radio_tmr_end_capture+0xc>)
    6786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    678a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    678e:	4770      	bx	lr
    6790:	4001f000 	.word	0x4001f000

00006794 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    6794:	4b01      	ldr	r3, [pc, #4]	; (679c <radio_tmr_tifs_base_get+0x8>)
    6796:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    679a:	4770      	bx	lr
    679c:	40008000 	.word	0x40008000

000067a0 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    67a0:	4b1e      	ldr	r3, [pc, #120]	; (681c <radio_ccm_rx_pkt_set+0x7c>)
{
    67a2:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    67a4:	2400      	movs	r4, #0
    67a6:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    67aa:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    67ac:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    67ae:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
    67b2:	d003      	beq.n	67bc <radio_ccm_rx_pkt_set+0x1c>
    67b4:	2904      	cmp	r1, #4
    67b6:	d01e      	beq.n	67f6 <radio_ccm_rx_pkt_set+0x56>
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    67b8:	4919      	ldr	r1, [pc, #100]	; (6820 <radio_ccm_rx_pkt_set+0x80>)
    67ba:	e000      	b.n	67be <radio_ccm_rx_pkt_set+0x1e>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    67bc:	4919      	ldr	r1, [pc, #100]	; (6824 <radio_ccm_rx_pkt_set+0x84>)
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    67be:	4b17      	ldr	r3, [pc, #92]	; (681c <radio_ccm_rx_pkt_set+0x7c>)
    67c0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    67c4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    67c8:	4817      	ldr	r0, [pc, #92]	; (6828 <radio_ccm_rx_pkt_set+0x88>)
    67ca:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    67ce:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    67d2:	4a16      	ldr	r2, [pc, #88]	; (682c <radio_ccm_rx_pkt_set+0x8c>)
    67d4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    67d8:	2200      	movs	r2, #0
    67da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    67de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    67e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    67e6:	4a12      	ldr	r2, [pc, #72]	; (6830 <radio_ccm_rx_pkt_set+0x90>)
    67e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    67ec:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67f0:	2201      	movs	r2, #1
    67f2:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
    67f4:	bd10      	pop	{r4, pc}
		NRF_CCM->RATEOVERRIDE =
    67f6:	2103      	movs	r1, #3
    67f8:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    67fc:	4b0c      	ldr	r3, [pc, #48]	; (6830 <radio_ccm_rx_pkt_set+0x90>)
    67fe:	490d      	ldr	r1, [pc, #52]	; (6834 <radio_ccm_rx_pkt_set+0x94>)
    6800:	f8c3 1578 	str.w	r1, [r3, #1400]	; 0x578
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    6804:	f501 415e 	add.w	r1, r1, #56832	; 0xde00
    6808:	31bc      	adds	r1, #188	; 0xbc
    680a:	f8c3 157c 	str.w	r1, [r3, #1404]	; 0x57c
    NRF_PPI->CHENSET = mask;
    680e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    6812:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		mode |= (CCM_MODE_DATARATE_125Kbps <<
    6816:	4908      	ldr	r1, [pc, #32]	; (6838 <radio_ccm_rx_pkt_set+0x98>)
    6818:	e7d1      	b.n	67be <radio_ccm_rx_pkt_set+0x1e>
    681a:	bf00      	nop
    681c:	4000f000 	.word	0x4000f000
    6820:	01000001 	.word	0x01000001
    6824:	01010001 	.word	0x01010001
    6828:	20000b90 	.word	0x20000b90
    682c:	20000a84 	.word	0x20000a84
    6830:	4001f000 	.word	0x4001f000
    6834:	40001150 	.word	0x40001150
    6838:	01020001 	.word	0x01020001

0000683c <radio_ar_match_get>:
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    683c:	4b01      	ldr	r3, [pc, #4]	; (6844 <radio_ar_match_get+0x8>)
    683e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    6842:	4770      	bx	lr
    6844:	4000f000 	.word	0x4000f000

00006848 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    6848:	4a04      	ldr	r2, [pc, #16]	; (685c <radio_ar_status_reset+0x14>)
    684a:	2300      	movs	r3, #0
    684c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    6850:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    6854:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6858:	4770      	bx	lr
    685a:	bf00      	nop
    685c:	40001000 	.word	0x40001000

00006860 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    6860:	4b08      	ldr	r3, [pc, #32]	; (6884 <radio_ar_has_match+0x24>)
    6862:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    6866:	b160      	cbz	r0, 6882 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    6868:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    686c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    6870:	b138      	cbz	r0, 6882 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    6872:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    6876:	b120      	cbz	r0, 6882 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    6878:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    687c:	fab0 f080 	clz	r0, r0
    6880:	0940      	lsrs	r0, r0, #5
}
    6882:	4770      	bx	lr
    6884:	40001000 	.word	0x40001000

00006888 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    6888:	2901      	cmp	r1, #1
    688a:	d005      	beq.n	6898 <mayfly_enable_cb+0x10>
    688c:	4040      	eors	r0, r0
    688e:	f380 8811 	msr	BASEPRI, r0
    6892:	f04f 0004 	mov.w	r0, #4
    6896:	df02      	svc	2

	if (enable) {
		irq_enable(SWI5_IRQn);
    6898:	2019      	movs	r0, #25
	if (enable) {
    689a:	b10a      	cbz	r2, 68a0 <mayfly_enable_cb+0x18>
		irq_enable(SWI5_IRQn);
    689c:	f7fa bffc 	b.w	1898 <_arch_irq_enable>
	} else {
		irq_disable(SWI5_IRQn);
    68a0:	f7fb b80a 	b.w	18b8 <_arch_irq_disable>

000068a4 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    68a4:	b139      	cbz	r1, 68b6 <mayfly_is_enabled+0x12>
    68a6:	2901      	cmp	r1, #1
    68a8:	d008      	beq.n	68bc <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI5_IRQn);

	default:
		LL_ASSERT(0);
    68aa:	4040      	eors	r0, r0
    68ac:	f380 8811 	msr	BASEPRI, r0
    68b0:	f04f 0004 	mov.w	r0, #4
    68b4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    68b6:	200b      	movs	r0, #11
		return irq_is_enabled(SWI5_IRQn);
    68b8:	f7fb b812 	b.w	18e0 <_arch_irq_is_enabled>
    68bc:	2019      	movs	r0, #25
    68be:	e7fb      	b.n	68b8 <mayfly_is_enabled+0x14>

000068c0 <mayfly_prio_is_equal>:
#if defined(CONFIG_BT_LL_SW)
#if (CONFIG_BT_CTLR_WORKER_PRIO == CONFIG_BT_CTLR_JOB_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
    68c0:	4288      	cmp	r0, r1
    68c2:	d00a      	beq.n	68da <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    68c4:	b918      	cbnz	r0, 68ce <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    68c6:	1e4b      	subs	r3, r1, #1
    68c8:	4258      	negs	r0, r3
    68ca:	4158      	adcs	r0, r3
    68cc:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
    68ce:	2801      	cmp	r0, #1
    68d0:	d105      	bne.n	68de <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    68d2:	fab1 f081 	clz	r0, r1
    68d6:	0940      	lsrs	r0, r0, #5
    68d8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
    68da:	2001      	movs	r0, #1
    68dc:	4770      	bx	lr
    68de:	2000      	movs	r0, #0
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
#endif
#endif
	       0;
}
    68e0:	4770      	bx	lr
	...

000068e4 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    68e4:	4b08      	ldr	r3, [pc, #32]	; (6908 <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
    68e6:	b139      	cbz	r1, 68f8 <mayfly_pend+0x14>
    68e8:	2901      	cmp	r1, #1
    68ea:	d00a      	beq.n	6902 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI5_IRQn);
		break;

	default:
		LL_ASSERT(0);
    68ec:	4040      	eors	r0, r0
    68ee:	f380 8811 	msr	BASEPRI, r0
    68f2:	f04f 0004 	mov.w	r0, #4
    68f6:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    68fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6900:	4770      	bx	lr
    6902:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    6906:	e7f9      	b.n	68fc <mayfly_pend+0x18>
    6908:	e000e100 	.word	0xe000e100

0000690c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    690c:	2803      	cmp	r0, #3
    690e:	d905      	bls.n	691c <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    6910:	4040      	eors	r0, r0
    6912:	f380 8811 	msr	BASEPRI, r0
    6916:	f04f 0004 	mov.w	r0, #4
    691a:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    691c:	4b02      	ldr	r3, [pc, #8]	; (6928 <hal_ticker_instance0_caller_id_get+0x1c>)
    691e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    6920:	2800      	cmp	r0, #0
    6922:	d0f5      	beq.n	6910 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    6924:	4770      	bx	lr
    6926:	bf00      	nop
    6928:	00008a62 	.word	0x00008a62

0000692c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    692c:	3802      	subs	r0, #2
{
    692e:	b410      	push	{r4}
    6930:	461c      	mov	r4, r3
	switch (caller_id) {
    6932:	2803      	cmp	r0, #3
    6934:	d816      	bhi.n	6964 <hal_ticker_instance0_sched+0x38>
    6936:	e8df f000 	tbb	[pc, r0]
    693a:	0b02      	.short	0x0b02
    693c:	2411      	.short	0x2411
		}
		break;
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    693e:	2903      	cmp	r1, #3
    6940:	d110      	bne.n	6964 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    6942:	4b13      	ldr	r3, [pc, #76]	; (6990 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    6944:	2100      	movs	r1, #0
			m.param = instance;
    6946:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    6948:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    694a:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    694c:	f7fb bf02 	b.w	2754 <mayfly_enqueue>
		switch (callee_id) {
    6950:	2904      	cmp	r1, #4
    6952:	d107      	bne.n	6964 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    6954:	4b0f      	ldr	r3, [pc, #60]	; (6994 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    6956:	2101      	movs	r1, #1
			m.param = instance;
    6958:	609c      	str	r4, [r3, #8]
    695a:	e7f5      	b.n	6948 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    695c:	2903      	cmp	r1, #3
    695e:	d007      	beq.n	6970 <hal_ticker_instance0_sched+0x44>
    6960:	2904      	cmp	r1, #4
    6962:	d00a      	beq.n	697a <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
    6964:	4040      	eors	r0, r0
    6966:	f380 8811 	msr	BASEPRI, r0
    696a:	f04f 0004 	mov.w	r0, #4
    696e:	df02      	svc	2
			m.param = instance;
    6970:	4b09      	ldr	r3, [pc, #36]	; (6998 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6972:	2100      	movs	r1, #0
			m.param = instance;
    6974:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6976:	2001      	movs	r0, #1
    6978:	e7e7      	b.n	694a <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    697a:	4b08      	ldr	r3, [pc, #32]	; (699c <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    697c:	2101      	movs	r1, #1
			m.param = instance;
    697e:	609c      	str	r4, [r3, #8]
    6980:	e7f9      	b.n	6976 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
    6982:	2904      	cmp	r1, #4
    6984:	d1ee      	bne.n	6964 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    6986:	4b06      	ldr	r3, [pc, #24]	; (69a0 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    6988:	2101      	movs	r1, #1
			m.param = instance;
    698a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    698c:	2003      	movs	r0, #3
    698e:	e7dc      	b.n	694a <hal_ticker_instance0_sched+0x1e>
    6990:	20002928 	.word	0x20002928
    6994:	20002938 	.word	0x20002938
    6998:	20002948 	.word	0x20002948
    699c:	20002958 	.word	0x20002958
    69a0:	20002968 	.word	0x20002968

000069a4 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    69a4:	4601      	mov	r1, r0
    69a6:	2000      	movs	r0, #0
    69a8:	f7ff baea 	b.w	5f80 <cntr_cmp_set>

000069ac <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    69ac:	4770      	bx	lr
	...

000069b0 <net_buf_pool_get>:
}
    69b0:	4b01      	ldr	r3, [pc, #4]	; (69b8 <net_buf_pool_get+0x8>)
    69b2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    69b6:	4770      	bx	lr
    69b8:	20002a48 	.word	0x20002a48

000069bc <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    69bc:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    69be:	4b04      	ldr	r3, [pc, #16]	; (69d0 <net_buf_id+0x14>)
    69c0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    69c4:	69db      	ldr	r3, [r3, #28]
    69c6:	1ac0      	subs	r0, r0, r3
}
    69c8:	4b02      	ldr	r3, [pc, #8]	; (69d4 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    69ca:	10c0      	asrs	r0, r0, #3
}
    69cc:	4358      	muls	r0, r3
    69ce:	4770      	bx	lr
    69d0:	20002a48 	.word	0x20002a48
    69d4:	aaaaaaab 	.word	0xaaaaaaab

000069d8 <fixed_data_alloc>:
{
    69d8:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    69da:	4b09      	ldr	r3, [pc, #36]	; (6a00 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    69dc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    69de:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    69e2:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    69e4:	699b      	ldr	r3, [r3, #24]
    69e6:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    69e8:	6823      	ldr	r3, [r4, #0]
    69ea:	429a      	cmp	r2, r3
    69ec:	bf94      	ite	ls
    69ee:	600a      	strls	r2, [r1, #0]
    69f0:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    69f2:	f7ff ffe3 	bl	69bc <net_buf_id>
    69f6:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    69fa:	fb02 3000 	mla	r0, r2, r0, r3
    69fe:	bd10      	pop	{r4, pc}
    6a00:	20002a48 	.word	0x20002a48

00006a04 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    6a04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6a08:	4605      	mov	r5, r0
    6a0a:	9101      	str	r1, [sp, #4]
    6a0c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    6a0e:	f001 fb1b 	bl	8048 <_impl_k_uptime_get_32>
    6a12:	4607      	mov	r7, r0
	__asm__ volatile(
    6a14:	f04f 0320 	mov.w	r3, #32
    6a18:	f3ef 8811 	mrs	r8, BASEPRI
    6a1c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    6a20:	8a6b      	ldrh	r3, [r5, #18]
    6a22:	2b00      	cmp	r3, #0
    6a24:	d03d      	beq.n	6aa2 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    6a26:	8a2a      	ldrh	r2, [r5, #16]
    6a28:	429a      	cmp	r2, r3
    6a2a:	d92a      	bls.n	6a82 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    6a2c:	2100      	movs	r1, #0
    6a2e:	4628      	mov	r0, r5
    6a30:	f000 fd8c 	bl	754c <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    6a34:	b328      	cbz	r0, 6a82 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6a36:	f388 8811 	msr	BASEPRI, r8
    6a3a:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    6a3c:	9b01      	ldr	r3, [sp, #4]
    6a3e:	2b00      	cmp	r3, #0
    6a40:	d03c      	beq.n	6abc <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    6a42:	1c73      	adds	r3, r6, #1
    6a44:	2b01      	cmp	r3, #1
    6a46:	d906      	bls.n	6a56 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    6a48:	f001 fafe 	bl	8048 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    6a4c:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    6a4e:	42b0      	cmp	r0, r6
    6a50:	bf94      	ite	ls
    6a52:	1a36      	subls	r6, r6, r0
    6a54:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6a56:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    6a58:	4f1e      	ldr	r7, [pc, #120]	; (6ad4 <net_buf_alloc_len+0xd0>)
    6a5a:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    6a5e:	4632      	mov	r2, r6
    6a60:	699b      	ldr	r3, [r3, #24]
    6a62:	681b      	ldr	r3, [r3, #0]
    6a64:	a901      	add	r1, sp, #4
    6a66:	681b      	ldr	r3, [r3, #0]
    6a68:	4620      	mov	r0, r4
    6a6a:	4798      	blx	r3
    6a6c:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    6a6e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    6a70:	bb28      	cbnz	r0, 6abe <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    6a72:	79a0      	ldrb	r0, [r4, #6]
    6a74:	4621      	mov	r1, r4
    6a76:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    6a7a:	f000 fd48 	bl	750e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    6a7e:	462c      	mov	r4, r5
    6a80:	e018      	b.n	6ab4 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    6a82:	8a68      	ldrh	r0, [r5, #18]
    6a84:	1e43      	subs	r3, r0, #1
    6a86:	826b      	strh	r3, [r5, #18]
    6a88:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    6a8c:	8a2c      	ldrh	r4, [r5, #16]
    6a8e:	1a24      	subs	r4, r4, r0
    6a90:	69e8      	ldr	r0, [r5, #28]
    6a92:	2318      	movs	r3, #24
    6a94:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    6a98:	4b0e      	ldr	r3, [pc, #56]	; (6ad4 <net_buf_alloc_len+0xd0>)
    6a9a:	1aed      	subs	r5, r5, r3
    6a9c:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    6a9e:	71a5      	strb	r5, [r4, #6]
		goto success;
    6aa0:	e7cc      	b.n	6a3c <net_buf_alloc_len+0x38>
    6aa2:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    6aa6:	4631      	mov	r1, r6
    6aa8:	4628      	mov	r0, r5
    6aaa:	f000 fd4f 	bl	754c <_impl_k_queue_get>
		return NULL;
    6aae:	4604      	mov	r4, r0
	if (!buf) {
    6ab0:	2800      	cmp	r0, #0
    6ab2:	d1c3      	bne.n	6a3c <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    6ab4:	4620      	mov	r0, r4
    6ab6:	b002      	add	sp, #8
    6ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    6abc:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    6abe:	2301      	movs	r3, #1
    6ac0:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    6ac2:	2300      	movs	r3, #0
	buf->frags = NULL;
    6ac4:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    6ac6:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    6ac8:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    6aca:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    6acc:	6923      	ldr	r3, [r4, #16]
    6ace:	81e2      	strh	r2, [r4, #14]
    6ad0:	60a3      	str	r3, [r4, #8]
	return buf;
    6ad2:	e7ef      	b.n	6ab4 <net_buf_alloc_len+0xb0>
    6ad4:	20002a48 	.word	0x20002a48

00006ad8 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    6ad8:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    6ada:	685b      	ldr	r3, [r3, #4]
    6adc:	460a      	mov	r2, r1
    6ade:	6819      	ldr	r1, [r3, #0]
    6ae0:	f7ff bf90 	b.w	6a04 <net_buf_alloc_len>

00006ae4 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    6ae4:	6883      	ldr	r3, [r0, #8]
    6ae6:	4419      	add	r1, r3
    6ae8:	6001      	str	r1, [r0, #0]
    6aea:	4770      	bx	lr

00006aec <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    6aec:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    6aee:	460a      	mov	r2, r1
    6af0:	6814      	ldr	r4, [r2, #0]
    6af2:	b914      	cbnz	r4, 6afa <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    6af4:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    6af6:	f000 bd0f 	b.w	7518 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    6afa:	7953      	ldrb	r3, [r2, #5]
    6afc:	f043 0301 	orr.w	r3, r3, #1
    6b00:	7153      	strb	r3, [r2, #5]
    6b02:	4622      	mov	r2, r4
    6b04:	e7f4      	b.n	6af0 <net_buf_put+0x4>
	...

00006b08 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    6b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b0a:	4d15      	ldr	r5, [pc, #84]	; (6b60 <net_buf_unref+0x58>)
    6b0c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    6b0e:	2600      	movs	r6, #0
	while (buf) {
    6b10:	b904      	cbnz	r4, 6b14 <net_buf_unref+0xc>
    6b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    6b14:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    6b16:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    6b18:	3b01      	subs	r3, #1
    6b1a:	b2db      	uxtb	r3, r3
    6b1c:	7123      	strb	r3, [r4, #4]
    6b1e:	2b00      	cmp	r3, #0
    6b20:	d1f7      	bne.n	6b12 <net_buf_unref+0xa>
		if (buf->__buf) {
    6b22:	6921      	ldr	r1, [r4, #16]
    6b24:	b159      	cbz	r1, 6b3e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    6b26:	7963      	ldrb	r3, [r4, #5]
    6b28:	079b      	lsls	r3, r3, #30
    6b2a:	d407      	bmi.n	6b3c <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6b2c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    6b2e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    6b32:	4620      	mov	r0, r4
    6b34:	699b      	ldr	r3, [r3, #24]
    6b36:	681b      	ldr	r3, [r3, #0]
    6b38:	689b      	ldr	r3, [r3, #8]
    6b3a:	4798      	blx	r3
			buf->__buf = NULL;
    6b3c:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    6b3e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    6b40:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    6b42:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    6b46:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    6b48:	695b      	ldr	r3, [r3, #20]
    6b4a:	b11b      	cbz	r3, 6b54 <net_buf_unref+0x4c>
			pool->destroy(buf);
    6b4c:	4620      	mov	r0, r4
    6b4e:	4798      	blx	r3
{
    6b50:	463c      	mov	r4, r7
    6b52:	e7dd      	b.n	6b10 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    6b54:	4621      	mov	r1, r4
    6b56:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    6b5a:	f000 fcd8 	bl	750e <k_queue_prepend>
    6b5e:	e7f7      	b.n	6b50 <net_buf_unref+0x48>
    6b60:	20002a48 	.word	0x20002a48

00006b64 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    6b64:	7903      	ldrb	r3, [r0, #4]
    6b66:	3301      	adds	r3, #1
    6b68:	7103      	strb	r3, [r0, #4]
	return buf;
}
    6b6a:	4770      	bx	lr

00006b6c <net_buf_simple_add>:
	return buf->data + buf->len;
    6b6c:	8883      	ldrh	r3, [r0, #4]
    6b6e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    6b70:	4419      	add	r1, r3
    6b72:	8081      	strh	r1, [r0, #4]
	return tail;
}
    6b74:	18d0      	adds	r0, r2, r3
    6b76:	4770      	bx	lr

00006b78 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    6b78:	b430      	push	{r4, r5}
    6b7a:	8883      	ldrh	r3, [r0, #4]
    6b7c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    6b7e:	189d      	adds	r5, r3, r2
    6b80:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    6b82:	18e0      	adds	r0, r4, r3
}
    6b84:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    6b86:	f7fb b8a1 	b.w	1ccc <memcpy>

00006b8a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    6b8a:	8883      	ldrh	r3, [r0, #4]
    6b8c:	1a5b      	subs	r3, r3, r1
    6b8e:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    6b90:	6803      	ldr	r3, [r0, #0]
    6b92:	4419      	add	r1, r3
    6b94:	6001      	str	r1, [r0, #0]
}
    6b96:	4608      	mov	r0, r1
    6b98:	4770      	bx	lr
	...

00006b9c <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b9c:	4b03      	ldr	r3, [pc, #12]	; (6bac <uart_nrfx_err_check+0x10>)
    6b9e:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    6ba0:	b118      	cbz	r0, 6baa <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6ba2:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    6ba6:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    6baa:	4770      	bx	lr
    6bac:	40002124 	.word	0x40002124

00006bb0 <uart_nrfx_config_get>:
	return 0;
}

static int uart_nrfx_config_get(struct device *dev, struct uart_config *cfg)
{
	*cfg = get_dev_data(dev)->uart_config;
    6bb0:	6882      	ldr	r2, [r0, #8]
{
    6bb2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6bb4:	e892 0003 	ldmia.w	r2, {r0, r1}
    6bb8:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
    6bbc:	2000      	movs	r0, #0
    6bbe:	4770      	bx	lr

00006bc0 <uart_nrfx_configure>:
{
    6bc0:	b530      	push	{r4, r5, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    6bc2:	794b      	ldrb	r3, [r1, #5]
    6bc4:	2b01      	cmp	r3, #1
    6bc6:	d120      	bne.n	6c0a <uart_nrfx_configure+0x4a>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6bc8:	798b      	ldrb	r3, [r1, #6]
    6bca:	2b03      	cmp	r3, #3
    6bcc:	d11d      	bne.n	6c0a <uart_nrfx_configure+0x4a>
	switch (cfg->flow_ctrl) {
    6bce:	79cc      	ldrb	r4, [r1, #7]
    6bd0:	b12c      	cbz	r4, 6bde <uart_nrfx_configure+0x1e>
    6bd2:	2c01      	cmp	r4, #1
    6bd4:	d119      	bne.n	6c0a <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    6bd6:	6803      	ldr	r3, [r0, #0]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    6bd8:	689b      	ldr	r3, [r3, #8]
    6bda:	781b      	ldrb	r3, [r3, #0]
    6bdc:	b1ab      	cbz	r3, 6c0a <uart_nrfx_configure+0x4a>
	switch (cfg->parity) {
    6bde:	790a      	ldrb	r2, [r1, #4]
    6be0:	b112      	cbz	r2, 6be8 <uart_nrfx_configure+0x28>
    6be2:	2a02      	cmp	r2, #2
    6be4:	d111      	bne.n	6c0a <uart_nrfx_configure+0x4a>
		parity = NRF_UART_PARITY_INCLUDED;
    6be6:	220e      	movs	r2, #14
	switch (baudrate) {
    6be8:	680b      	ldr	r3, [r1, #0]
    6bea:	f647 2512 	movw	r5, #31250	; 0x7a12
    6bee:	42ab      	cmp	r3, r5
    6bf0:	d06c      	beq.n	6ccc <uart_nrfx_configure+0x10c>
    6bf2:	d827      	bhi.n	6c44 <uart_nrfx_configure+0x84>
    6bf4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    6bf8:	d061      	beq.n	6cbe <uart_nrfx_configure+0xfe>
    6bfa:	d812      	bhi.n	6c22 <uart_nrfx_configure+0x62>
    6bfc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    6c00:	d04c      	beq.n	6c9c <uart_nrfx_configure+0xdc>
    6c02:	d805      	bhi.n	6c10 <uart_nrfx_configure+0x50>
    6c04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    6c08:	d070      	beq.n	6cec <uart_nrfx_configure+0x12c>
		return -ENOTSUP;
    6c0a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    6c0e:	bd30      	pop	{r4, r5, pc}
	switch (baudrate) {
    6c10:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6c14:	d050      	beq.n	6cb8 <uart_nrfx_configure+0xf8>
    6c16:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    6c1a:	d1f6      	bne.n	6c0a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    6c1c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    6c20:	e03e      	b.n	6ca0 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    6c22:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    6c26:	d04c      	beq.n	6cc2 <uart_nrfx_configure+0x102>
    6c28:	d804      	bhi.n	6c34 <uart_nrfx_configure+0x74>
    6c2a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    6c2e:	d1ec      	bne.n	6c0a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    6c30:	4b30      	ldr	r3, [pc, #192]	; (6cf4 <uart_nrfx_configure+0x134>)
    6c32:	e035      	b.n	6ca0 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    6c34:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    6c38:	d046      	beq.n	6cc8 <uart_nrfx_configure+0x108>
    6c3a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    6c3e:	d1e4      	bne.n	6c0a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    6c40:	4b2d      	ldr	r3, [pc, #180]	; (6cf8 <uart_nrfx_configure+0x138>)
    6c42:	e02d      	b.n	6ca0 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    6c44:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    6c48:	d048      	beq.n	6cdc <uart_nrfx_configure+0x11c>
    6c4a:	d811      	bhi.n	6c70 <uart_nrfx_configure+0xb0>
    6c4c:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    6c50:	42ab      	cmp	r3, r5
    6c52:	d03e      	beq.n	6cd2 <uart_nrfx_configure+0x112>
    6c54:	d804      	bhi.n	6c60 <uart_nrfx_configure+0xa0>
    6c56:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    6c5a:	d1d6      	bne.n	6c0a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    6c5c:	4b27      	ldr	r3, [pc, #156]	; (6cfc <uart_nrfx_configure+0x13c>)
    6c5e:	e01f      	b.n	6ca0 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    6c60:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    6c64:	d038      	beq.n	6cd8 <uart_nrfx_configure+0x118>
    6c66:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    6c6a:	d1ce      	bne.n	6c0a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    6c6c:	4b24      	ldr	r3, [pc, #144]	; (6d00 <uart_nrfx_configure+0x140>)
    6c6e:	e017      	b.n	6ca0 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    6c70:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    6c74:	d036      	beq.n	6ce4 <uart_nrfx_configure+0x124>
    6c76:	d808      	bhi.n	6c8a <uart_nrfx_configure+0xca>
    6c78:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    6c7c:	d030      	beq.n	6ce0 <uart_nrfx_configure+0x120>
    6c7e:	4d21      	ldr	r5, [pc, #132]	; (6d04 <uart_nrfx_configure+0x144>)
    6c80:	42ab      	cmp	r3, r5
    6c82:	d1c2      	bne.n	6c0a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    6c84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6c88:	e00a      	b.n	6ca0 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    6c8a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    6c8e:	d02b      	beq.n	6ce8 <uart_nrfx_configure+0x128>
    6c90:	4d1d      	ldr	r5, [pc, #116]	; (6d08 <uart_nrfx_configure+0x148>)
    6c92:	42ab      	cmp	r3, r5
    6c94:	d1b9      	bne.n	6c0a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    6c96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6c9a:	e001      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00027000;
    6c9c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    6ca0:	4d1a      	ldr	r5, [pc, #104]	; (6d0c <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    6ca2:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    6ca4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    6ca8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
    6cac:	6883      	ldr	r3, [r0, #8]
    6cae:	c903      	ldmia	r1, {r0, r1}
    6cb0:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    6cb4:	2000      	movs	r0, #0
    6cb6:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    6cb8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    6cbc:	e7f0      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    6cbe:	4b14      	ldr	r3, [pc, #80]	; (6d10 <uart_nrfx_configure+0x150>)
    6cc0:	e7ee      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    6cc2:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    6cc6:	e7eb      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    6cc8:	4b12      	ldr	r3, [pc, #72]	; (6d14 <uart_nrfx_configure+0x154>)
    6cca:	e7e9      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    6ccc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    6cd0:	e7e6      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    6cd2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    6cd6:	e7e3      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    6cd8:	4b0f      	ldr	r3, [pc, #60]	; (6d18 <uart_nrfx_configure+0x158>)
    6cda:	e7e1      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    6cdc:	4b0f      	ldr	r3, [pc, #60]	; (6d1c <uart_nrfx_configure+0x15c>)
    6cde:	e7df      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    6ce0:	4b0f      	ldr	r3, [pc, #60]	; (6d20 <uart_nrfx_configure+0x160>)
    6ce2:	e7dd      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    6ce4:	4b0f      	ldr	r3, [pc, #60]	; (6d24 <uart_nrfx_configure+0x164>)
    6ce6:	e7db      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    6ce8:	4b0f      	ldr	r3, [pc, #60]	; (6d28 <uart_nrfx_configure+0x168>)
    6cea:	e7d9      	b.n	6ca0 <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    6cec:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    6cf0:	e7d6      	b.n	6ca0 <uart_nrfx_configure+0xe0>
    6cf2:	bf00      	nop
    6cf4:	00275000 	.word	0x00275000
    6cf8:	0075f000 	.word	0x0075f000
    6cfc:	009d5000 	.word	0x009d5000
    6d00:	013a9000 	.word	0x013a9000
    6d04:	0003d090 	.word	0x0003d090
    6d08:	000f4240 	.word	0x000f4240
    6d0c:	40002000 	.word	0x40002000
    6d10:	0013b000 	.word	0x0013b000
    6d14:	004ea000 	.word	0x004ea000
    6d18:	00ebf000 	.word	0x00ebf000
    6d1c:	01d7e000 	.word	0x01d7e000
    6d20:	03afb000 	.word	0x03afb000
    6d24:	075f7000 	.word	0x075f7000
    6d28:	0ebed000 	.word	0x0ebed000

00006d2c <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6d2c:	4b08      	ldr	r3, [pc, #32]	; (6d50 <uart_nrfx_poll_in+0x24>)
    6d2e:	681a      	ldr	r2, [r3, #0]
{
    6d30:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    6d32:	b152      	cbz	r2, 6d4a <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d34:	2000      	movs	r0, #0
    6d36:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6d38:	681b      	ldr	r3, [r3, #0]
    6d3a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    6d3c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    6d3e:	4b05      	ldr	r3, [pc, #20]	; (6d54 <uart_nrfx_poll_in+0x28>)
    6d40:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    6d44:	700b      	strb	r3, [r1, #0]
}
    6d46:	b002      	add	sp, #8
    6d48:	4770      	bx	lr
		return -1;
    6d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6d4e:	e7fa      	b.n	6d46 <uart_nrfx_poll_in+0x1a>
    6d50:	40002108 	.word	0x40002108
    6d54:	40002000 	.word	0x40002000

00006d58 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d58:	4b09      	ldr	r3, [pc, #36]	; (6d80 <uart_nrfx_poll_out+0x28>)
    6d5a:	2200      	movs	r2, #0
    6d5c:	601a      	str	r2, [r3, #0]
{
    6d5e:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6d60:	681a      	ldr	r2, [r3, #0]
    6d62:	9201      	str	r2, [sp, #4]
    (void)dummy;
    6d64:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d66:	4a07      	ldr	r2, [pc, #28]	; (6d84 <uart_nrfx_poll_out+0x2c>)
    6d68:	2001      	movs	r0, #1
    6d6a:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
    6d6c:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6d70:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
    6d72:	2a00      	cmp	r2, #0
    6d74:	d0fc      	beq.n	6d70 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d76:	4b04      	ldr	r3, [pc, #16]	; (6d88 <uart_nrfx_poll_out+0x30>)
    6d78:	2201      	movs	r2, #1
    6d7a:	601a      	str	r2, [r3, #0]
}
    6d7c:	b002      	add	sp, #8
    6d7e:	4770      	bx	lr
    6d80:	4000211c 	.word	0x4000211c
    6d84:	40002008 	.word	0x40002008
    6d88:	4000200c 	.word	0x4000200c

00006d8c <uart_nrfx_init>:
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    6d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    6d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSEL.RXD = pselrxd;
    6d92:	4c16      	ldr	r4, [pc, #88]	; (6dec <uart_nrfx_init+0x60>)
    6d94:	2240      	movs	r2, #64	; 0x40
    6d96:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    6d9a:	2103      	movs	r1, #3
    6d9c:	2200      	movs	r2, #0
    6d9e:	2508      	movs	r5, #8
    6da0:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    6da4:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    6da8:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    6dac:	2506      	movs	r5, #6
    6dae:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    6db2:	2520      	movs	r5, #32
    6db4:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    6db8:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    6dbc:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
    6dc0:	2305      	movs	r3, #5
    6dc2:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    6dc6:	2307      	movs	r3, #7
    6dc8:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    6dcc:	6881      	ldr	r1, [r0, #8]
    6dce:	f7ff fef7 	bl	6bc0 <uart_nrfx_configure>
	if (err) {
    6dd2:	b948      	cbnz	r0, 6de8 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    6dd4:	2304      	movs	r3, #4
    6dd6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dda:	4b05      	ldr	r3, [pc, #20]	; (6df0 <uart_nrfx_init+0x64>)
    6ddc:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6dde:	681b      	ldr	r3, [r3, #0]
    6de0:	9301      	str	r3, [sp, #4]
    (void)dummy;
    6de2:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6de4:	2301      	movs	r3, #1
    6de6:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    6de8:	b003      	add	sp, #12
    6dea:	bd30      	pop	{r4, r5, pc}
    6dec:	40002000 	.word	0x40002000
    6df0:	40002108 	.word	0x40002108

00006df4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
    6df4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
    6df6:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
    6df8:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
    6dfa:	f04f 0520 	mov.w	r5, #32
    6dfe:	f3ef 8411 	mrs	r4, BASEPRI
    6e02:	f385 8811 	msr	BASEPRI, r5
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    6e06:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    6e08:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
    6e0c:	1b9b      	subs	r3, r3, r6
    6e0e:	403b      	ands	r3, r7
	if (available < len) {
    6e10:	4293      	cmp	r3, r2
		len = available;
    6e12:	bf38      	it	cc
    6e14:	b29a      	uxthcc	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    6e16:	eb06 0e02 	add.w	lr, r6, r2
    6e1a:	ea07 0e0e 	and.w	lr, r7, lr
	first = rngp->first_alloc;
    6e1e:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
    6e20:	f880 e000 	strb.w	lr, [r0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6e24:	f384 8811 	msr	BASEPRI, r4
    6e28:	440a      	add	r2, r1
	u8_t *dst   = buf;
    6e2a:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
    6e2c:	4294      	cmp	r4, r2
    6e2e:	d116      	bne.n	6e5e <rng_pool_get+0x6a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    6e30:	4566      	cmp	r6, ip
    6e32:	d109      	bne.n	6e48 <rng_pool_get+0x54>
	__asm__ volatile(
    6e34:	f04f 0520 	mov.w	r5, #32
    6e38:	f3ef 8211 	mrs	r2, BASEPRI
    6e3c:	f385 8811 	msr	BASEPRI, r5
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    6e40:	7805      	ldrb	r5, [r0, #0]
    6e42:	7045      	strb	r5, [r0, #1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6e44:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(key);
	}

	len = dst - buf;
    6e48:	1a64      	subs	r4, r4, r1
    6e4a:	b2a2      	uxth	r2, r4
	available = available - len;
    6e4c:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
    6e4e:	7903      	ldrb	r3, [r0, #4]
    6e50:	429c      	cmp	r4, r3
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    6e52:	bf9e      	ittt	ls
    6e54:	4b06      	ldrls	r3, [pc, #24]	; (6e70 <rng_pool_get+0x7c>)
    6e56:	2101      	movls	r1, #1
    6e58:	6019      	strls	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
    6e5a:	4610      	mov	r0, r2
    6e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    6e5e:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
    6e62:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    6e64:	f89e e005 	ldrb.w	lr, [lr, #5]
    6e68:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
    6e6c:	403d      	ands	r5, r7
    6e6e:	e7dd      	b.n	6e2c <rng_pool_get+0x38>
    6e70:	4000d000 	.word	0x4000d000

00006e74 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
    6e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    6e78:	4d11      	ldr	r5, [pc, #68]	; (6ec0 <entropy_nrf5_get_entropy+0x4c>)
    6e7a:	460e      	mov	r6, r1
    6e7c:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    6e7e:	f105 0845 	add.w	r8, r5, #69	; 0x45
    6e82:	f105 0918 	add.w	r9, r5, #24
	while (len) {
    6e86:	b914      	cbnz	r4, 6e8e <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
    6e88:	4620      	mov	r0, r4
    6e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6e92:	4628      	mov	r0, r5
    6e94:	f000 fe57 	bl	7b46 <_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    6e98:	4622      	mov	r2, r4
    6e9a:	4631      	mov	r1, r6
    6e9c:	4640      	mov	r0, r8
    6e9e:	f7ff ffa9 	bl	6df4 <rng_pool_get>
    6ea2:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    6ea4:	4628      	mov	r0, r5
    6ea6:	f000 fe28 	bl	7afa <_impl_k_sem_give>
		if (bytes == 0) {
    6eaa:	b92f      	cbnz	r7, 6eb8 <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    6eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6eb0:	4648      	mov	r0, r9
    6eb2:	f000 fe48 	bl	7b46 <_impl_k_sem_take>
			continue;
    6eb6:	e7e6      	b.n	6e86 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
    6eb8:	1be4      	subs	r4, r4, r7
    6eba:	b2a4      	uxth	r4, r4
		buf += bytes;
    6ebc:	443e      	add	r6, r7
    6ebe:	e7e2      	b.n	6e86 <entropy_nrf5_get_entropy+0x12>
    6ec0:	20000cc8 	.word	0x20000cc8

00006ec4 <random_byte_get>:
{
    6ec4:	b082      	sub	sp, #8
	__asm__ volatile(
    6ec6:	f04f 0320 	mov.w	r3, #32
    6eca:	f3ef 8211 	mrs	r2, BASEPRI
    6ece:	f383 8811 	msr	BASEPRI, r3
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    6ed2:	4b09      	ldr	r3, [pc, #36]	; (6ef8 <random_byte_get+0x34>)
    6ed4:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
    6ed6:	b161      	cbz	r1, 6ef2 <random_byte_get+0x2e>
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
    6ed8:	4908      	ldr	r1, [pc, #32]	; (6efc <random_byte_get+0x38>)
    6eda:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    6ede:	2100      	movs	r1, #0
    6ee0:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    6ee2:	681b      	ldr	r3, [r3, #0]
    6ee4:	9301      	str	r3, [sp, #4]
    (void)dummy;
    6ee6:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
    6ee8:	b2c0      	uxtb	r0, r0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6eea:	f382 8811 	msr	BASEPRI, r2
}
    6eee:	b002      	add	sp, #8
    6ef0:	4770      	bx	lr
	int retval = -EAGAIN;
    6ef2:	f06f 000a 	mvn.w	r0, #10
    6ef6:	e7f8      	b.n	6eea <random_byte_get+0x26>
    6ef8:	4000d100 	.word	0x4000d100
    6efc:	4000d000 	.word	0x4000d000

00006f00 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
    6f00:	07db      	lsls	r3, r3, #31
{
    6f02:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6f06:	4688      	mov	r8, r1
    6f08:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
    6f0a:	d405      	bmi.n	6f18 <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    6f0c:	481d      	ldr	r0, [pc, #116]	; (6f84 <entropy_nrf5_get_entropy_isr+0x84>)
    6f0e:	f7ff ff71 	bl	6df4 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
    6f12:	b002      	add	sp, #8
    6f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    6f18:	b372      	cbz	r2, 6f78 <entropy_nrf5_get_entropy_isr+0x78>
	__asm__ volatile(
    6f1a:	f04f 0320 	mov.w	r3, #32
    6f1e:	f3ef 8511 	mrs	r5, BASEPRI
    6f22:	f383 8811 	msr	BASEPRI, r3
		irq_enabled = irq_is_enabled(RNG_IRQn);
    6f26:	200d      	movs	r0, #13
    6f28:	f7fa fcda 	bl	18e0 <_arch_irq_is_enabled>
    6f2c:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
    6f2e:	200d      	movs	r0, #13
    6f30:	f7fa fcc2 	bl	18b8 <_arch_irq_disable>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6f34:	f385 8811 	msr	BASEPRI, r5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    6f38:	4e13      	ldr	r6, [pc, #76]	; (6f88 <entropy_nrf5_get_entropy_isr+0x88>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f3a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 6f90 <entropy_nrf5_get_entropy_isr+0x90>
    6f3e:	2200      	movs	r2, #0
    6f40:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    6f42:	6832      	ldr	r2, [r6, #0]
    6f44:	9201      	str	r2, [sp, #4]
    (void)dummy;
    6f46:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    6f48:	4a10      	ldr	r2, [pc, #64]	; (6f8c <entropy_nrf5_get_entropy_isr+0x8c>)
    6f4a:	2101      	movs	r1, #1
    6f4c:	6011      	str	r1, [r2, #0]
    6f4e:	4625      	mov	r5, r4
    6f50:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    6f54:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
    6f56:	b18b      	cbz	r3, 6f7c <entropy_nrf5_get_entropy_isr+0x7c>
			byte = random_byte_get();
    6f58:	f7ff ffb4 	bl	6ec4 <random_byte_get>
			if (byte < 0) {
    6f5c:	2800      	cmp	r0, #0
    6f5e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    6f62:	dbf7      	blt.n	6f54 <entropy_nrf5_get_entropy_isr+0x54>
			buf[--len] = byte;
    6f64:	3d01      	subs	r5, #1
    6f66:	b2ad      	uxth	r5, r5
    6f68:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
    6f6c:	2d00      	cmp	r5, #0
    6f6e:	d1f1      	bne.n	6f54 <entropy_nrf5_get_entropy_isr+0x54>
		if (irq_enabled) {
    6f70:	b117      	cbz	r7, 6f78 <entropy_nrf5_get_entropy_isr+0x78>
			irq_enable(RNG_IRQn);
    6f72:	200d      	movs	r0, #13
    6f74:	f7fa fc90 	bl	1898 <_arch_irq_enable>
	return cnt;
    6f78:	4620      	mov	r0, r4
    6f7a:	e7ca      	b.n	6f12 <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
    6f7c:	bf20      	wfe
				__SEV();
    6f7e:	bf40      	sev
				__WFE();
    6f80:	bf20      	wfe
    6f82:	e7e7      	b.n	6f54 <entropy_nrf5_get_entropy_isr+0x54>
    6f84:	20000cf8 	.word	0x20000cf8
    6f88:	4000d100 	.word	0x4000d100
    6f8c:	4000d000 	.word	0x4000d000
    6f90:	e000e100 	.word	0xe000e100

00006f94 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    6f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    6f96:	4c20      	ldr	r4, [pc, #128]	; (7018 <entropy_nrf5_init+0x84>)
    6f98:	2201      	movs	r2, #1
    6f9a:	4611      	mov	r1, r2
    6f9c:	4620      	mov	r0, r4
    6f9e:	f000 fda3 	bl	7ae8 <_impl_k_sem_init>
    6fa2:	f104 0018 	add.w	r0, r4, #24
    6fa6:	2201      	movs	r2, #1
    6fa8:	2100      	movs	r1, #0
    6faa:	f000 fd9d 	bl	7ae8 <_impl_k_sem_init>
	rngp->mask	  = size - 1;
    6fae:	2307      	movs	r3, #7
    6fb0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	rngp->threshold	  = threshold;
    6fb4:	2304      	movs	r3, #4
    6fb6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	rngp->mask	  = size - 1;
    6fba:	230f      	movs	r3, #15
    6fbc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	rngp->threshold	  = threshold;
    6fc0:	230c      	movs	r3, #12
	rngp->first_alloc = 0U;
    6fc2:	2500      	movs	r5, #0
	rngp->threshold	  = threshold;
    6fc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}

__STATIC_INLINE void nrf_rng_error_correction_enable(void)
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    6fc8:	4b14      	ldr	r3, [pc, #80]	; (701c <entropy_nrf5_init+0x88>)
	rngp->first_alloc = 0U;
    6fca:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    6fce:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	rngp->last	  = 0U;
    6fd2:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
	rngp->first_alloc = 0U;
    6fd6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	rngp->first_read  = 0U;
    6fda:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
	rngp->last	  = 0U;
    6fde:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
    6fe2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    6fe6:	f042 0201 	orr.w	r2, r2, #1
    6fea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    6fee:	4a0c      	ldr	r2, [pc, #48]	; (7020 <entropy_nrf5_init+0x8c>)
    6ff0:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    6ff2:	6812      	ldr	r2, [r2, #0]
    6ff4:	9201      	str	r2, [sp, #4]
    (void)dummy;
    6ff6:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = rng_int_mask;
    6ff8:	2201      	movs	r2, #1
    6ffa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
    6ffe:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    7000:	601a      	str	r2, [r3, #0]
    7002:	200d      	movs	r0, #13
    7004:	462a      	mov	r2, r5
    7006:	f7fa fc79 	bl	18fc <_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
    700a:	200d      	movs	r0, #13
    700c:	f7fa fc44 	bl	1898 <_arch_irq_enable>

	return 0;
}
    7010:	4628      	mov	r0, r5
    7012:	b003      	add	sp, #12
    7014:	bd30      	pop	{r4, r5, pc}
    7016:	bf00      	nop
    7018:	20000cc8 	.word	0x20000cc8
    701c:	4000d000 	.word	0x4000d000
    7020:	4000d100 	.word	0x4000d100

00007024 <isr>:
{
    7024:	b510      	push	{r4, lr}
	byte = random_byte_get();
    7026:	f7ff ff4d 	bl	6ec4 <random_byte_get>
	if (byte < 0) {
    702a:	2800      	cmp	r0, #0
    702c:	db2d      	blt.n	708a <isr+0x66>
	u8_t last  = rngp->last;
    702e:	4b17      	ldr	r3, [pc, #92]	; (708c <isr+0x68>)
    7030:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    7034:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
    7038:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    703c:	1a51      	subs	r1, r2, r1
    703e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    7042:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    7044:	d013      	beq.n	706e <isr+0x4a>
	rngp->buffer[last] = byte;
    7046:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    7048:	3201      	adds	r2, #1
    704a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    704c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    7050:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    7054:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    7056:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    7058:	3201      	adds	r2, #1
    705a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    705c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    7060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    7064:	480a      	ldr	r0, [pc, #40]	; (7090 <isr+0x6c>)
}
    7066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    706a:	f000 bd46 	b.w	7afa <_impl_k_sem_give>
	u8_t last  = rngp->last;
    706e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    7072:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
    7076:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    707a:	1a51      	subs	r1, r2, r1
    707c:	ea34 0101 	bics.w	r1, r4, r1
    7080:	d1e9      	bne.n	7056 <isr+0x32>
    7082:	4b04      	ldr	r3, [pc, #16]	; (7094 <isr+0x70>)
    7084:	2201      	movs	r2, #1
    7086:	601a      	str	r2, [r3, #0]
    7088:	e7ec      	b.n	7064 <isr+0x40>
    708a:	bd10      	pop	{r4, pc}
    708c:	20000cc8 	.word	0x20000cc8
    7090:	20000ce0 	.word	0x20000ce0
    7094:	4000d004 	.word	0x4000d004

00007098 <_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    7098:	4b09      	ldr	r3, [pc, #36]	; (70c0 <_sys_device_do_config_level+0x28>)
{
    709a:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    709c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    70a0:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    70a2:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    70a4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    70a8:	42ac      	cmp	r4, r5
    70aa:	d300      	bcc.n	70ae <_sys_device_do_config_level+0x16>
		} else {
			_k_object_init(info);
		}
	}
}
    70ac:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    70ae:	6823      	ldr	r3, [r4, #0]
    70b0:	4620      	mov	r0, r4
    70b2:	685b      	ldr	r3, [r3, #4]
    70b4:	4798      	blx	r3
		if (retval != 0) {
    70b6:	b100      	cbz	r0, 70ba <_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    70b8:	6066      	str	r6, [r4, #4]
								info++) {
    70ba:	340c      	adds	r4, #12
    70bc:	e7f4      	b.n	70a8 <_sys_device_do_config_level+0x10>
    70be:	bf00      	nop
    70c0:	00008a94 	.word	0x00008a94

000070c4 <_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    70c4:	4b10      	ldr	r3, [pc, #64]	; (7108 <_impl_device_get_binding+0x44>)
{
    70c6:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    70c8:	4c10      	ldr	r4, [pc, #64]	; (710c <_impl_device_get_binding+0x48>)
{
    70ca:	4605      	mov	r5, r0
    70cc:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    70ce:	429c      	cmp	r4, r3
    70d0:	d104      	bne.n	70dc <_impl_device_get_binding+0x18>
    70d2:	4c0e      	ldr	r4, [pc, #56]	; (710c <_impl_device_get_binding+0x48>)
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    70d4:	42b4      	cmp	r4, r6
    70d6:	d109      	bne.n	70ec <_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    70d8:	2400      	movs	r4, #0
    70da:	e012      	b.n	7102 <_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    70dc:	6862      	ldr	r2, [r4, #4]
    70de:	b11a      	cbz	r2, 70e8 <_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    70e0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    70e2:	6812      	ldr	r2, [r2, #0]
    70e4:	42aa      	cmp	r2, r5
    70e6:	d00c      	beq.n	7102 <_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    70e8:	340c      	adds	r4, #12
    70ea:	e7f0      	b.n	70ce <_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    70ec:	6863      	ldr	r3, [r4, #4]
    70ee:	b90b      	cbnz	r3, 70f4 <_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    70f0:	340c      	adds	r4, #12
    70f2:	e7ef      	b.n	70d4 <_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    70f4:	6823      	ldr	r3, [r4, #0]
    70f6:	4628      	mov	r0, r5
    70f8:	6819      	ldr	r1, [r3, #0]
    70fa:	f7fa fdb4 	bl	1c66 <strcmp>
    70fe:	2800      	cmp	r0, #0
    7100:	d1f6      	bne.n	70f0 <_impl_device_get_binding+0x2c>
}
    7102:	4620      	mov	r0, r4
    7104:	bd70      	pop	{r4, r5, r6, pc}
    7106:	bf00      	nop
    7108:	20002a0c 	.word	0x20002a0c
    710c:	20002988 	.word	0x20002988

00007110 <_sys_power_save_idle_exit>:
	if (sys_pm_idle_exit_notify) {
		sys_resume();
	}
#endif

	z_clock_idle_exit();
    7110:	f7fa b93e 	b.w	1390 <z_clock_idle_exit>

00007114 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    7114:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    7116:	4d0a      	ldr	r5, [pc, #40]	; (7140 <idle+0x2c>)
	__asm__ volatile(
    7118:	f04f 0220 	mov.w	r2, #32
    711c:	f3ef 8311 	mrs	r3, BASEPRI
    7120:	f382 8811 	msr	BASEPRI, r2
	s32_t ticks = _get_next_timeout_expiry();
    7124:	f000 ff0d 	bl	7f42 <_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    7128:	2101      	movs	r1, #1
    712a:	2802      	cmp	r0, #2
	s32_t ticks = _get_next_timeout_expiry();
    712c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    712e:	bfd8      	it	le
    7130:	4608      	movle	r0, r1
    7132:	f000 ff0f 	bl	7f54 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    7136:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    7138:	f7fa fc38 	bl	19ac <k_cpu_idle>
    713c:	e7ec      	b.n	7118 <idle+0x4>
    713e:	bf00      	nop
    7140:	20000df4 	.word	0x20000df4

00007144 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	(void)memset(&__bss_start, 0,
    7144:	4802      	ldr	r0, [pc, #8]	; (7150 <_bss_zero+0xc>)
    7146:	4a03      	ldr	r2, [pc, #12]	; (7154 <_bss_zero+0x10>)
    7148:	2100      	movs	r1, #0
    714a:	1a12      	subs	r2, r2, r0
    714c:	f7fa bdea 	b.w	1d24 <memset>
    7150:	20000000 	.word	0x20000000
    7154:	20000ec0 	.word	0x20000ec0

00007158 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    7158:	4802      	ldr	r0, [pc, #8]	; (7164 <_data_copy+0xc>)
    715a:	4a03      	ldr	r2, [pc, #12]	; (7168 <_data_copy+0x10>)
    715c:	4903      	ldr	r1, [pc, #12]	; (716c <_data_copy+0x14>)
    715e:	1a12      	subs	r2, r2, r0
    7160:	f7fa bdb4 	b.w	1ccc <memcpy>
    7164:	200027b8 	.word	0x200027b8
    7168:	20002a88 	.word	0x20002a88
    716c:	00008b14 	.word	0x00008b14

00007170 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7170:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7172:	2002      	movs	r0, #2
    7174:	f7ff ff90 	bl	7098 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    7178:	4809      	ldr	r0, [pc, #36]	; (71a0 <bg_thread_main+0x30>)
    717a:	f7f9 fe13 	bl	da4 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    717e:	2003      	movs	r0, #3
    7180:	f7ff ff8a 	bl	7098 <_sys_device_do_config_level>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
    7184:	f7f9 ff48 	bl	1018 <__do_global_ctors_aux>
	__do_init_array_aux();
    7188:	f7f9 ff38 	bl	ffc <__do_init_array_aux>
#endif

	_init_static_threads();
    718c:	f000 fdc4 	bl	7d18 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    7190:	f7f9 f9a0 	bl	4d4 <main>

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    7194:	4a03      	ldr	r2, [pc, #12]	; (71a4 <bg_thread_main+0x34>)
    7196:	7b13      	ldrb	r3, [r2, #12]
    7198:	f023 0301 	bic.w	r3, r3, #1
    719c:	7313      	strb	r3, [r2, #12]
    719e:	bd08      	pop	{r3, pc}
    71a0:	00008abc 	.word	0x00008abc
    71a4:	20000d88 	.word	0x20000d88

000071a8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    71a8:	b580      	push	{r7, lr}
    71aa:	b086      	sub	sp, #24
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    71ac:	4b31      	ldr	r3, [pc, #196]	; (7274 <_Cstart+0xcc>)
    71ae:	af06      	add	r7, sp, #24
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    71b0:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    71b4:	4b30      	ldr	r3, [pc, #192]	; (7278 <_Cstart+0xd0>)
	_kernel.ready_q.cache = _main_thread;
    71b6:	4e31      	ldr	r6, [pc, #196]	; (727c <_Cstart+0xd4>)
    71b8:	4d31      	ldr	r5, [pc, #196]	; (7280 <_Cstart+0xd8>)
    71ba:	2400      	movs	r4, #0
    71bc:	22e0      	movs	r2, #224	; 0xe0
    71be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    71c2:	77dc      	strb	r4, [r3, #31]
    71c4:	761c      	strb	r4, [r3, #24]
    71c6:	765c      	strb	r4, [r3, #25]
    71c8:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    71ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    71cc:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    71d0:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    71d2:	f7fa fb59 	bl	1888 <_FaultInit>
	_CpuIdleInit();
    71d6:	f7fa fbe3 	bl	19a0 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    71da:	4620      	mov	r0, r4
    71dc:	f7ff ff5c 	bl	7098 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    71e0:	2001      	movs	r0, #1
    71e2:	f7ff ff59 	bl	7098 <_sys_device_do_config_level>
	_sched_init();
    71e6:	f000 fc03 	bl	79f0 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
    71ea:	4b26      	ldr	r3, [pc, #152]	; (7284 <_Cstart+0xdc>)
	_kernel.ready_q.cache = _main_thread;
    71ec:	6275      	str	r5, [r6, #36]	; 0x24
	_setup_new_thread(_main_thread, _main_stack,
    71ee:	9305      	str	r3, [sp, #20]
    71f0:	2301      	movs	r3, #1
    71f2:	9304      	str	r3, [sp, #16]
    71f4:	9403      	str	r4, [sp, #12]
    71f6:	9402      	str	r4, [sp, #8]
    71f8:	9401      	str	r4, [sp, #4]
    71fa:	9400      	str	r4, [sp, #0]
    71fc:	4b22      	ldr	r3, [pc, #136]	; (7288 <_Cstart+0xe0>)
    71fe:	4923      	ldr	r1, [pc, #140]	; (728c <_Cstart+0xe4>)
    7200:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7204:	4628      	mov	r0, r5
    7206:	f000 fd2d 	bl	7c64 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    720a:	7b6b      	ldrb	r3, [r5, #13]
    720c:	f023 0204 	bic.w	r2, r3, #4
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    7210:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7214:	736a      	strb	r2, [r5, #13]
    7216:	4634      	mov	r4, r6
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    7218:	d104      	bne.n	7224 <_Cstart+0x7c>
    721a:	69ab      	ldr	r3, [r5, #24]
	return true;
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
    721c:	b913      	cbnz	r3, 7224 <_Cstart+0x7c>
		_add_thread_to_ready_q(thread);
    721e:	4628      	mov	r0, r5
    7220:	f000 fac2 	bl	77a8 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    7224:	4b1a      	ldr	r3, [pc, #104]	; (7290 <_Cstart+0xe8>)
    7226:	9305      	str	r3, [sp, #20]
    7228:	2301      	movs	r3, #1
    722a:	4e1a      	ldr	r6, [pc, #104]	; (7294 <_Cstart+0xec>)
    722c:	9304      	str	r3, [sp, #16]
    722e:	230f      	movs	r3, #15
    7230:	9303      	str	r3, [sp, #12]
    7232:	2300      	movs	r3, #0
    7234:	9302      	str	r3, [sp, #8]
    7236:	9301      	str	r3, [sp, #4]
    7238:	9300      	str	r3, [sp, #0]
    723a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    723e:	4b16      	ldr	r3, [pc, #88]	; (7298 <_Cstart+0xf0>)
    7240:	4916      	ldr	r1, [pc, #88]	; (729c <_Cstart+0xf4>)
    7242:	4630      	mov	r0, r6
    7244:	f000 fd0e 	bl	7c64 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7248:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    724a:	60e6      	str	r6, [r4, #12]
    724c:	f023 0304 	bic.w	r3, r3, #4
    7250:	7373      	strb	r3, [r6, #13]
	list->head = (sys_dnode_t *)list;
    7252:	4b13      	ldr	r3, [pc, #76]	; (72a0 <_Cstart+0xf8>)
    7254:	61a3      	str	r3, [r4, #24]
	list->tail = (sys_dnode_t *)list;
    7256:	61e3      	str	r3, [r4, #28]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    7258:	4b12      	ldr	r3, [pc, #72]	; (72a4 <_Cstart+0xfc>)

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
    725a:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    725c:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
    7260:	4c11      	ldr	r4, [pc, #68]	; (72a8 <_Cstart+0x100>)
    7262:	4a09      	ldr	r2, [pc, #36]	; (7288 <_Cstart+0xe0>)
    7264:	f383 8809 	msr	PSP, r3
    7268:	b663      	cpsie	if
    726a:	2100      	movs	r1, #0
    726c:	f381 8811 	msr	BASEPRI, r1
    7270:	4610      	mov	r0, r2
    7272:	4720      	bx	r4
    7274:	200023b8 	.word	0x200023b8
    7278:	e000ed00 	.word	0xe000ed00
    727c:	20000df4 	.word	0x20000df4
    7280:	20000d88 	.word	0x20000d88
    7284:	00008aac 	.word	0x00008aac
    7288:	00007171 	.word	0x00007171
    728c:	20001678 	.word	0x20001678
    7290:	00008ab1 	.word	0x00008ab1
    7294:	20000d1c 	.word	0x20000d1c
    7298:	00007115 	.word	0x00007115
    729c:	20001a78 	.word	0x20001a78
    72a0:	20000e0c 	.word	0x20000e0c
    72a4:	20001a78 	.word	0x20001a78
    72a8:	0000098d 	.word	0x0000098d

000072ac <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    72ac:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    72ae:	4c07      	ldr	r4, [pc, #28]	; (72cc <init_static_pools+0x20>)
    72b0:	4d07      	ldr	r5, [pc, #28]	; (72d0 <init_static_pools+0x24>)
    72b2:	42ac      	cmp	r4, r5
    72b4:	d301      	bcc.n	72ba <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    72b6:	2000      	movs	r0, #0
    72b8:	bd38      	pop	{r3, r4, r5, pc}
    72ba:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
    72be:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
    72c0:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
    72c2:	4620      	mov	r0, r4
    72c4:	f7f9 f984 	bl	5d0 <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    72c8:	341c      	adds	r4, #28
    72ca:	e7f2      	b.n	72b2 <init_static_pools+0x6>
    72cc:	20002a0c 	.word	0x20002a0c
    72d0:	20002a0c 	.word	0x20002a0c

000072d4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
    72d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
    72d8:	1e1d      	subs	r5, r3, #0
{
    72da:	b085      	sub	sp, #20
    72dc:	4606      	mov	r6, r0
    72de:	460c      	mov	r4, r1
    72e0:	4617      	mov	r7, r2
	if (timeout > 0) {
    72e2:	dd56      	ble.n	7392 <k_mem_pool_alloc+0xbe>
		end = z_tick_get() + _ms_to_ticks(timeout);
    72e4:	f000 fe96 	bl	8014 <z_tick_get>
    72e8:	4680      	mov	r8, r0
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
    72ea:	482b      	ldr	r0, [pc, #172]	; (7398 <k_mem_pool_alloc+0xc4>)
    72ec:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    72f0:	2100      	movs	r1, #0
    72f2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    72f6:	2300      	movs	r3, #0
    72f8:	fbce 0105 	smlal	r0, r1, lr, r5
    72fc:	f7f8 ff0c 	bl	118 <__aeabi_ldivmod>
    7300:	eb18 0800 	adds.w	r8, r8, r0
	return pool - &_k_mem_pool_list_start[0];
    7304:	4b25      	ldr	r3, [pc, #148]	; (739c <k_mem_pool_alloc+0xc8>)
    7306:	4a26      	ldr	r2, [pc, #152]	; (73a0 <k_mem_pool_alloc+0xcc>)
    7308:	1af3      	subs	r3, r6, r3
    730a:	109b      	asrs	r3, r3, #2
    730c:	fb02 fa03 	mul.w	sl, r2, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
    7310:	fa5f fa8a 	uxtb.w	sl, sl
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		(void)_pend_current_thread(irq_lock(), &p->wait_q, timeout);
    7314:	f106 0b14 	add.w	fp, r6, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
    7318:	9400      	str	r4, [sp, #0]
    731a:	ab03      	add	r3, sp, #12
    731c:	aa02      	add	r2, sp, #8
    731e:	4639      	mov	r1, r7
    7320:	4630      	mov	r0, r6
    7322:	f7f9 f9a2 	bl	66a <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
    7326:	f110 0f0b 	cmn.w	r0, #11
    732a:	d10b      	bne.n	7344 <k_mem_pool_alloc+0x70>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
    732c:	9400      	str	r4, [sp, #0]
    732e:	ab03      	add	r3, sp, #12
    7330:	aa02      	add	r2, sp, #8
    7332:	4639      	mov	r1, r7
    7334:	4630      	mov	r0, r6
    7336:	f7f9 f998 	bl	66a <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
    733a:	f110 0f0b 	cmn.w	r0, #11
    733e:	bf08      	it	eq
    7340:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
    7344:	7963      	ldrb	r3, [r4, #5]
    7346:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
    7348:	f884 a004 	strb.w	sl, [r4, #4]
		block->id.level = level_num;
    734c:	f362 0303 	bfi	r3, r2, #0, #4
    7350:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
    7352:	6863      	ldr	r3, [r4, #4]
    7354:	9a03      	ldr	r2, [sp, #12]
    7356:	f362 331f 	bfi	r3, r2, #12, #20
    735a:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
    735c:	b1b0      	cbz	r0, 738c <k_mem_pool_alloc+0xb8>
    735e:	b1ad      	cbz	r5, 738c <k_mem_pool_alloc+0xb8>
    7360:	f110 0f0c 	cmn.w	r0, #12
    7364:	d112      	bne.n	738c <k_mem_pool_alloc+0xb8>
    7366:	f04f 0320 	mov.w	r3, #32
    736a:	f3ef 8011 	mrs	r0, BASEPRI
    736e:	f383 8811 	msr	BASEPRI, r3
		(void)_pend_current_thread(irq_lock(), &p->wait_q, timeout);
    7372:	462a      	mov	r2, r5
    7374:	4659      	mov	r1, fp
    7376:	f000 fae5 	bl	7944 <_pend_current_thread>

		if (timeout != K_FOREVER) {
    737a:	1c6b      	adds	r3, r5, #1
    737c:	d0cc      	beq.n	7318 <k_mem_pool_alloc+0x44>
			timeout = end - z_tick_get();
    737e:	f000 fe49 	bl	8014 <z_tick_get>

			if (timeout < 0) {
    7382:	ebb8 0500 	subs.w	r5, r8, r0
    7386:	d5c7      	bpl.n	7318 <k_mem_pool_alloc+0x44>
				break;
			}
		}
	}

	return -EAGAIN;
    7388:	f06f 000a 	mvn.w	r0, #10
}
    738c:	b005      	add	sp, #20
    738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
    7392:	f04f 0800 	mov.w	r8, #0
    7396:	e7b5      	b.n	7304 <k_mem_pool_alloc+0x30>
    7398:	0004ffff 	.word	0x0004ffff
    739c:	20002a0c 	.word	0x20002a0c
    73a0:	b6db6db7 	.word	0xb6db6db7

000073a4 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
    73a4:	b570      	push	{r4, r5, r6, lr}
    73a6:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
    73a8:	6802      	ldr	r2, [r0, #0]
    73aa:	7841      	ldrb	r1, [r0, #1]
    73ac:	4e13      	ldr	r6, [pc, #76]	; (73fc <k_mem_pool_free_id+0x58>)
    73ae:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    73b2:	00a4      	lsls	r4, r4, #2
    73b4:	0b12      	lsrs	r2, r2, #12
    73b6:	f001 010f 	and.w	r1, r1, #15
    73ba:	1930      	adds	r0, r6, r4
    73bc:	f7f9 fa35 	bl	82a <_sys_mem_pool_block_free>
    73c0:	f04f 0320 	mov.w	r3, #32
    73c4:	f3ef 8511 	mrs	r5, BASEPRI
    73c8:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
    73cc:	f104 0014 	add.w	r0, r4, #20
    73d0:	4430      	add	r0, r6
    73d2:	f000 fafc 	bl	79ce <_unpend_all>

	if (need_sched && !_is_in_isr()) {
    73d6:	b140      	cbz	r0, 73ea <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    73d8:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    73dc:	2b0d      	cmp	r3, #13
    73de:	d804      	bhi.n	73ea <k_mem_pool_free_id+0x46>
    73e0:	b133      	cbz	r3, 73f0 <k_mem_pool_free_id+0x4c>
    73e2:	4b07      	ldr	r3, [pc, #28]	; (7400 <k_mem_pool_free_id+0x5c>)
    73e4:	685b      	ldr	r3, [r3, #4]
    73e6:	051b      	lsls	r3, r3, #20
    73e8:	d402      	bmi.n	73f0 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    73ea:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
    73ee:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
    73f0:	4628      	mov	r0, r5
}
    73f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
    73f6:	f000 b973 	b.w	76e0 <_reschedule>
    73fa:	bf00      	nop
    73fc:	20002a0c 	.word	0x20002a0c
    7400:	e000ed00 	.word	0xe000ed00

00007404 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
    7404:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
    7406:	1d0a      	adds	r2, r1, #4
    7408:	d204      	bcs.n	7414 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
    740a:	2300      	movs	r3, #0
    740c:	4669      	mov	r1, sp
    740e:	f7ff ff61 	bl	72d4 <k_mem_pool_alloc>
    7412:	b118      	cbz	r0, 741c <k_mem_pool_malloc+0x18>
		return NULL;
    7414:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
    7416:	b003      	add	sp, #12
    7418:	f85d fb04 	ldr.w	pc, [sp], #4
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
    741c:	2204      	movs	r2, #4
    741e:	eb0d 0102 	add.w	r1, sp, r2
    7422:	9800      	ldr	r0, [sp, #0]
    7424:	f7fa fc52 	bl	1ccc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
    7428:	9800      	ldr	r0, [sp, #0]
    742a:	3004      	adds	r0, #4
    742c:	e7f3      	b.n	7416 <k_mem_pool_malloc+0x12>

0000742e <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
    742e:	b110      	cbz	r0, 7436 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
    7430:	3804      	subs	r0, #4
    7432:	f7ff bfb7 	b.w	73a4 <k_mem_pool_free_id>
    7436:	4770      	bx	lr

00007438 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
    7438:	4b03      	ldr	r3, [pc, #12]	; (7448 <z_thread_malloc+0x10>)
    743a:	689b      	ldr	r3, [r3, #8]
{
    743c:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
    743e:	6e18      	ldr	r0, [r3, #96]	; 0x60
    7440:	b108      	cbz	r0, 7446 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
    7442:	f7ff bfdf 	b.w	7404 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    7446:	4770      	bx	lr
    7448:	20000df4 	.word	0x20000df4

0000744c <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
    744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    744e:	4605      	mov	r5, r0
    7450:	460f      	mov	r7, r1
    7452:	4614      	mov	r4, r2
	__asm__ volatile(
    7454:	f04f 0220 	mov.w	r2, #32
    7458:	f3ef 8611 	mrs	r6, BASEPRI
    745c:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
    7460:	b1a3      	cbz	r3, 748c <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
    7462:	2008      	movs	r0, #8
    7464:	f7ff ffe8 	bl	7438 <z_thread_malloc>
		if (anode == NULL) {
    7468:	2800      	cmp	r0, #0
    746a:	d034      	beq.n	74d6 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0, "flags too large");
	node->next_and_flags = flags;
    746c:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
    746e:	6044      	str	r4, [r0, #4]
    7470:	6003      	str	r3, [r0, #0]
    7472:	4604      	mov	r4, r0
    7474:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    7476:	b95f      	cbnz	r7, 7490 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
    7478:	682a      	ldr	r2, [r5, #0]
    747a:	f003 0303 	and.w	r3, r3, #3
    747e:	4313      	orrs	r3, r2
    7480:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    7482:	686b      	ldr	r3, [r5, #4]
	list->head = node;
    7484:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    7486:	b973      	cbnz	r3, 74a6 <queue_insert+0x5a>
	list->tail = node;
    7488:	606c      	str	r4, [r5, #4]
    748a:	e00c      	b.n	74a6 <queue_insert+0x5a>
	node->next_and_flags = flags;
    748c:	6023      	str	r3, [r4, #0]
    748e:	e7f1      	b.n	7474 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7490:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    7492:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    7496:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    749a:	d114      	bne.n	74c6 <queue_insert+0x7a>
    749c:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
    749e:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    74a0:	b95a      	cbnz	r2, 74ba <queue_insert+0x6e>
	list->tail = node;
    74a2:	606c      	str	r4, [r5, #4]
	list->head = node;
    74a4:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
    74a6:	2104      	movs	r1, #4
    74a8:	f105 0008 	add.w	r0, r5, #8
    74ac:	f000 fefc 	bl	82a8 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
    74b0:	4630      	mov	r0, r6
    74b2:	f000 f915 	bl	76e0 <_reschedule>
	return 0;
    74b6:	2000      	movs	r0, #0
    74b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    74ba:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    74bc:	f003 0303 	and.w	r3, r3, #3
    74c0:	4323      	orrs	r3, r4
    74c2:	6013      	str	r3, [r2, #0]
    74c4:	e7e0      	b.n	7488 <queue_insert+0x3c>
    74c6:	4313      	orrs	r3, r2
    74c8:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    74ca:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    74cc:	f002 0203 	and.w	r2, r2, #3
    74d0:	4314      	orrs	r4, r2
    74d2:	603c      	str	r4, [r7, #0]
    74d4:	e7e7      	b.n	74a6 <queue_insert+0x5a>
			return -ENOMEM;
    74d6:	f06f 000b 	mvn.w	r0, #11
}
    74da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000074dc <z_queue_node_peek>:
{
    74dc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
    74de:	4604      	mov	r4, r0
    74e0:	b130      	cbz	r0, 74f0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    74e2:	6802      	ldr	r2, [r0, #0]
    74e4:	0793      	lsls	r3, r2, #30
    74e6:	d003      	beq.n	74f0 <z_queue_node_peek+0x14>
		ret = anode->data;
    74e8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    74ea:	b109      	cbz	r1, 74f0 <z_queue_node_peek+0x14>
			k_free(anode);
    74ec:	f7ff ff9f 	bl	742e <k_free>
}
    74f0:	4620      	mov	r0, r4
    74f2:	bd10      	pop	{r4, pc}

000074f4 <_impl_k_queue_init>:
	list->head = NULL;
    74f4:	2300      	movs	r3, #0
    74f6:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    74f8:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
    74fa:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    74fe:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    7500:	60c3      	str	r3, [r0, #12]
    7502:	4770      	bx	lr

00007504 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
    7504:	460a      	mov	r2, r1
    7506:	2300      	movs	r3, #0
    7508:	6841      	ldr	r1, [r0, #4]
    750a:	f7ff bf9f 	b.w	744c <queue_insert>

0000750e <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
    750e:	2300      	movs	r3, #0
    7510:	460a      	mov	r2, r1
    7512:	4619      	mov	r1, r3
    7514:	f7ff bf9a 	b.w	744c <queue_insert>

00007518 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    7518:	b538      	push	{r3, r4, r5, lr}
    751a:	f04f 0320 	mov.w	r3, #32
    751e:	f3ef 8511 	mrs	r5, BASEPRI
    7522:	f383 8811 	msr	BASEPRI, r3
    7526:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    7528:	b953      	cbnz	r3, 7540 <k_queue_append_list+0x28>
	list->head = node;
    752a:	6001      	str	r1, [r0, #0]
	list->tail = node;
    752c:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
    752e:	2104      	movs	r1, #4
    7530:	3008      	adds	r0, #8
    7532:	f000 feb9 	bl	82a8 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
    7536:	4628      	mov	r0, r5
}
    7538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    753c:	f000 b8d0 	b.w	76e0 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    7540:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    7542:	f004 0403 	and.w	r4, r4, #3
    7546:	4321      	orrs	r1, r4
    7548:	6019      	str	r1, [r3, #0]
    754a:	e7ef      	b.n	752c <k_queue_append_list+0x14>

0000754c <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
    754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7550:	4604      	mov	r4, r0
    7552:	b086      	sub	sp, #24
    7554:	460d      	mov	r5, r1
    7556:	f04f 0320 	mov.w	r3, #32
    755a:	f3ef 8711 	mrs	r7, BASEPRI
    755e:	f383 8811 	msr	BASEPRI, r3
    7562:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    7564:	b182      	cbz	r2, 7588 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7566:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7568:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    756a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    756e:	428a      	cmp	r2, r1
	list->head = node;
    7570:	6003      	str	r3, [r0, #0]
	list->tail = node;
    7572:	bf08      	it	eq
    7574:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    7576:	2101      	movs	r1, #1
    7578:	4610      	mov	r0, r2
    757a:	f7ff ffaf 	bl	74dc <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    757e:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    7582:	b006      	add	sp, #24
    7584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
    7588:	b919      	cbnz	r1, 7592 <_impl_k_queue_get+0x46>
    758a:	f387 8811 	msr	BASEPRI, r7
			return NULL;
    758e:	2000      	movs	r0, #0
    7590:	e7f7      	b.n	7582 <_impl_k_queue_get+0x36>
    7592:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    7596:	2104      	movs	r1, #4
    7598:	4603      	mov	r3, r0
    759a:	eb0d 0001 	add.w	r0, sp, r1
    759e:	f000 fde2 	bl	8166 <k_poll_event_init>
	if (timeout != K_FOREVER) {
    75a2:	1c6a      	adds	r2, r5, #1
    75a4:	d002      	beq.n	75ac <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    75a6:	f000 fd4f 	bl	8048 <_impl_k_uptime_get_32>
    75aa:	4606      	mov	r6, r0
{
    75ac:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
    75ae:	9b04      	ldr	r3, [sp, #16]

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    75b0:	1bea      	subs	r2, r5, r7
    75b2:	f36f 3310 	bfc	r3, #12, #5
    75b6:	2101      	movs	r1, #1
    75b8:	a801      	add	r0, sp, #4
    75ba:	9304      	str	r3, [sp, #16]
    75bc:	f000 fde8 	bl	8190 <_impl_k_poll>
		if (err && err != -EAGAIN) {
    75c0:	b108      	cbz	r0, 75c6 <_impl_k_queue_get+0x7a>
    75c2:	300b      	adds	r0, #11
    75c4:	d1e3      	bne.n	758e <_impl_k_queue_get+0x42>
	__asm__ volatile(
    75c6:	f04f 0320 	mov.w	r3, #32
    75ca:	f3ef 8811 	mrs	r8, BASEPRI
    75ce:	f383 8811 	msr	BASEPRI, r3
    75d2:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
    75d4:	b138      	cbz	r0, 75e6 <_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    75d6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    75d8:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    75da:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    75de:	4290      	cmp	r0, r2
	list->head = node;
    75e0:	6023      	str	r3, [r4, #0]
	list->tail = node;
    75e2:	bf08      	it	eq
    75e4:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
    75e6:	2101      	movs	r1, #1
    75e8:	f7ff ff78 	bl	74dc <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    75ec:	f388 8811 	msr	BASEPRI, r8
		if ((val == NULL) && (timeout != K_FOREVER)) {
    75f0:	2800      	cmp	r0, #0
    75f2:	d1c6      	bne.n	7582 <_impl_k_queue_get+0x36>
    75f4:	1c6b      	adds	r3, r5, #1
    75f6:	d0da      	beq.n	75ae <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    75f8:	f000 fd26 	bl	8048 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
    75fc:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
    75fe:	42bd      	cmp	r5, r7
    7600:	dad5      	bge.n	75ae <_impl_k_queue_get+0x62>
    7602:	e7c4      	b.n	758e <_impl_k_queue_get+0x42>

00007604 <sys_dlist_remove>:
	node->prev->next = node->next;
    7604:	e890 000c 	ldmia.w	r0, {r2, r3}
    7608:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    760a:	6802      	ldr	r2, [r0, #0]
    760c:	6053      	str	r3, [r2, #4]
	node->next = NULL;
    760e:	2300      	movs	r3, #0
    7610:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    7612:	6043      	str	r3, [r0, #4]
    7614:	4770      	bx	lr
	...

00007618 <reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

static void reset_time_slice(void)
{
    7618:	b508      	push	{r3, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    761a:	f7f9 ff67 	bl	14ec <z_clock_elapsed>
    761e:	4b05      	ldr	r3, [pc, #20]	; (7634 <reset_time_slice+0x1c>)
    7620:	4a05      	ldr	r2, [pc, #20]	; (7638 <reset_time_slice+0x20>)
    7622:	681b      	ldr	r3, [r3, #0]
    7624:	4418      	add	r0, r3
    7626:	6110      	str	r0, [r2, #16]

	z_set_timeout_expiry(slice_time, false);
    7628:	2100      	movs	r1, #0
    762a:	4618      	mov	r0, r3
}
    762c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
    7630:	f000 bc90 	b.w	7f54 <z_set_timeout_expiry>
    7634:	20000e2c 	.word	0x20000e2c
    7638:	20000df4 	.word	0x20000df4

0000763c <k_spin_lock.isra.10>:
	__asm__ volatile(
    763c:	f04f 0320 	mov.w	r3, #32
    7640:	f3ef 8011 	mrs	r0, BASEPRI
    7644:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
    7648:	4770      	bx	lr

0000764a <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
    764a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    764e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
    7652:	4298      	cmp	r0, r3
    7654:	bfac      	ite	ge
    7656:	2000      	movge	r0, #0
    7658:	2001      	movlt	r0, #1
    765a:	4770      	bx	lr

0000765c <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    765e:	460d      	mov	r5, r1
    7660:	4607      	mov	r7, r0
	LOCKED(&sched_lock) {
    7662:	f7ff ffeb 	bl	763c <k_spin_lock.isra.10>
		_current_cpu->slice_ticks = 0;
    7666:	4b0c      	ldr	r3, [pc, #48]	; (7698 <k_sched_time_slice_set+0x3c>)
	LOCKED(&sched_lock) {
    7668:	4604      	mov	r4, r0
    766a:	480c      	ldr	r0, [pc, #48]	; (769c <k_sched_time_slice_set+0x40>)
		_current_cpu->slice_ticks = 0;
    766c:	2200      	movs	r2, #0
    766e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7672:	2100      	movs	r1, #0
    7674:	611a      	str	r2, [r3, #16]
    7676:	fbc6 0107 	smlal	r0, r1, r6, r7
    767a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    767e:	2300      	movs	r3, #0
    7680:	f7f8 fd4a 	bl	118 <__aeabi_ldivmod>
    7684:	4b06      	ldr	r3, [pc, #24]	; (76a0 <k_sched_time_slice_set+0x44>)
    7686:	6018      	str	r0, [r3, #0]
		slice_time = _ms_to_ticks(slice);
		slice_max_prio = prio;
    7688:	4b06      	ldr	r3, [pc, #24]	; (76a4 <k_sched_time_slice_set+0x48>)
    768a:	601d      	str	r5, [r3, #0]
		reset_time_slice();
    768c:	f7ff ffc4 	bl	7618 <reset_time_slice>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7690:	f384 8811 	msr	BASEPRI, r4
    7694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7696:	bf00      	nop
    7698:	20000df4 	.word	0x20000df4
    769c:	0004ffff 	.word	0x0004ffff
    76a0:	20000e2c 	.word	0x20000e2c
    76a4:	20000e28 	.word	0x20000e28

000076a8 <_unpend_thread_no_timeout>:

	return ret;
}

void _unpend_thread_no_timeout(struct k_thread *thread)
{
    76a8:	b510      	push	{r4, lr}
    76aa:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    76ac:	f7ff ffc6 	bl	763c <k_spin_lock.isra.10>
    76b0:	4604      	mov	r4, r0

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    76b2:	4608      	mov	r0, r1
    76b4:	f7ff ffa6 	bl	7604 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    76b8:	7b4b      	ldrb	r3, [r1, #13]
    76ba:	f023 0302 	bic.w	r3, r3, #2
    76be:	734b      	strb	r3, [r1, #13]
    76c0:	f384 8811 	msr	BASEPRI, r4
	thread->base.pended_on = NULL;
    76c4:	2300      	movs	r3, #0
    76c6:	608b      	str	r3, [r1, #8]
    76c8:	bd10      	pop	{r4, pc}

000076ca <_unpend_thread>:
{
    76ca:	b510      	push	{r4, lr}
    76cc:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
    76ce:	f7ff ffeb 	bl	76a8 <_unpend_thread_no_timeout>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    76d2:	f104 0018 	add.w	r0, r4, #24
}
    76d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76da:	f000 bc21 	b.w	7f20 <_abort_timeout>
	...

000076e0 <_reschedule>:
    76e0:	f3ef 8305 	mrs	r3, IPSR
    76e4:	2b0d      	cmp	r3, #13
    76e6:	d809      	bhi.n	76fc <_reschedule+0x1c>
    76e8:	b11b      	cbz	r3, 76f2 <_reschedule+0x12>
    76ea:	4b07      	ldr	r3, [pc, #28]	; (7708 <_reschedule+0x28>)
    76ec:	685b      	ldr	r3, [r3, #4]
    76ee:	051b      	lsls	r3, r3, #20
    76f0:	d504      	bpl.n	76fc <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
    76f2:	4b06      	ldr	r3, [pc, #24]	; (770c <_reschedule+0x2c>)
    76f4:	689a      	ldr	r2, [r3, #8]
    76f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76f8:	429a      	cmp	r2, r3
    76fa:	d102      	bne.n	7702 <_reschedule+0x22>
    76fc:	f380 8811 	msr	BASEPRI, r0
    7700:	4770      	bx	lr
    7702:	f7f9 bf3d 	b.w	1580 <__swap>
    7706:	bf00      	nop
    7708:	e000ed00 	.word	0xe000ed00
    770c:	20000df4 	.word	0x20000df4

00007710 <_priq_dumb_add>:
{
    7710:	b510      	push	{r4, lr}
	return list->head == list;
    7712:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7714:	4298      	cmp	r0, r3
    7716:	bf08      	it	eq
    7718:	2300      	moveq	r3, #0
    771a:	b193      	cbz	r3, 7742 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
    771c:	f991 400e 	ldrsb.w	r4, [r1, #14]
    7720:	f993 200e 	ldrsb.w	r2, [r3, #14]
    7724:	4294      	cmp	r4, r2
    7726:	da06      	bge.n	7736 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
    7728:	685a      	ldr	r2, [r3, #4]
    772a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    772c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    772e:	685a      	ldr	r2, [r3, #4]
    7730:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    7732:	6059      	str	r1, [r3, #4]
    7734:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
    7736:	6842      	ldr	r2, [r0, #4]
    7738:	4293      	cmp	r3, r2
    773a:	d002      	beq.n	7742 <_priq_dumb_add+0x32>
    773c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    773e:	2b00      	cmp	r3, #0
    7740:	d1eb      	bne.n	771a <_priq_dumb_add+0xa>
	node->next = list;
    7742:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    7744:	6843      	ldr	r3, [r0, #4]
    7746:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    7748:	6843      	ldr	r3, [r0, #4]
    774a:	6019      	str	r1, [r3, #0]
	list->tail = node;
    774c:	6041      	str	r1, [r0, #4]
    774e:	bd10      	pop	{r4, pc}

00007750 <_priq_dumb_best>:
	return list->head == list;
    7750:	6803      	ldr	r3, [r0, #0]

	if (n != NULL) {
		t = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return t;
}
    7752:	4298      	cmp	r0, r3
    7754:	bf14      	ite	ne
    7756:	4618      	movne	r0, r3
    7758:	2000      	moveq	r0, #0
    775a:	4770      	bx	lr

0000775c <update_cache>:
{
    775c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    775e:	4c10      	ldr	r4, [pc, #64]	; (77a0 <update_cache+0x44>)
{
    7760:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    7762:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7766:	f7ff fff3 	bl	7750 <_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    776a:	4605      	mov	r5, r0
    776c:	b900      	cbnz	r0, 7770 <update_cache+0x14>
    776e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    7770:	b96a      	cbnz	r2, 778e <update_cache+0x32>
	if (!_current || _is_thread_prevented_from_running(_current)) {
    7772:	68a3      	ldr	r3, [r4, #8]
    7774:	b15b      	cbz	r3, 778e <update_cache+0x32>
    7776:	7b5a      	ldrb	r2, [r3, #13]
    7778:	06d2      	lsls	r2, r2, #27
    777a:	d108      	bne.n	778e <update_cache+0x32>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    777c:	69aa      	ldr	r2, [r5, #24]
    777e:	b932      	cbnz	r2, 778e <update_cache+0x32>
	if (_is_preempt(_current) || is_metairq(th)) {
    7780:	89da      	ldrh	r2, [r3, #14]
    7782:	2a7f      	cmp	r2, #127	; 0x7f
    7784:	d903      	bls.n	778e <update_cache+0x32>
	return thread == _idle_thread;
    7786:	4a07      	ldr	r2, [pc, #28]	; (77a4 <update_cache+0x48>)
	if (_is_idle(_current)) {
    7788:	6812      	ldr	r2, [r2, #0]
    778a:	4293      	cmp	r3, r2
    778c:	d106      	bne.n	779c <update_cache+0x40>
		if (th != _current) {
    778e:	68a3      	ldr	r3, [r4, #8]
    7790:	42ab      	cmp	r3, r5
    7792:	d001      	beq.n	7798 <update_cache+0x3c>
			reset_time_slice();
    7794:	f7ff ff40 	bl	7618 <reset_time_slice>
		_kernel.ready_q.cache = th;
    7798:	6265      	str	r5, [r4, #36]	; 0x24
}
    779a:	bd38      	pop	{r3, r4, r5, pc}
		_kernel.ready_q.cache = _current;
    779c:	6263      	str	r3, [r4, #36]	; 0x24
    779e:	bd38      	pop	{r3, r4, r5, pc}
    77a0:	20000df4 	.word	0x20000df4
    77a4:	00008ab8 	.word	0x00008ab8

000077a8 <_add_thread_to_ready_q>:
{
    77a8:	b538      	push	{r3, r4, r5, lr}
    77aa:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    77ac:	f7ff ff46 	bl	763c <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    77b0:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
    77b2:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
    77b4:	4806      	ldr	r0, [pc, #24]	; (77d0 <_add_thread_to_ready_q+0x28>)
    77b6:	f7ff ffab 	bl	7710 <_priq_dumb_add>
	thread->base.thread_state |= states;
    77ba:	7b63      	ldrb	r3, [r4, #13]
    77bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    77c0:	7363      	strb	r3, [r4, #13]
		update_cache(0);
    77c2:	2000      	movs	r0, #0
    77c4:	f7ff ffca 	bl	775c <update_cache>
    77c8:	f385 8811 	msr	BASEPRI, r5
    77cc:	bd38      	pop	{r3, r4, r5, pc}
    77ce:	bf00      	nop
    77d0:	20000e1c 	.word	0x20000e1c

000077d4 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    77d4:	7b42      	ldrb	r2, [r0, #13]
    77d6:	06d2      	lsls	r2, r2, #27
    77d8:	d103      	bne.n	77e2 <_ready_thread+0xe>
    77da:	6983      	ldr	r3, [r0, #24]
	if (_is_thread_ready(thread)) {
    77dc:	b90b      	cbnz	r3, 77e2 <_ready_thread+0xe>
		_add_thread_to_ready_q(thread);
    77de:	f7ff bfe3 	b.w	77a8 <_add_thread_to_ready_q>
    77e2:	4770      	bx	lr

000077e4 <z_thread_timeout>:
{
    77e4:	b538      	push	{r3, r4, r5, lr}
	if (th->base.pended_on != NULL) {
    77e6:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    77ea:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    77ec:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    77f0:	b113      	cbz	r3, 77f8 <z_thread_timeout+0x14>
		_unpend_thread_no_timeout(th);
    77f2:	4628      	mov	r0, r5
    77f4:	f7ff ff58 	bl	76a8 <_unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    77f8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    77fc:	f023 0304 	bic.w	r3, r3, #4
    7800:	f804 3c0b 	strb.w	r3, [r4, #-11]
	_ready_thread(th);
    7804:	4628      	mov	r0, r5
}
    7806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_ready_thread(th);
    780a:	f7ff bfe3 	b.w	77d4 <_ready_thread>
	...

00007810 <_move_thread_to_end_of_prio_q>:
{
    7810:	b570      	push	{r4, r5, r6, lr}
    7812:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    7814:	f7ff ff12 	bl	763c <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    7818:	4d0b      	ldr	r5, [pc, #44]	; (7848 <_move_thread_to_end_of_prio_q+0x38>)
	LOCKED(&sched_lock) {
    781a:	4606      	mov	r6, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    781c:	4620      	mov	r0, r4
    781e:	f7ff fef1 	bl	7604 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    7822:	4621      	mov	r1, r4
    7824:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7828:	f7ff ff72 	bl	7710 <_priq_dumb_add>
	thread->base.thread_state |= states;
    782c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    782e:	68a8      	ldr	r0, [r5, #8]
    7830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7834:	7363      	strb	r3, [r4, #13]
    7836:	1b03      	subs	r3, r0, r4
    7838:	4258      	negs	r0, r3
    783a:	4158      	adcs	r0, r3
    783c:	f7ff ff8e 	bl	775c <update_cache>
    7840:	f386 8811 	msr	BASEPRI, r6
    7844:	bd70      	pop	{r4, r5, r6, pc}
    7846:	bf00      	nop
    7848:	20000df4 	.word	0x20000df4

0000784c <z_time_slice>:
{
    784c:	b510      	push	{r4, lr}
	if (pending_current == _current) {
    784e:	4915      	ldr	r1, [pc, #84]	; (78a4 <z_time_slice+0x58>)
    7850:	4c15      	ldr	r4, [pc, #84]	; (78a8 <z_time_slice+0x5c>)
    7852:	688b      	ldr	r3, [r1, #8]
    7854:	6822      	ldr	r2, [r4, #0]
    7856:	4293      	cmp	r3, r2
    7858:	f04f 0200 	mov.w	r2, #0
		pending_current = NULL;
    785c:	6022      	str	r2, [r4, #0]
	if (pending_current == _current) {
    785e:	d103      	bne.n	7868 <z_time_slice+0x1c>
}
    7860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
    7864:	f7ff bed8 	b.w	7618 <reset_time_slice>
	if (slice_time && sliceable(_current)) {
    7868:	4a10      	ldr	r2, [pc, #64]	; (78ac <z_time_slice+0x60>)
    786a:	6812      	ldr	r2, [r2, #0]
    786c:	b1c2      	cbz	r2, 78a0 <z_time_slice+0x54>
		&& !_is_thread_timeout_active(t);
    786e:	89da      	ldrh	r2, [r3, #14]
    7870:	2a7f      	cmp	r2, #127	; 0x7f
    7872:	d815      	bhi.n	78a0 <z_time_slice+0x54>
		&& !_is_prio_higher(t->base.prio, slice_max_prio)
    7874:	4a0e      	ldr	r2, [pc, #56]	; (78b0 <z_time_slice+0x64>)
    7876:	f993 400e 	ldrsb.w	r4, [r3, #14]
    787a:	6812      	ldr	r2, [r2, #0]
    787c:	4294      	cmp	r4, r2
    787e:	db0f      	blt.n	78a0 <z_time_slice+0x54>
	return thread == _idle_thread;
    7880:	4a0c      	ldr	r2, [pc, #48]	; (78b4 <z_time_slice+0x68>)
		&& !_is_idle(t)
    7882:	6812      	ldr	r2, [r2, #0]
    7884:	4293      	cmp	r3, r2
    7886:	d00b      	beq.n	78a0 <z_time_slice+0x54>
		&& !_is_thread_timeout_active(t);
    7888:	699a      	ldr	r2, [r3, #24]
    788a:	b94a      	cbnz	r2, 78a0 <z_time_slice+0x54>
		if (ticks >= _current_cpu->slice_ticks) {
    788c:	690a      	ldr	r2, [r1, #16]
    788e:	4282      	cmp	r2, r0
    7890:	dc03      	bgt.n	789a <z_time_slice+0x4e>
			_move_thread_to_end_of_prio_q(_current);
    7892:	4618      	mov	r0, r3
    7894:	f7ff ffbc 	bl	7810 <_move_thread_to_end_of_prio_q>
    7898:	e7e2      	b.n	7860 <z_time_slice+0x14>
			_current_cpu->slice_ticks -= ticks;
    789a:	1a12      	subs	r2, r2, r0
    789c:	610a      	str	r2, [r1, #16]
    789e:	bd10      	pop	{r4, pc}
    78a0:	bd10      	pop	{r4, pc}
    78a2:	bf00      	nop
    78a4:	20000df4 	.word	0x20000df4
    78a8:	20000e24 	.word	0x20000e24
    78ac:	20000e2c 	.word	0x20000e2c
    78b0:	20000e28 	.word	0x20000e28
    78b4:	00008ab8 	.word	0x00008ab8

000078b8 <_remove_thread_from_ready_q>:
{
    78b8:	b510      	push	{r4, lr}
    78ba:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    78bc:	f7ff febe 	bl	763c <k_spin_lock.isra.10>
		if (_is_thread_queued(thread)) {
    78c0:	7b4b      	ldrb	r3, [r1, #13]
    78c2:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
    78c4:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
    78c6:	d50d      	bpl.n	78e4 <_remove_thread_from_ready_q+0x2c>
	sys_dlist_remove(&thread->base.qnode_dlist);
    78c8:	4608      	mov	r0, r1
    78ca:	f7ff fe9b 	bl	7604 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
    78ce:	7b4b      	ldrb	r3, [r1, #13]
    78d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    78d4:	734b      	strb	r3, [r1, #13]
			update_cache(thread == _current);
    78d6:	4b05      	ldr	r3, [pc, #20]	; (78ec <_remove_thread_from_ready_q+0x34>)
    78d8:	6898      	ldr	r0, [r3, #8]
    78da:	1a43      	subs	r3, r0, r1
    78dc:	4258      	negs	r0, r3
    78de:	4158      	adcs	r0, r3
    78e0:	f7ff ff3c 	bl	775c <update_cache>
    78e4:	f384 8811 	msr	BASEPRI, r4
    78e8:	bd10      	pop	{r4, pc}
    78ea:	bf00      	nop
    78ec:	20000df4 	.word	0x20000df4

000078f0 <pend>:
{
    78f0:	b570      	push	{r4, r5, r6, lr}
    78f2:	4604      	mov	r4, r0
    78f4:	460d      	mov	r5, r1
    78f6:	4616      	mov	r6, r2
	_remove_thread_from_ready_q(thread);
    78f8:	f7ff ffde 	bl	78b8 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    78fc:	7b63      	ldrb	r3, [r4, #13]
    78fe:	f043 0302 	orr.w	r3, r3, #2
    7902:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7904:	b125      	cbz	r5, 7910 <pend+0x20>
		thread->base.pended_on = wait_q;
    7906:	60a5      	str	r5, [r4, #8]
		_priq_wait_add(&wait_q->waitq, thread);
    7908:	4621      	mov	r1, r4
    790a:	4628      	mov	r0, r5
    790c:	f7ff ff00 	bl	7710 <_priq_dumb_add>
	if (timeout != K_FOREVER) {
    7910:	1c73      	adds	r3, r6, #1
    7912:	d012      	beq.n	793a <pend+0x4a>
    7914:	4809      	ldr	r0, [pc, #36]	; (793c <pend+0x4c>)
    7916:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    791a:	2100      	movs	r1, #0
    791c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    7920:	fbc5 0106 	smlal	r0, r1, r5, r6
    7924:	2300      	movs	r3, #0
    7926:	f7f8 fbf7 	bl	118 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    792a:	4905      	ldr	r1, [pc, #20]	; (7940 <pend+0x50>)
    792c:	1c42      	adds	r2, r0, #1
    792e:	f104 0018 	add.w	r0, r4, #24
}
    7932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7936:	f000 bab7 	b.w	7ea8 <_add_timeout>
    793a:	bd70      	pop	{r4, r5, r6, pc}
    793c:	0004ffff 	.word	0x0004ffff
    7940:	000077e5 	.word	0x000077e5

00007944 <_pend_current_thread>:
{
    7944:	b510      	push	{r4, lr}
	pending_current = _current;
    7946:	4b06      	ldr	r3, [pc, #24]	; (7960 <_pend_current_thread+0x1c>)
{
    7948:	4604      	mov	r4, r0
	pending_current = _current;
    794a:	6898      	ldr	r0, [r3, #8]
    794c:	4b05      	ldr	r3, [pc, #20]	; (7964 <_pend_current_thread+0x20>)
    794e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    7950:	f7ff ffce 	bl	78f0 <pend>
    7954:	4620      	mov	r0, r4
}
    7956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    795a:	f7f9 be11 	b.w	1580 <__swap>
    795e:	bf00      	nop
    7960:	20000df4 	.word	0x20000df4
    7964:	20000e24 	.word	0x20000e24

00007968 <k_sched_unlock>:
{
    7968:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
    796a:	f7ff fe67 	bl	763c <k_spin_lock.isra.10>
		++_current->base.sched_locked;
    796e:	4b0a      	ldr	r3, [pc, #40]	; (7998 <k_sched_unlock+0x30>)
    7970:	689a      	ldr	r2, [r3, #8]
    7972:	7bd3      	ldrb	r3, [r2, #15]
    7974:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
    7976:	4604      	mov	r4, r0
		++_current->base.sched_locked;
    7978:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    797a:	2001      	movs	r0, #1
    797c:	f7ff feee 	bl	775c <update_cache>
    7980:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
    7984:	f04f 0320 	mov.w	r3, #32
    7988:	f3ef 8011 	mrs	r0, BASEPRI
    798c:	f383 8811 	msr	BASEPRI, r3
}
    7990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
    7994:	f7ff bea4 	b.w	76e0 <_reschedule>
    7998:	20000df4 	.word	0x20000df4

0000799c <_find_first_thread_to_unpend>:
{
    799c:	b508      	push	{r3, lr}
    799e:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    79a0:	f7ff fe4c 	bl	763c <k_spin_lock.isra.10>
    79a4:	4602      	mov	r2, r0
		ret = _priq_wait_best(&wait_q->waitq);
    79a6:	4608      	mov	r0, r1
    79a8:	f7ff fed2 	bl	7750 <_priq_dumb_best>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    79ac:	f382 8811 	msr	BASEPRI, r2
}
    79b0:	bd08      	pop	{r3, pc}

000079b2 <_unpend_first_thread>:
{
    79b2:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    79b4:	2100      	movs	r1, #0
    79b6:	f7ff fff1 	bl	799c <_find_first_thread_to_unpend>

	if (thread != NULL) {
    79ba:	4604      	mov	r4, r0
    79bc:	b128      	cbz	r0, 79ca <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
    79be:	f7ff fe73 	bl	76a8 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
    79c2:	f104 0018 	add.w	r0, r4, #24
    79c6:	f000 faab 	bl	7f20 <_abort_timeout>
}
    79ca:	4620      	mov	r0, r4
    79cc:	bd10      	pop	{r4, pc}

000079ce <_unpend_all>:
	}
	return t;
}

int _unpend_all(_wait_q_t *wait_q)
{
    79ce:	b538      	push	{r3, r4, r5, lr}
    79d0:	4605      	mov	r5, r0
	int need_sched = 0;
    79d2:	2000      	movs	r0, #0
    79d4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79d6:	42a5      	cmp	r5, r4
    79d8:	d000      	beq.n	79dc <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(wait_q)) != NULL) {
    79da:	b904      	cbnz	r4, 79de <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
    79dc:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
    79de:	4620      	mov	r0, r4
    79e0:	f7ff fe73 	bl	76ca <_unpend_thread>
		_ready_thread(th);
    79e4:	4620      	mov	r0, r4
    79e6:	f7ff fef5 	bl	77d4 <_ready_thread>
		need_sched = 1;
    79ea:	2001      	movs	r0, #1
    79ec:	e7f2      	b.n	79d4 <_unpend_all+0x6>
	...

000079f0 <_sched_init>:
	list->head = (sys_dnode_t *)list;
    79f0:	4b04      	ldr	r3, [pc, #16]	; (7a04 <_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    79f2:	2100      	movs	r1, #0
    79f4:	f103 0228 	add.w	r2, r3, #40	; 0x28
    79f8:	629a      	str	r2, [r3, #40]	; 0x28
	list->tail = (sys_dnode_t *)list;
    79fa:	62da      	str	r2, [r3, #44]	; 0x2c
    79fc:	4608      	mov	r0, r1
    79fe:	f7ff be2d 	b.w	765c <k_sched_time_slice_set>
    7a02:	bf00      	nop
    7a04:	20000df4 	.word	0x20000df4

00007a08 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
    7a08:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
    7a0a:	4c12      	ldr	r4, [pc, #72]	; (7a54 <_impl_k_yield+0x4c>)
    7a0c:	4b12      	ldr	r3, [pc, #72]	; (7a58 <_impl_k_yield+0x50>)
    7a0e:	68a2      	ldr	r2, [r4, #8]
    7a10:	681b      	ldr	r3, [r3, #0]
    7a12:	429a      	cmp	r2, r3
    7a14:	d00f      	beq.n	7a36 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
    7a16:	f7ff fe11 	bl	763c <k_spin_lock.isra.10>
    7a1a:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    7a1c:	68a0      	ldr	r0, [r4, #8]
    7a1e:	f7ff fdf1 	bl	7604 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
    7a22:	68a1      	ldr	r1, [r4, #8]
    7a24:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7a28:	f7ff fe72 	bl	7710 <_priq_dumb_add>
			update_cache(1);
    7a2c:	2001      	movs	r0, #1
    7a2e:	f7ff fe95 	bl	775c <update_cache>
    7a32:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	(void)_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
    7a36:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7a38:	68a3      	ldr	r3, [r4, #8]
    7a3a:	429a      	cmp	r2, r3
    7a3c:	d009      	beq.n	7a52 <_impl_k_yield+0x4a>
	__asm__ volatile(
    7a3e:	f04f 0320 	mov.w	r3, #32
    7a42:	f3ef 8011 	mrs	r0, BASEPRI
    7a46:	f383 8811 	msr	BASEPRI, r3
		(void)_Swap(irq_lock());
	}
#endif
}
    7a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7a4e:	f7f9 bd97 	b.w	1580 <__swap>
    7a52:	bd38      	pop	{r3, r4, r5, pc}
    7a54:	20000df4 	.word	0x20000df4
    7a58:	00008ab8 	.word	0x00008ab8

00007a5c <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t _impl_k_sleep(s32_t duration)
{
    7a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    7a5e:	4604      	mov	r4, r0
    7a60:	b918      	cbnz	r0, 7a6a <_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    7a62:	f7ff ffd1 	bl	7a08 <_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
    7a66:	4620      	mov	r0, r4
    7a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a6a:	4819      	ldr	r0, [pc, #100]	; (7ad0 <_impl_k_sleep+0x74>)
    7a6c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    7a70:	2100      	movs	r1, #0
    7a72:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    7a76:	2300      	movs	r3, #0
    7a78:	fbc5 0104 	smlal	r0, r1, r5, r4
    7a7c:	f7f8 fb4c 	bl	118 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    7a80:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    7a82:	f000 fadd 	bl	8040 <z_tick_get_32>
    7a86:	182c      	adds	r4, r5, r0
    7a88:	f04f 0320 	mov.w	r3, #32
    7a8c:	f3ef 8711 	mrs	r7, BASEPRI
    7a90:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    7a94:	4e0f      	ldr	r6, [pc, #60]	; (7ad4 <_impl_k_sleep+0x78>)
    7a96:	68b0      	ldr	r0, [r6, #8]
    7a98:	f7ff ff0e 	bl	78b8 <_remove_thread_from_ready_q>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    7a9c:	68b0      	ldr	r0, [r6, #8]
    7a9e:	490e      	ldr	r1, [pc, #56]	; (7ad8 <_impl_k_sleep+0x7c>)
    7aa0:	462a      	mov	r2, r5
    7aa2:	3018      	adds	r0, #24
    7aa4:	f000 fa00 	bl	7ea8 <_add_timeout>
    7aa8:	4638      	mov	r0, r7
    7aaa:	f7f9 fd69 	bl	1580 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
    7aae:	f000 fac7 	bl	8040 <z_tick_get_32>
    7ab2:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
    7ab4:	2800      	cmp	r0, #0
    7ab6:	dd09      	ble.n	7acc <_impl_k_sleep+0x70>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    7ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7abc:	2264      	movs	r2, #100	; 0x64
    7abe:	2300      	movs	r3, #0
    7ac0:	fb80 0101 	smull	r0, r1, r0, r1
    7ac4:	f7f8 fb78 	bl	1b8 <__aeabi_uldivmod>
    7ac8:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
    7aca:	e7cc      	b.n	7a66 <_impl_k_sleep+0xa>
	return 0;
    7acc:	2400      	movs	r4, #0
    7ace:	e7ca      	b.n	7a66 <_impl_k_sleep+0xa>
    7ad0:	0004ffff 	.word	0x0004ffff
    7ad4:	20000df4 	.word	0x20000df4
    7ad8:	000077e5 	.word	0x000077e5

00007adc <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
    7adc:	4b01      	ldr	r3, [pc, #4]	; (7ae4 <_impl_k_current_get+0x8>)
    7ade:	6898      	ldr	r0, [r3, #8]
    7ae0:	4770      	bx	lr
    7ae2:	bf00      	nop
    7ae4:	20000df4 	.word	0x20000df4

00007ae8 <_impl_k_sem_init>:
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    7ae8:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    7aec:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    7aee:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    7af0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    7af2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    7af4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    7af6:	6143      	str	r3, [r0, #20]
    7af8:	4770      	bx	lr

00007afa <_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void _impl_k_sem_give(struct k_sem *sem)
{
    7afa:	b570      	push	{r4, r5, r6, lr}
    7afc:	4604      	mov	r4, r0
    7afe:	f04f 0320 	mov.w	r3, #32
    7b02:	f3ef 8611 	mrs	r6, BASEPRI
    7b06:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    7b0a:	f7ff ff52 	bl	79b2 <_unpend_first_thread>
	if (thread != NULL) {
    7b0e:	4605      	mov	r5, r0
    7b10:	b168      	cbz	r0, 7b2e <_impl_k_sem_give+0x34>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    7b12:	7b43      	ldrb	r3, [r0, #13]
    7b14:	06db      	lsls	r3, r3, #27
    7b16:	d103      	bne.n	7b20 <_impl_k_sem_give+0x26>
    7b18:	6983      	ldr	r3, [r0, #24]
	if (_is_thread_ready(thread)) {
    7b1a:	b90b      	cbnz	r3, 7b20 <_impl_k_sem_give+0x26>
		_add_thread_to_ready_q(thread);
    7b1c:	f7ff fe44 	bl	77a8 <_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7b20:	2300      	movs	r3, #0
    7b22:	66ab      	str	r3, [r5, #104]	; 0x68
	u32_t key = irq_lock();

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	_reschedule(key);
    7b24:	4630      	mov	r0, r6
}
    7b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
    7b2a:	f7ff bdd9 	b.w	76e0 <_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7b2e:	68a3      	ldr	r3, [r4, #8]
    7b30:	68e2      	ldr	r2, [r4, #12]
    7b32:	429a      	cmp	r2, r3
    7b34:	bf18      	it	ne
    7b36:	3301      	addne	r3, #1
    7b38:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    7b3a:	2102      	movs	r1, #2
    7b3c:	f104 0010 	add.w	r0, r4, #16
    7b40:	f000 fbb2 	bl	82a8 <_handle_obj_poll_events>
    7b44:	e7ee      	b.n	7b24 <_impl_k_sem_give+0x2a>

00007b46 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    7b46:	b410      	push	{r4}
    7b48:	460a      	mov	r2, r1
    7b4a:	4604      	mov	r4, r0
    7b4c:	f04f 0320 	mov.w	r3, #32
    7b50:	f3ef 8011 	mrs	r0, BASEPRI
    7b54:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(((_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	u32_t key = irq_lock();

	if (likely(sem->count > 0U)) {
    7b58:	68a3      	ldr	r3, [r4, #8]
    7b5a:	b133      	cbz	r3, 7b6a <_impl_k_sem_take+0x24>
		sem->count--;
    7b5c:	3b01      	subs	r3, #1
    7b5e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7b60:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    7b64:	2000      	movs	r0, #0
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
    7b66:	bc10      	pop	{r4}
    7b68:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    7b6a:	b921      	cbnz	r1, 7b76 <_impl_k_sem_take+0x30>
    7b6c:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
    7b70:	f06f 000f 	mvn.w	r0, #15
    7b74:	e7f7      	b.n	7b66 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
    7b76:	4621      	mov	r1, r4
}
    7b78:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
    7b7a:	f7ff bee3 	b.w	7944 <_pend_current_thread>
	...

00007b80 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    7b80:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    7b82:	4c08      	ldr	r4, [pc, #32]	; (7ba4 <k_sys_work_q_init+0x24>)
    7b84:	4908      	ldr	r1, [pc, #32]	; (7ba8 <k_sys_work_q_init+0x28>)
    7b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7b8e:	4620      	mov	r0, r4
    7b90:	f000 f916 	bl	7dc0 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    7b94:	f104 0010 	add.w	r0, r4, #16
    7b98:	4904      	ldr	r1, [pc, #16]	; (7bac <k_sys_work_q_init+0x2c>)
    7b9a:	f000 f84b 	bl	7c34 <_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    7b9e:	2000      	movs	r0, #0
    7ba0:	bd10      	pop	{r4, pc}
    7ba2:	bf00      	nop
    7ba4:	20000e30 	.word	0x20000e30
    7ba8:	200023b8 	.word	0x200023b8
    7bac:	00008afb 	.word	0x00008afb

00007bb0 <schedule_new_thread.part.8>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    7bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bb2:	4605      	mov	r5, r0
    7bb4:	460f      	mov	r7, r1
	__asm__ volatile(
    7bb6:	f04f 0320 	mov.w	r3, #32
    7bba:	f3ef 8411 	mrs	r4, BASEPRI
    7bbe:	f383 8811 	msr	BASEPRI, r3
	return (s32_t)ceiling_fraction(
    7bc2:	480a      	ldr	r0, [pc, #40]	; (7bec <schedule_new_thread.part.8+0x3c>)
    7bc4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7bc8:	2100      	movs	r1, #0
    7bca:	2300      	movs	r3, #0
    7bcc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    7bd0:	fbc6 0107 	smlal	r0, r1, r6, r7
    7bd4:	f7f8 faa0 	bl	118 <__aeabi_ldivmod>
    7bd8:	4905      	ldr	r1, [pc, #20]	; (7bf0 <schedule_new_thread.part.8+0x40>)
    7bda:	1c42      	adds	r2, r0, #1
    7bdc:	f105 0018 	add.w	r0, r5, #24
    7be0:	f000 f962 	bl	7ea8 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7be4:	f384 8811 	msr	BASEPRI, r4
    7be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bea:	bf00      	nop
    7bec:	0004ffff 	.word	0x0004ffff
    7bf0:	000077e5 	.word	0x000077e5

00007bf4 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    7bf4:	7b42      	ldrb	r2, [r0, #13]
    7bf6:	06d2      	lsls	r2, r2, #27
    7bf8:	d103      	bne.n	7c02 <_ready_thread+0xe>
    7bfa:	6983      	ldr	r3, [r0, #24]
	if (_is_thread_ready(thread)) {
    7bfc:	b90b      	cbnz	r3, 7c02 <_ready_thread+0xe>
		_add_thread_to_ready_q(thread);
    7bfe:	f7ff bdd3 	b.w	77a8 <_add_thread_to_ready_q>
    7c02:	4770      	bx	lr

00007c04 <k_is_in_isr>:
    7c04:	f3ef 8005 	mrs	r0, IPSR
    7c08:	280d      	cmp	r0, #13
    7c0a:	d807      	bhi.n	7c1c <k_is_in_isr+0x18>
    7c0c:	b138      	cbz	r0, 7c1e <k_is_in_isr+0x1a>
    7c0e:	4b04      	ldr	r3, [pc, #16]	; (7c20 <k_is_in_isr+0x1c>)
    7c10:	6858      	ldr	r0, [r3, #4]
    7c12:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    7c16:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    7c1a:	4770      	bx	lr
    7c1c:	2001      	movs	r0, #1
}
    7c1e:	4770      	bx	lr
    7c20:	e000ed00 	.word	0xe000ed00

00007c24 <_is_thread_essential>:
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
    7c24:	4b02      	ldr	r3, [pc, #8]	; (7c30 <_is_thread_essential+0xc>)
    7c26:	689b      	ldr	r3, [r3, #8]
    7c28:	7b18      	ldrb	r0, [r3, #12]
}
    7c2a:	f000 0001 	and.w	r0, r0, #1
    7c2e:	4770      	bx	lr
    7c30:	20000df4 	.word	0x20000df4

00007c34 <_impl_k_thread_name_set>:
{
    7c34:	4770      	bx	lr

00007c36 <_impl_k_thread_start>:
{
    7c36:	b510      	push	{r4, lr}
	__asm__ volatile(
    7c38:	f04f 0320 	mov.w	r3, #32
    7c3c:	f3ef 8411 	mrs	r4, BASEPRI
    7c40:	f383 8811 	msr	BASEPRI, r3
    7c44:	7b43      	ldrb	r3, [r0, #13]
	if (_has_thread_started(thread)) {
    7c46:	0759      	lsls	r1, r3, #29
    7c48:	d402      	bmi.n	7c50 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7c4a:	f384 8811 	msr	BASEPRI, r4
    7c4e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7c50:	f023 0304 	bic.w	r3, r3, #4
    7c54:	7343      	strb	r3, [r0, #13]
	_ready_thread(thread);
    7c56:	f7ff ffcd 	bl	7bf4 <_ready_thread>
	_reschedule(key);
    7c5a:	4620      	mov	r0, r4
}
    7c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
    7c60:	f7ff bd3e 	b.w	76e0 <_reschedule>

00007c64 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    7c64:	b530      	push	{r4, r5, lr}
    7c66:	b087      	sub	sp, #28
    7c68:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7c6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7c6c:	9504      	str	r5, [sp, #16]
    7c6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    7c70:	9503      	str	r5, [sp, #12]
    7c72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    7c74:	9502      	str	r5, [sp, #8]
    7c76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    7c78:	9501      	str	r5, [sp, #4]
    7c7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7c7c:	9500      	str	r5, [sp, #0]
    7c7e:	f7f9 fe67 	bl	1950 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    7c82:	4b04      	ldr	r3, [pc, #16]	; (7c94 <_setup_new_thread+0x30>)
    7c84:	689b      	ldr	r3, [r3, #8]
    7c86:	b913      	cbnz	r3, 7c8e <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    7c88:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    7c8a:	b007      	add	sp, #28
    7c8c:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    7c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    7c90:	e7fa      	b.n	7c88 <_setup_new_thread+0x24>
    7c92:	bf00      	nop
    7c94:	20000df4 	.word	0x20000df4

00007c98 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    7c98:	b570      	push	{r4, r5, r6, lr}
    7c9a:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");

	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7c9c:	2600      	movs	r6, #0
    7c9e:	9605      	str	r6, [sp, #20]
    7ca0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7ca2:	9604      	str	r6, [sp, #16]
    7ca4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    7ca6:	9603      	str	r6, [sp, #12]
    7ca8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    7caa:	9602      	str	r6, [sp, #8]
    7cac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    7cae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7cb0:	9601      	str	r6, [sp, #4]
    7cb2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    7cb4:	9600      	str	r6, [sp, #0]
{
    7cb6:	4604      	mov	r4, r0
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7cb8:	f7ff ffd4 	bl	7c64 <_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    7cbc:	1c6b      	adds	r3, r5, #1
    7cbe:	d003      	beq.n	7cc8 <_impl_k_thread_create+0x30>
	if (delay == 0) {
    7cc0:	b92d      	cbnz	r5, 7cce <_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    7cc2:	4620      	mov	r0, r4
    7cc4:	f7ff ffb7 	bl	7c36 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    7cc8:	4620      	mov	r0, r4
    7cca:	b006      	add	sp, #24
    7ccc:	bd70      	pop	{r4, r5, r6, pc}
    7cce:	4629      	mov	r1, r5
    7cd0:	4620      	mov	r0, r4
    7cd2:	f7ff ff6d 	bl	7bb0 <schedule_new_thread.part.8>
    7cd6:	e7f7      	b.n	7cc8 <_impl_k_thread_create+0x30>

00007cd8 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    7cd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    7cda:	b510      	push	{r4, lr}
    7cdc:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    7cde:	b103      	cbz	r3, 7ce2 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    7ce0:	4798      	blx	r3
    7ce2:	7b63      	ldrb	r3, [r4, #13]
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    7ce4:	06da      	lsls	r2, r3, #27
    7ce6:	d109      	bne.n	7cfc <_k_thread_single_abort+0x24>
    7ce8:	69a2      	ldr	r2, [r4, #24]
	}

	if (_is_thread_ready(thread)) {
    7cea:	b93a      	cbnz	r2, 7cfc <_k_thread_single_abort+0x24>
		_remove_thread_from_ready_q(thread);
    7cec:	4620      	mov	r0, r4
    7cee:	f7ff fde3 	bl	78b8 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			(void)_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    7cf2:	7b63      	ldrb	r3, [r4, #13]
    7cf4:	f043 0308 	orr.w	r3, r3, #8
    7cf8:	7363      	strb	r3, [r4, #13]
    7cfa:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    7cfc:	079b      	lsls	r3, r3, #30
    7cfe:	d502      	bpl.n	7d06 <_k_thread_single_abort+0x2e>
			_unpend_thread_no_timeout(thread);
    7d00:	4620      	mov	r0, r4
    7d02:	f7ff fcd1 	bl	76a8 <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
    7d06:	69a3      	ldr	r3, [r4, #24]
    7d08:	2b00      	cmp	r3, #0
    7d0a:	d0f2      	beq.n	7cf2 <_k_thread_single_abort+0x1a>
	return _abort_timeout(&thread->base.timeout);
    7d0c:	f104 0018 	add.w	r0, r4, #24
    7d10:	f000 f906 	bl	7f20 <_abort_timeout>
    7d14:	e7ed      	b.n	7cf2 <_k_thread_single_abort+0x1a>
	...

00007d18 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    7d18:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    7d1a:	4f22      	ldr	r7, [pc, #136]	; (7da4 <_init_static_threads+0x8c>)
    7d1c:	4d22      	ldr	r5, [pc, #136]	; (7da8 <_init_static_threads+0x90>)
{
    7d1e:	b087      	sub	sp, #28
    7d20:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    7d22:	42bd      	cmp	r5, r7
    7d24:	f105 0430 	add.w	r4, r5, #48	; 0x30
    7d28:	d314      	bcc.n	7d54 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    7d2a:	4b20      	ldr	r3, [pc, #128]	; (7dac <_init_static_threads+0x94>)
    7d2c:	689a      	ldr	r2, [r3, #8]
    7d2e:	7bd3      	ldrb	r3, [r2, #15]
    7d30:	3b01      	subs	r3, #1
    7d32:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    7d34:	f04f 0320 	mov.w	r3, #32
    7d38:	f3ef 8511 	mrs	r5, BASEPRI
    7d3c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    7d40:	4c19      	ldr	r4, [pc, #100]	; (7da8 <_init_static_threads+0x90>)
    7d42:	42b4      	cmp	r4, r6
    7d44:	d322      	bcc.n	7d8c <_init_static_threads+0x74>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7d46:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    7d4a:	b007      	add	sp, #28
    7d4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    7d50:	f7ff be0a 	b.w	7968 <k_sched_unlock>
		_setup_new_thread(
    7d54:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7d58:	9305      	str	r3, [sp, #20]
    7d5a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7d5e:	9304      	str	r3, [sp, #16]
    7d60:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7d64:	9303      	str	r3, [sp, #12]
    7d66:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7d6a:	9302      	str	r3, [sp, #8]
    7d6c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7d70:	9301      	str	r3, [sp, #4]
    7d72:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7d76:	9300      	str	r3, [sp, #0]
    7d78:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
    7d7c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    7d7e:	f7ff ff71 	bl	7c64 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7d82:	f854 3c30 	ldr.w	r3, [r4, #-48]
    7d86:	64dd      	str	r5, [r3, #76]	; 0x4c
    7d88:	4625      	mov	r5, r4
    7d8a:	e7ca      	b.n	7d22 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    7d8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7d8e:	1c4b      	adds	r3, r1, #1
    7d90:	d003      	beq.n	7d9a <_init_static_threads+0x82>
			schedule_new_thread(thread_data->init_thread,
    7d92:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    7d94:	b919      	cbnz	r1, 7d9e <_init_static_threads+0x86>
    7d96:	f7ff ff4e 	bl	7c36 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7d9a:	3430      	adds	r4, #48	; 0x30
    7d9c:	e7d1      	b.n	7d42 <_init_static_threads+0x2a>
    7d9e:	f7ff ff07 	bl	7bb0 <schedule_new_thread.part.8>
    7da2:	e7fa      	b.n	7d9a <_init_static_threads+0x82>
    7da4:	20002a0c 	.word	0x20002a0c
    7da8:	20002a0c 	.word	0x20002a0c
    7dac:	20000df4 	.word	0x20000df4

00007db0 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    7db0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    7db2:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    7db4:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    7db6:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0;
    7db8:	73c3      	strb	r3, [r0, #15]
	node->next = NULL;
    7dba:	6183      	str	r3, [r0, #24]
	node->prev = NULL;
    7dbc:	61c3      	str	r3, [r0, #28]
    7dbe:	4770      	bx	lr

00007dc0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    7dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dc4:	4605      	mov	r5, r0
    7dc6:	b086      	sub	sp, #24
    7dc8:	4698      	mov	r8, r3
    7dca:	460e      	mov	r6, r1
    7dcc:	4617      	mov	r7, r2
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    7dce:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    7dd2:	f7ff fb8f 	bl	74f4 <_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    7dd6:	2000      	movs	r0, #0
    7dd8:	9005      	str	r0, [sp, #20]
    7dda:	9004      	str	r0, [sp, #16]
    7ddc:	9002      	str	r0, [sp, #8]
    7dde:	9001      	str	r0, [sp, #4]
    7de0:	4631      	mov	r1, r6
    7de2:	f8cd 800c 	str.w	r8, [sp, #12]
    7de6:	9500      	str	r5, [sp, #0]
    7de8:	4b05      	ldr	r3, [pc, #20]	; (7e00 <k_work_q_start+0x40>)
    7dea:	463a      	mov	r2, r7
    7dec:	4620      	mov	r0, r4
    7dee:	f7ff ff53 	bl	7c98 <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    7df2:	4904      	ldr	r1, [pc, #16]	; (7e04 <k_work_q_start+0x44>)
    7df4:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    7df6:	b006      	add	sp, #24
    7df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7dfc:	f7ff bf1a 	b.w	7c34 <_impl_k_thread_name_set>
    7e00:	000009a1 	.word	0x000009a1
    7e04:	00008b04 	.word	0x00008b04

00007e08 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    7e08:	4b03      	ldr	r3, [pc, #12]	; (7e18 <elapsed+0x10>)
    7e0a:	681b      	ldr	r3, [r3, #0]
    7e0c:	b90b      	cbnz	r3, 7e12 <elapsed+0xa>
    7e0e:	f7f9 bb6d 	b.w	14ec <z_clock_elapsed>
}
    7e12:	2000      	movs	r0, #0
    7e14:	4770      	bx	lr
    7e16:	bf00      	nop
    7e18:	20000eac 	.word	0x20000eac

00007e1c <next_timeout>:

static s32_t next_timeout(void)
{
    7e1c:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    7e1e:	4b10      	ldr	r3, [pc, #64]	; (7e60 <next_timeout+0x44>)
    7e20:	781b      	ldrb	r3, [r3, #0]
    7e22:	2b00      	cmp	r3, #0
	return list->head == list;
    7e24:	4b0f      	ldr	r3, [pc, #60]	; (7e64 <next_timeout+0x48>)
    7e26:	681c      	ldr	r4, [r3, #0]
    7e28:	bf14      	ite	ne
    7e2a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7e2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e32:	429c      	cmp	r4, r3
    7e34:	d00a      	beq.n	7e4c <next_timeout+0x30>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    7e36:	b14c      	cbz	r4, 7e4c <next_timeout+0x30>
    7e38:	68a5      	ldr	r5, [r4, #8]
    7e3a:	f7ff ffe5 	bl	7e08 <elapsed>
    7e3e:	1a28      	subs	r0, r5, r0
    7e40:	2800      	cmp	r0, #0
    7e42:	db0a      	blt.n	7e5a <next_timeout+0x3e>
    7e44:	68a4      	ldr	r4, [r4, #8]
    7e46:	f7ff ffdf 	bl	7e08 <elapsed>
    7e4a:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7e4c:	4b06      	ldr	r3, [pc, #24]	; (7e68 <next_timeout+0x4c>)
    7e4e:	691b      	ldr	r3, [r3, #16]
    7e50:	b113      	cbz	r3, 7e58 <next_timeout+0x3c>
    7e52:	4298      	cmp	r0, r3
    7e54:	bfa8      	it	ge
    7e56:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7e58:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    7e5a:	2000      	movs	r0, #0
    7e5c:	e7f6      	b.n	7e4c <next_timeout+0x30>
    7e5e:	bf00      	nop
    7e60:	20000eb0 	.word	0x20000eb0
    7e64:	20002980 	.word	0x20002980
    7e68:	20000df4 	.word	0x20000df4

00007e6c <k_spin_lock.isra.2>:
	__asm__ volatile(
    7e6c:	f04f 0320 	mov.w	r3, #32
    7e70:	f3ef 8011 	mrs	r0, BASEPRI
    7e74:	f383 8811 	msr	BASEPRI, r3
    7e78:	4770      	bx	lr
	...

00007e7c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7e7c:	b148      	cbz	r0, 7e92 <remove_timeout+0x16>
	return (node == list->tail) ? NULL : node->next;
    7e7e:	4b09      	ldr	r3, [pc, #36]	; (7ea4 <remove_timeout+0x28>)
    7e80:	685b      	ldr	r3, [r3, #4]
    7e82:	4298      	cmp	r0, r3
    7e84:	d005      	beq.n	7e92 <remove_timeout+0x16>
    7e86:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    7e88:	b11b      	cbz	r3, 7e92 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    7e8a:	689a      	ldr	r2, [r3, #8]
    7e8c:	6881      	ldr	r1, [r0, #8]
    7e8e:	440a      	add	r2, r1
    7e90:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    7e92:	e890 000c 	ldmia.w	r0, {r2, r3}
    7e96:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    7e98:	6802      	ldr	r2, [r0, #0]
    7e9a:	6053      	str	r3, [r2, #4]
	node->next = NULL;
    7e9c:	2300      	movs	r3, #0
    7e9e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    7ea0:	6043      	str	r3, [r0, #4]
    7ea2:	4770      	bx	lr
    7ea4:	20002980 	.word	0x20002980

00007ea8 <_add_timeout>:

void _add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    7ea8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    7eaa:	60c1      	str	r1, [r0, #12]
{
    7eac:	4616      	mov	r6, r2
    7eae:	4604      	mov	r4, r0
	ticks = max(1, ticks);

	LOCKED(&timeout_lock) {
    7eb0:	f7ff ffdc 	bl	7e6c <k_spin_lock.isra.2>
    7eb4:	4605      	mov	r5, r0
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    7eb6:	f7ff ffa7 	bl	7e08 <elapsed>
	return list->head == list;
    7eba:	4a18      	ldr	r2, [pc, #96]	; (7f1c <_add_timeout+0x74>)
    7ebc:	6813      	ldr	r3, [r2, #0]
    7ebe:	2e01      	cmp	r6, #1
    7ec0:	bfac      	ite	ge
    7ec2:	1980      	addge	r0, r0, r6
    7ec4:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7ec6:	4293      	cmp	r3, r2
    7ec8:	60a0      	str	r0, [r4, #8]
    7eca:	d001      	beq.n	7ed0 <_add_timeout+0x28>
    7ecc:	6856      	ldr	r6, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
    7ece:	b933      	cbnz	r3, 7ede <_add_timeout+0x36>
	node->next = list;
    7ed0:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
    7ed2:	6853      	ldr	r3, [r2, #4]
    7ed4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    7ed6:	6853      	ldr	r3, [r2, #4]
    7ed8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7eda:	6054      	str	r4, [r2, #4]
    7edc:	e00b      	b.n	7ef6 <_add_timeout+0x4e>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    7ede:	6898      	ldr	r0, [r3, #8]
    7ee0:	68a1      	ldr	r1, [r4, #8]
    7ee2:	4288      	cmp	r0, r1
    7ee4:	dd14      	ble.n	7f10 <_add_timeout+0x68>
				t->dticks -= to->dticks;
    7ee6:	1a41      	subs	r1, r0, r1
    7ee8:	6099      	str	r1, [r3, #8]
		node->prev = insert_point->prev;
    7eea:	6859      	ldr	r1, [r3, #4]
    7eec:	6061      	str	r1, [r4, #4]
		node->next = insert_point;
    7eee:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
    7ef0:	6859      	ldr	r1, [r3, #4]
    7ef2:	600c      	str	r4, [r1, #0]
		insert_point->prev = node;
    7ef4:	605c      	str	r4, [r3, #4]
	return list->head == list;
    7ef6:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7ef8:	4293      	cmp	r3, r2
    7efa:	d006      	beq.n	7f0a <_add_timeout+0x62>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7efc:	429c      	cmp	r4, r3
    7efe:	d104      	bne.n	7f0a <_add_timeout+0x62>
			z_clock_set_timeout(next_timeout(), false);
    7f00:	f7ff ff8c 	bl	7e1c <next_timeout>
    7f04:	2100      	movs	r1, #0
    7f06:	f7f9 faad 	bl	1464 <z_clock_set_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7f0a:	f385 8811 	msr	BASEPRI, r5
		}
	}
}
    7f0e:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    7f10:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    7f12:	42b3      	cmp	r3, r6
    7f14:	60a1      	str	r1, [r4, #8]
    7f16:	d0db      	beq.n	7ed0 <_add_timeout+0x28>
    7f18:	681b      	ldr	r3, [r3, #0]
    7f1a:	e7d8      	b.n	7ece <_add_timeout+0x26>
    7f1c:	20002980 	.word	0x20002980

00007f20 <_abort_timeout>:

int _abort_timeout(struct _timeout *to)
{
    7f20:	b510      	push	{r4, lr}
    7f22:	4602      	mov	r2, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    7f24:	f7ff ffa2 	bl	7e6c <k_spin_lock.isra.2>
		if (sys_dnode_is_linked(&to->node)) {
    7f28:	6813      	ldr	r3, [r2, #0]
	LOCKED(&timeout_lock) {
    7f2a:	4604      	mov	r4, r0
		if (sys_dnode_is_linked(&to->node)) {
    7f2c:	b133      	cbz	r3, 7f3c <_abort_timeout+0x1c>
			remove_timeout(to);
    7f2e:	4610      	mov	r0, r2
    7f30:	f7ff ffa4 	bl	7e7c <remove_timeout>
			ret = 0;
    7f34:	2000      	movs	r0, #0
    7f36:	f384 8811 	msr	BASEPRI, r4
		}
	}

	return ret;
}
    7f3a:	bd10      	pop	{r4, pc}
    7f3c:	f06f 0015 	mvn.w	r0, #21
    7f40:	e7f9      	b.n	7f36 <_abort_timeout+0x16>

00007f42 <_get_next_timeout_expiry>:

	return ticks;
}

s32_t _get_next_timeout_expiry(void)
{
    7f42:	b510      	push	{r4, lr}
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
    7f44:	f7ff ff92 	bl	7e6c <k_spin_lock.isra.2>
    7f48:	4604      	mov	r4, r0
		ret = next_timeout();
    7f4a:	f7ff ff67 	bl	7e1c <next_timeout>
    7f4e:	f384 8811 	msr	BASEPRI, r4
	}
	return ret;
}
    7f52:	bd10      	pop	{r4, pc}

00007f54 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
    7f54:	b570      	push	{r4, r5, r6, lr}
    7f56:	460e      	mov	r6, r1
    7f58:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    7f5a:	f7ff ff87 	bl	7e6c <k_spin_lock.isra.2>
    7f5e:	4605      	mov	r5, r0
		int next = next_timeout();
    7f60:	f7ff ff5c 	bl	7e1c <next_timeout>
		bool sooner = (next == K_FOREVER) || (ticks < next);
    7f64:	1c43      	adds	r3, r0, #1
    7f66:	d007      	beq.n	7f78 <z_set_timeout_expiry+0x24>
		 * what we have.  Also don't try to set a timeout when
		 * one is about to expire: drivers have internal logic
		 * that will bump the timeout to the "next" tick if
		 * it's not considered to be settable as directed.
		 */
		if (sooner && !imminent) {
    7f68:	42a0      	cmp	r0, r4
    7f6a:	dd05      	ble.n	7f78 <z_set_timeout_expiry+0x24>
    7f6c:	2801      	cmp	r0, #1
    7f6e:	dd03      	ble.n	7f78 <z_set_timeout_expiry+0x24>
			z_clock_set_timeout(ticks, idle);
    7f70:	4631      	mov	r1, r6
    7f72:	4620      	mov	r0, r4
    7f74:	f7f9 fa76 	bl	1464 <z_clock_set_timeout>
    7f78:	f385 8811 	msr	BASEPRI, r5
    7f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

00007f80 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    7f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f84:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7f86:	f7ff fc61 	bl	784c <z_time_slice>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);
    7f8a:	f7ff ff6f 	bl	7e6c <k_spin_lock.isra.2>

	announce_remaining = ticks;
    7f8e:	4d1e      	ldr	r5, [pc, #120]	; (8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>)
	return list->head == list;
    7f90:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    7f94:	4e1d      	ldr	r6, [pc, #116]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
    7f96:	602c      	str	r4, [r5, #0]
	k_spinlock_key_t key = k_spin_lock(&timeout_lock);
    7f98:	4607      	mov	r7, r0
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
    7f9a:	f04f 0900 	mov.w	r9, #0
    7f9e:	f8d8 4000 	ldr.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7fa2:	4544      	cmp	r4, r8
    7fa4:	d006      	beq.n	7fb4 <z_clock_announce+0x34>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7fa6:	b12c      	cbz	r4, 7fb4 <z_clock_announce+0x34>
    7fa8:	68a1      	ldr	r1, [r4, #8]
    7faa:	6828      	ldr	r0, [r5, #0]
    7fac:	4281      	cmp	r1, r0
    7fae:	dd14      	ble.n	7fda <z_clock_announce+0x5a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7fb0:	1a09      	subs	r1, r1, r0
    7fb2:	60a1      	str	r1, [r4, #8]
	}

	curr_tick += announce_remaining;
    7fb4:	e9d6 2300 	ldrd	r2, r3, [r6]
    7fb8:	6829      	ldr	r1, [r5, #0]
    7fba:	1852      	adds	r2, r2, r1
    7fbc:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
	announce_remaining = 0;
    7fc0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    7fc2:	e9c6 2300 	strd	r2, r3, [r6]
	announce_remaining = 0;
    7fc6:	602c      	str	r4, [r5, #0]

	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    7fc8:	f7ff ffbb 	bl	7f42 <_get_next_timeout_expiry>
    7fcc:	4621      	mov	r1, r4
    7fce:	f7f9 fa49 	bl	1464 <z_clock_set_timeout>
    7fd2:	f387 8811 	msr	BASEPRI, r7

	k_spin_unlock(&timeout_lock, key);
}
    7fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    7fda:	e9d6 2300 	ldrd	r2, r3, [r6]
    7fde:	1852      	adds	r2, r2, r1
    7fe0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
		t->dticks = 0;
    7fe4:	f8c4 9008 	str.w	r9, [r4, #8]
		announce_remaining -= dt;
    7fe8:	1a41      	subs	r1, r0, r1
		remove_timeout(t);
    7fea:	4620      	mov	r0, r4
		curr_tick += dt;
    7fec:	e9c6 2300 	strd	r2, r3, [r6]
		announce_remaining -= dt;
    7ff0:	6029      	str	r1, [r5, #0]
		remove_timeout(t);
    7ff2:	f7ff ff43 	bl	7e7c <remove_timeout>
    7ff6:	f387 8811 	msr	BASEPRI, r7
		t->fn(t);
    7ffa:	68e3      	ldr	r3, [r4, #12]
    7ffc:	4620      	mov	r0, r4
    7ffe:	4798      	blx	r3
		key = k_spin_lock(&timeout_lock);
    8000:	f7ff ff34 	bl	7e6c <k_spin_lock.isra.2>
    8004:	4607      	mov	r7, r0
    8006:	e7ca      	b.n	7f9e <z_clock_announce+0x1e>
    8008:	20000eac 	.word	0x20000eac
    800c:	20000eb8 	.word	0x20000eb8
    8010:	20002980 	.word	0x20002980

00008014 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
    8014:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
    8018:	f7ff ff28 	bl	7e6c <k_spin_lock.isra.2>
    801c:	4604      	mov	r4, r0
		t = curr_tick + z_clock_elapsed();
    801e:	f7f9 fa65 	bl	14ec <z_clock_elapsed>
    8022:	4b06      	ldr	r3, [pc, #24]	; (803c <z_tick_get+0x28>)
    8024:	e9d3 2300 	ldrd	r2, r3, [r3]
    8028:	eb12 0b00 	adds.w	fp, r2, r0
    802c:	f143 0c00 	adc.w	ip, r3, #0
    8030:	4658      	mov	r0, fp
    8032:	4661      	mov	r1, ip
    8034:	f384 8811 	msr	BASEPRI, r4
	}
	return t;
}
    8038:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    803c:	20000eb8 	.word	0x20000eb8

00008040 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    8040:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    8042:	f7ff ffe7 	bl	8014 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    8046:	bd08      	pop	{r3, pc}

00008048 <_impl_k_uptime_get_32>:

u32_t _impl_k_uptime_get_32(void)
{
    8048:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
    804a:	f7ff fff9 	bl	8040 <z_tick_get_32>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    804e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8052:	2264      	movs	r2, #100	; 0x64
    8054:	2300      	movs	r3, #0
    8056:	fba0 0101 	umull	r0, r1, r0, r1
    805a:	f7f8 f8ad 	bl	1b8 <__aeabi_uldivmod>
}
    805e:	bd08      	pop	{r3, pc}

00008060 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    8060:	b570      	push	{r4, r5, r6, lr}
    8062:	2314      	movs	r3, #20
	if (remove && sys_dnode_is_linked(&event->_node)) {
    8064:	4e11      	ldr	r6, [pc, #68]	; (80ac <clear_event_registrations+0x4c>)
    8066:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    806a:	2500      	movs	r5, #0
	for (; last_registered >= 0; last_registered--) {
    806c:	2900      	cmp	r1, #0
    806e:	da00      	bge.n	8072 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    8070:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    8072:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
    8074:	6085      	str	r5, [r0, #8]
	switch (event->type) {
    8076:	f3c3 0303 	ubfx	r3, r3, #0, #4
    807a:	3b01      	subs	r3, #1
    807c:	b2db      	uxtb	r3, r3
    807e:	2b03      	cmp	r3, #3
    8080:	d809      	bhi.n	8096 <clear_event_registrations+0x36>
	if (remove && sys_dnode_is_linked(&event->_node)) {
    8082:	5cf3      	ldrb	r3, [r6, r3]
    8084:	b13b      	cbz	r3, 8096 <clear_event_registrations+0x36>
    8086:	6804      	ldr	r4, [r0, #0]
    8088:	b12c      	cbz	r4, 8096 <clear_event_registrations+0x36>
	node->prev->next = node->next;
    808a:	6843      	ldr	r3, [r0, #4]
    808c:	601c      	str	r4, [r3, #0]
	node->next->prev = node->prev;
    808e:	6804      	ldr	r4, [r0, #0]
    8090:	6063      	str	r3, [r4, #4]
	node->next = NULL;
    8092:	6005      	str	r5, [r0, #0]
	node->prev = NULL;
    8094:	6045      	str	r5, [r0, #4]
    8096:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    809a:	f04f 0320 	mov.w	r3, #32
    809e:	f3ef 8211 	mrs	r2, BASEPRI
    80a2:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    80a6:	3901      	subs	r1, #1
    80a8:	3814      	subs	r0, #20
    80aa:	e7df      	b.n	806c <clear_event_registrations+0xc>
    80ac:	00008b0e 	.word	0x00008b0e

000080b0 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
    80b0:	6883      	ldr	r3, [r0, #8]
{
    80b2:	b570      	push	{r4, r5, r6, lr}
    80b4:	4605      	mov	r5, r0
    80b6:	460e      	mov	r6, r1
	if (!event->poller) {
    80b8:	b1cb      	cbz	r3, 80ee <signal_poll_event+0x3e>
	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread != NULL,
		 "poller should have a thread\n");

	event->poller->is_polling = false;
    80ba:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
    80bc:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
    80be:	711a      	strb	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
    80c0:	7b63      	ldrb	r3, [r4, #13]
    80c2:	079a      	lsls	r2, r3, #30
    80c4:	d513      	bpl.n	80ee <signal_poll_event+0x3e>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    80c6:	6a23      	ldr	r3, [r4, #32]
    80c8:	3302      	adds	r3, #2
    80ca:	d01a      	beq.n	8102 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
    80cc:	4620      	mov	r0, r4
    80ce:	f7ff fafc 	bl	76ca <_unpend_thread>
	_set_thread_return_value(thread,
    80d2:	2e08      	cmp	r6, #8
    80d4:	bf14      	ite	ne
    80d6:	2300      	movne	r3, #0
    80d8:	f06f 0303 	mvneq.w	r3, #3
    80dc:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    80de:	7b63      	ldrb	r3, [r4, #13]
    80e0:	06db      	lsls	r3, r3, #27
    80e2:	d104      	bne.n	80ee <signal_poll_event+0x3e>
    80e4:	69a3      	ldr	r3, [r4, #24]
				 state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
    80e6:	b913      	cbnz	r3, 80ee <signal_poll_event+0x3e>
		_add_thread_to_ready_q(thread);
    80e8:	4620      	mov	r0, r4
    80ea:	f7ff fb5d 	bl	77a8 <_add_thread_to_ready_q>
	event->state |= state;
    80ee:	68eb      	ldr	r3, [r5, #12]
    80f0:	f3c3 3204 	ubfx	r2, r3, #12, #5
    80f4:	4316      	orrs	r6, r2
    80f6:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
    80fa:	2000      	movs	r0, #0
	event->state |= state;
    80fc:	60eb      	str	r3, [r5, #12]
	event->poller = NULL;
    80fe:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
    8100:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    8102:	f06f 000a 	mvn.w	r0, #10
}
    8106:	bd70      	pop	{r4, r5, r6, pc}

00008108 <add_event>:
{
    8108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    810a:	6803      	ldr	r3, [r0, #0]
    810c:	4298      	cmp	r0, r3
    810e:	4604      	mov	r4, r0
    8110:	460e      	mov	r6, r1
    8112:	4617      	mov	r7, r2
    8114:	d106      	bne.n	8124 <add_event+0x1c>
	node->next = list;
    8116:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
    8118:	6863      	ldr	r3, [r4, #4]
    811a:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
    811c:	6863      	ldr	r3, [r4, #4]
    811e:	601e      	str	r6, [r3, #0]
	list->tail = node;
    8120:	6066      	str	r6, [r4, #4]
    8122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    8124:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
    8126:	2b00      	cmp	r3, #0
    8128:	d0f5      	beq.n	8116 <add_event+0xe>
		_is_t1_higher_prio_than_t2(pending->poller->thread,
    812a:	689b      	ldr	r3, [r3, #8]
    812c:	6811      	ldr	r1, [r2, #0]
    812e:	6818      	ldr	r0, [r3, #0]
    8130:	f7ff fa8b 	bl	764a <_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
    8134:	2800      	cmp	r0, #0
    8136:	d1ee      	bne.n	8116 <add_event+0xe>
	return list->head == list;
    8138:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    813a:	42ac      	cmp	r4, r5
    813c:	d0eb      	beq.n	8116 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    813e:	2d00      	cmp	r5, #0
    8140:	d0e9      	beq.n	8116 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    8142:	68ab      	ldr	r3, [r5, #8]
    8144:	6838      	ldr	r0, [r7, #0]
    8146:	6819      	ldr	r1, [r3, #0]
    8148:	f7ff fa7f 	bl	764a <_is_t1_higher_prio_than_t2>
    814c:	b130      	cbz	r0, 815c <add_event+0x54>
		node->prev = insert_point->prev;
    814e:	686b      	ldr	r3, [r5, #4]
    8150:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
    8152:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
    8154:	686b      	ldr	r3, [r5, #4]
    8156:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
    8158:	606e      	str	r6, [r5, #4]
    815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    815c:	6863      	ldr	r3, [r4, #4]
    815e:	429d      	cmp	r5, r3
    8160:	d0d9      	beq.n	8116 <add_event+0xe>
    8162:	682d      	ldr	r5, [r5, #0]
    8164:	e7eb      	b.n	813e <add_event+0x36>

00008166 <k_poll_event_init>:
{
    8166:	b530      	push	{r4, r5, lr}
	event->type = type;
    8168:	7b45      	ldrb	r5, [r0, #13]
	event->obj = obj;
    816a:	6103      	str	r3, [r0, #16]
	event->type = type;
    816c:	f361 0503 	bfi	r5, r1, #0, #4
    8170:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
    8172:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
    8174:	2400      	movs	r4, #0
	event->state = K_POLL_STATE_NOT_READY;
    8176:	f364 3110 	bfi	r1, r4, #12, #5
    817a:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
    817c:	0c09      	lsrs	r1, r1, #16
    817e:	f362 0141 	bfi	r1, r2, #1, #1
    8182:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    8184:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    8186:	6084      	str	r4, [r0, #8]
	event->unused = 0;
    8188:	f364 028f 	bfi	r2, r4, #2, #14
    818c:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    818e:	bd30      	pop	{r4, r5, pc}

00008190 <_impl_k_poll>:
{
    8190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = true, };
    8194:	4b43      	ldr	r3, [pc, #268]	; (82a4 <_impl_k_poll+0x114>)
{
    8196:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
    8198:	689b      	ldr	r3, [r3, #8]
    819a:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
    819c:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
    819e:	2301      	movs	r3, #1
{
    81a0:	4607      	mov	r7, r0
    81a2:	468a      	mov	sl, r1
    81a4:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
    81a6:	f88d 3004 	strb.w	r3, [sp, #4]
    81aa:	4604      	mov	r4, r0
	int last_registered = -1, rc;
    81ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
    81b0:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
    81b2:	4556      	cmp	r6, sl
    81b4:	db13      	blt.n	81de <_impl_k_poll+0x4e>
    81b6:	f04f 0320 	mov.w	r3, #32
    81ba:	f3ef 8611 	mrs	r6, BASEPRI
    81be:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
    81c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    81c6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    81ca:	2b00      	cmp	r3, #0
    81cc:	d140      	bne.n	8250 <_impl_k_poll+0xc0>
	clear_event_registrations(events, last_registered, key);
    81ce:	4632      	mov	r2, r6
    81d0:	4629      	mov	r1, r5
    81d2:	4638      	mov	r0, r7
    81d4:	f7ff ff44 	bl	8060 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    81d8:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
    81dc:	e042      	b.n	8264 <_impl_k_poll+0xd4>
	__asm__ volatile(
    81de:	f04f 0320 	mov.w	r3, #32
    81e2:	f3ef 8b11 	mrs	fp, BASEPRI
    81e6:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
    81ea:	7b63      	ldrb	r3, [r4, #13]
    81ec:	f003 030f 	and.w	r3, r3, #15
    81f0:	2b02      	cmp	r3, #2
    81f2:	d003      	beq.n	81fc <_impl_k_poll+0x6c>
    81f4:	2b04      	cmp	r3, #4
    81f6:	d004      	beq.n	8202 <_impl_k_poll+0x72>
    81f8:	2b01      	cmp	r3, #1
    81fa:	d106      	bne.n	820a <_impl_k_poll+0x7a>
		if (event->signal->signaled != 0) {
    81fc:	6922      	ldr	r2, [r4, #16]
    81fe:	6892      	ldr	r2, [r2, #8]
    8200:	e001      	b.n	8206 <_impl_k_poll+0x76>
		if (!k_queue_is_empty(event->queue)) {
    8202:	6922      	ldr	r2, [r4, #16]
    8204:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0) {
    8206:	2a00      	cmp	r2, #0
    8208:	d13f      	bne.n	828a <_impl_k_poll+0xfa>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
    820a:	f1b8 0f00 	cmp.w	r8, #0
    820e:	d015      	beq.n	823c <_impl_k_poll+0xac>
    8210:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8214:	b192      	cbz	r2, 823c <_impl_k_poll+0xac>
	switch (event->type) {
    8216:	2b02      	cmp	r3, #2
    8218:	d007      	beq.n	822a <_impl_k_poll+0x9a>
    821a:	2b04      	cmp	r3, #4
    821c:	d013      	beq.n	8246 <_impl_k_poll+0xb6>
    821e:	2b01      	cmp	r3, #1
    8220:	d109      	bne.n	8236 <_impl_k_poll+0xa6>
		add_event(&event->signal->poll_events, event, poller);
    8222:	466a      	mov	r2, sp
    8224:	4621      	mov	r1, r4
    8226:	6920      	ldr	r0, [r4, #16]
    8228:	e003      	b.n	8232 <_impl_k_poll+0xa2>
		add_event(&event->sem->poll_events, event, poller);
    822a:	6920      	ldr	r0, [r4, #16]
    822c:	466a      	mov	r2, sp
    822e:	4621      	mov	r1, r4
    8230:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    8232:	f7ff ff69 	bl	8108 <add_event>
	event->poller = poller;
    8236:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
    823a:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    823c:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    8240:	3601      	adds	r6, #1
    8242:	3414      	adds	r4, #20
    8244:	e7b5      	b.n	81b2 <_impl_k_poll+0x22>
		add_event(&event->queue->poll_events, event, poller);
    8246:	6920      	ldr	r0, [r4, #16]
    8248:	466a      	mov	r2, sp
    824a:	4621      	mov	r1, r4
    824c:	3008      	adds	r0, #8
    824e:	e7f0      	b.n	8232 <_impl_k_poll+0xa2>
	poller.is_polling = false;
    8250:	2300      	movs	r3, #0
    8252:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
    8256:	f1b8 0f00 	cmp.w	r8, #0
    825a:	d107      	bne.n	826c <_impl_k_poll+0xdc>
    825c:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
    8260:	f06f 040a 	mvn.w	r4, #10
}
    8264:	4620      	mov	r0, r4
    8266:	b005      	add	sp, #20
    8268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    826c:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
    826e:	4642      	mov	r2, r8
    8270:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    8272:	9102      	str	r1, [sp, #8]
    8274:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
    8276:	f7ff fb65 	bl	7944 <_pend_current_thread>
    827a:	4604      	mov	r4, r0
	__asm__ volatile(
    827c:	f04f 0320 	mov.w	r3, #32
    8280:	f3ef 8611 	mrs	r6, BASEPRI
    8284:	f383 8811 	msr	BASEPRI, r3
    8288:	e7a1      	b.n	81ce <_impl_k_poll+0x3e>
	event->state |= state;
    828a:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
    828c:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
    8290:	f3c2 3104 	ubfx	r1, r2, #12, #5
    8294:	430b      	orrs	r3, r1
    8296:	f363 3210 	bfi	r2, r3, #12, #5
    829a:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
    829c:	f88d 9004 	strb.w	r9, [sp, #4]
    82a0:	e7cc      	b.n	823c <_impl_k_poll+0xac>
    82a2:	bf00      	nop
    82a4:	20000df4 	.word	0x20000df4

000082a8 <_handle_obj_poll_events>:
	return list->head == list;
    82a8:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    82aa:	4298      	cmp	r0, r3
    82ac:	d00a      	beq.n	82c4 <_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
    82ae:	e893 0005 	ldmia.w	r3, {r0, r2}
    82b2:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
    82b4:	6818      	ldr	r0, [r3, #0]
    82b6:	6042      	str	r2, [r0, #4]
	node->next = NULL;
    82b8:	2200      	movs	r2, #0
    82ba:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
    82bc:	605a      	str	r2, [r3, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
    82be:	4618      	mov	r0, r3
    82c0:	f7ff bef6 	b.w	80b0 <signal_poll_event>
    82c4:	4770      	bx	lr

000082c6 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    82c6:	4770      	bx	lr
